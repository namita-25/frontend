{"ast":null,"code":"import React from 'react';\nimport { default as Box } from '../components/primitives/Box';\nimport { ResponsiveQueryContext } from './useResponsiveQuery/ResponsiveQueryProvider';\n\nfunction flattenChildren(children) {\n  let keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const childrenArray = React.Children.toArray(children);\n  return childrenArray.reduce((flatChildren, child, index) => {\n    if (child.type === React.Fragment) {\n      return flatChildren.concat(flattenChildren(child.props.children, keys.concat(child.key || index)));\n    }\n\n    if ( /*#__PURE__*/React.isValidElement(child)) {\n      flatChildren.push( /*#__PURE__*/React.cloneElement(child, {\n        key: keys.concat(String(child.key || index)).join('.')\n      }));\n    } else {\n      flatChildren.push(child);\n    }\n\n    return flatChildren;\n  }, []);\n}\n\nconst getSpacedChildren = (children, space, axis, reverse, divider) => {\n  let childrenArray = React.Children.toArray(flattenChildren(children));\n  childrenArray = reverse === 'reverse' ? [...childrenArray].reverse() : childrenArray;\n  const orientation = axis === 'X' ? 'vertical' : 'horizontal'; // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries; // If there's a divider, we wrap it with a Box and apply vertical and horizontal margins else we add a spacer Box with height or width\n\n  if (divider) {\n    const spacingProp = { ...(axis === 'X' ? {\n        mx: space\n      } : {\n        my: space\n      })\n    };\n    divider = /*#__PURE__*/React.cloneElement(divider, {\n      orientation,\n      ...spacingProp\n    });\n    childrenArray = childrenArray.map((child, index) => {\n      var _child$key;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: (_child$key = child.key) !== null && _child$key !== void 0 ? _child$key : \"spaced-child-\".concat(index)\n      }, child, index < childrenArray.length - 1 && divider);\n    });\n  } else {\n    const spacingProp = { ...(axis === 'X' ? {\n        width: space\n      } : {\n        height: space\n      })\n    };\n    childrenArray = childrenArray.map((child, index) => {\n      var _child$key2;\n\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: (_child$key2 = child.key) !== null && _child$key2 !== void 0 ? _child$key2 : \"spaced-child-\".concat(index)\n      }, child, disableCSSMediaQueries ? index < childrenArray.length - 1 && /*#__PURE__*/React.createElement(Box, spacingProp) : /*#__PURE__*/React.createElement(React.Fragment, null));\n    });\n  }\n\n  return childrenArray;\n};\n\nexport default getSpacedChildren;","map":{"version":3,"mappings":"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","names":["React","default","Box","ResponsiveQueryContext","flattenChildren","children","keys","childrenArray","Children","toArray","reduce","flatChildren","child","index","type","Fragment","concat","props","key","isValidElement","push","cloneElement","String","join","getSpacedChildren","space","axis","reverse","divider","orientation","responsiveQueryContext","useContext","disableCSSMediaQueries","spacingProp","mx","my","map","length","width","height"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/utils/getSpacedChildren.tsx"],"sourcesContent":["import React from 'react';\nimport { default as Box } from '../components/primitives/Box';\nimport type { SpaceType as ThemeSpaceType } from '../components/types';\nimport { ResponsiveQueryContext } from './useResponsiveQuery/ResponsiveQueryProvider';\n\ntype SpaceType =\n  | 'gutter'\n  | '2xs'\n  | 'xs'\n  | 'sm'\n  | 'md'\n  | 'lg'\n  | 'xl'\n  | '2xl'\n  | ThemeSpaceType;\n\n// Thanks @gregberge for code and @nandorojo for suggestion.\n// Original source: https://github.com/gregberge/react-flatten-children\ntype ReactChildArray = ReturnType<typeof React.Children.toArray>;\nfunction flattenChildren(\n  children: JSX.Element[] | JSX.Element,\n  keys: (string | number)[] = []\n): ReactChildArray {\n  const childrenArray = React.Children.toArray(children);\n  return childrenArray.reduce(\n    (flatChildren: ReactChildArray, child: any, index: number) => {\n      if ((child as React.ReactElement<any>).type === React.Fragment) {\n        return flatChildren.concat(\n          flattenChildren(\n            (child as React.ReactElement<any>).props.children,\n            keys.concat(child.key || index)\n          )\n        );\n      }\n      if (React.isValidElement(child)) {\n        flatChildren.push(\n          React.cloneElement(child, {\n            key: keys.concat(String(child.key || index)).join('.'),\n          })\n        );\n      } else {\n        flatChildren.push(child);\n      }\n      return flatChildren;\n    },\n    []\n  );\n}\n\nconst getSpacedChildren = (\n  children: JSX.Element[] | JSX.Element,\n  space: undefined | SpaceType,\n  axis: 'X' | 'Y',\n  reverse: string,\n  divider: JSX.Element | undefined\n): any => {\n  let childrenArray = React.Children.toArray(flattenChildren(children));\n  childrenArray =\n    reverse === 'reverse' ? [...childrenArray].reverse() : childrenArray;\n\n  const orientation = axis === 'X' ? 'vertical' : 'horizontal';\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  // If there's a divider, we wrap it with a Box and apply vertical and horizontal margins else we add a spacer Box with height or width\n  if (divider) {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { mx: space } : { my: space }),\n    };\n\n    divider = React.cloneElement(divider, {\n      orientation,\n      ...spacingProp,\n    });\n\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {index < childrenArray.length - 1 && divider}\n        </React.Fragment>\n      );\n    });\n  } else {\n    const spacingProp: object = {\n      ...(axis === 'X' ? { width: space } : { height: space }),\n    };\n    childrenArray = childrenArray.map((child: any, index: number) => {\n      return (\n        <React.Fragment key={child.key ?? `spaced-child-${index}`}>\n          {child}\n          {disableCSSMediaQueries ? (\n            index < childrenArray.length - 1 && <Box {...spacingProp} />\n          ) : (\n            <></>\n          )}\n        </React.Fragment>\n      );\n    });\n  }\n\n  return childrenArray;\n};\n\nexport default getSpacedChildren;\n"]},"metadata":{},"sourceType":"module"}