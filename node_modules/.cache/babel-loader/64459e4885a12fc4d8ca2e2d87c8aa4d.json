{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Spinner from '../Spinner';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { default as Box } from '../Box';\nimport HStack from '../Stack/HStack';\nimport { Pressable } from '../Pressable';\nimport { composeEventHandlers } from '../../../utils';\nimport { useHover, useFocus, useIsPressed } from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Button = (_ref, ref) => {\n  let {\n    //@ts-ignore\n    children,\n    startIcon,\n    rightIcon,\n    leftIcon,\n    endIcon,\n    spinner,\n    isDisabled,\n    isLoading,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    spinnerPlacement = 'start',\n    ...props\n  } = _ref;\n\n  var _props$accessibilityR;\n\n  const {\n    hoverProps,\n    isHovered\n  } = useHover();\n  const {\n    pressableProps,\n    isPressed\n  } = useIsPressed();\n  const {\n    focusProps,\n    isFocused\n  } = useFocus();\n  const {\n    isFocusVisible,\n    focusProps: focusRingProps\n  } = useFocusRing();\n  const {\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    _text,\n    _stack,\n    _spinner,\n    isLoadingText,\n    _icon,\n    ...resolvedProps\n  } = usePropsResolution('Button', props, {\n    isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isPressed: isPressedProp || isPressed,\n    isLoading,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible\n  }); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (leftIcon) {\n    startIcon = leftIcon;\n  }\n\n  if (rightIcon) {\n    endIcon = rightIcon;\n  }\n\n  if (endIcon && /*#__PURE__*/React.isValidElement(endIcon)) {\n    endIcon = React.Children.map(endIcon, (child, index) => {\n      return /*#__PURE__*/React.cloneElement(child, {\n        key: \"button-end-icon-\".concat(index),\n        ..._icon,\n        ...child.props\n      });\n    });\n  }\n\n  if (startIcon && /*#__PURE__*/React.isValidElement(startIcon)) {\n    startIcon = React.Children.map(startIcon, (child, index) => {\n      return /*#__PURE__*/React.cloneElement(child, {\n        key: \"button-start-icon-\".concat(index),\n        ..._icon,\n        ...child.props\n      });\n    });\n  }\n\n  const spinnerElement = spinner ? spinner : /*#__PURE__*/React.createElement(Spinner, _extends({\n    color: _text === null || _text === void 0 ? void 0 : _text.color\n  }, _spinner));\n\n  const boxChildren = child => {\n    return child ? /*#__PURE__*/React.createElement(Box, {\n      _text: _text\n    }, child) : null;\n  };\n\n  return /*#__PURE__*/React.createElement(Pressable, _extends({\n    disabled: isDisabled || isLoading,\n    ref: ref,\n    onPressIn: composeEventHandlers(onPressIn, pressableProps.onPressIn),\n    onPressOut: composeEventHandlers(onPressOut, pressableProps.onPressOut) // @ts-ignore - web only\n    ,\n    onHoverIn: composeEventHandlers(onHoverIn, hoverProps.onHoverIn) // @ts-ignore - web only\n    ,\n    onHoverOut: composeEventHandlers(onHoverOut, hoverProps.onHoverOut) // @ts-ignore - web only\n    ,\n    onFocus: composeEventHandlers(composeEventHandlers(onFocus, focusProps.onFocus), focusRingProps.onFocus) // @ts-ignore - web only\n    ,\n    onBlur: composeEventHandlers(composeEventHandlers(onBlur, focusProps.onBlur), focusRingProps.onBlur)\n  }, resolvedProps, {\n    accessibilityRole: (_props$accessibilityR = props.accessibilityRole) !== null && _props$accessibilityR !== void 0 ? _props$accessibilityR : 'button'\n  }), /*#__PURE__*/React.createElement(HStack, _extends({}, _stack, {\n    test: true\n  }), startIcon && !isLoading ? startIcon : null, isLoading && spinnerPlacement === 'start' ? spinnerElement : null, isLoading ? isLoadingText ? boxChildren(isLoadingText) : null : boxChildren(children), endIcon && !isLoading ? endIcon : null, isLoading && spinnerPlacement === 'end' ? spinnerElement : null));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Button));","map":{"version":3,"mappings":"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","names":["React","memo","forwardRef","Spinner","usePropsResolution","default","Box","HStack","Pressable","composeEventHandlers","useHover","useFocus","useIsPressed","useFocusRing","useHasResponsiveProps","Button","ref","children","startIcon","rightIcon","leftIcon","endIcon","spinner","isDisabled","isLoading","isHovered","isHoveredProp","isPressed","isPressedProp","isFocused","isFocusedProp","isFocusVisible","isFocusVisibleProp","spinnerPlacement","props","hoverProps","pressableProps","focusProps","focusRingProps","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","_text","_stack","_spinner","isLoadingText","_icon","resolvedProps","isValidElement","Children","map","child","index","cloneElement","key","spinnerElement","color","boxChildren","disabled","accessibilityRole","test"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Button/Button.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Spinner from '../Spinner';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { default as Box, IBoxProps } from '../Box';\nimport HStack from '../Stack/HStack';\nimport { Pressable } from '../Pressable';\nimport type { IButtonProps } from './types';\nimport { composeEventHandlers } from '../../../utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Button = (\n  {\n    //@ts-ignore\n    children,\n    startIcon,\n    rightIcon,\n    leftIcon,\n    endIcon,\n    spinner,\n    isDisabled,\n    isLoading,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    spinnerPlacement = 'start',\n    ...props\n  }: IButtonProps & IBoxProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    _text,\n    _stack,\n    _spinner,\n    isLoadingText,\n    _icon,\n    ...resolvedProps\n  } = usePropsResolution('Button', props, {\n    isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isPressed: isPressedProp || isPressed,\n    isLoading,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (leftIcon) {\n    startIcon = leftIcon;\n  }\n  if (rightIcon) {\n    endIcon = rightIcon;\n  }\n  if (endIcon && React.isValidElement(endIcon)) {\n    endIcon = React.Children.map(\n      endIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-end-icon-${index}`,\n          ..._icon,\n          ...child.props,\n        });\n      }\n    );\n  }\n  if (startIcon && React.isValidElement(startIcon)) {\n    startIcon = React.Children.map(\n      startIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-start-icon-${index}`,\n          ..._icon,\n          ...child.props,\n        });\n      }\n    );\n  }\n\n  const spinnerElement = spinner ? (\n    spinner\n  ) : (\n    <Spinner color={_text?.color} {..._spinner} />\n  );\n\n  const boxChildren = (child: any) => {\n    return child ? <Box _text={_text}>{child}</Box> : null;\n  };\n\n  return (\n    <Pressable\n      disabled={isDisabled || isLoading}\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n      accessibilityRole={props.accessibilityRole ?? 'button'}\n    >\n      <HStack {..._stack} test={true}>\n        {startIcon && !isLoading ? startIcon : null}\n        {isLoading && spinnerPlacement === 'start' ? spinnerElement : null}\n        {isLoading\n          ? isLoadingText\n            ? boxChildren(isLoadingText)\n            : null\n          : boxChildren(children)}\n\n        {endIcon && !isLoading ? endIcon : null}\n        {isLoading && spinnerPlacement === 'end' ? spinnerElement : null}\n      </HStack>\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Button));\n"]},"metadata":{},"sourceType":"module"}