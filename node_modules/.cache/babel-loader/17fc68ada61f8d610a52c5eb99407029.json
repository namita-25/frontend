{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport { Platform } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport { SelectContext } from './Select';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nexport const Item = (_ref, ref) => {\n  let {\n    isDisabled,\n    label,\n    value,\n    ...props\n  } = _ref;\n  const {\n    onValueChange,\n    selectedValue,\n    _selectedItem,\n    _item\n  } = React.useContext(SelectContext); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps({ ...props,\n    isDisabled,\n    label,\n    value\n  })) {\n    return null;\n  }\n\n  if (Platform.OS !== 'web') {\n    const isSelected = selectedValue === value;\n    return /*#__PURE__*/React.createElement(Actionsheet.Item, _extends({\n      ref: ref,\n      onPress: () => {\n        if (!isDisabled) {\n          onValueChange(value);\n        }\n      },\n      accessibilityState: {\n        selected: isSelected\n      }\n    }, _item, isSelected && _selectedItem, props), label);\n  } else {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      ref: ref,\n      value: value,\n      disabled: isDisabled\n    }, label);\n  }\n};\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Item));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,IAA5B,QAAwC,OAAxC;AAEA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,OAAO,MAAMC,IAAI,GAAG,OAElBC,GAFkB,KAGf;EAAA,IAFH;IAAEC,UAAF;IAAcC,KAAd;IAAqBC,KAArB;IAA4B,GAAGC;EAA/B,CAEG;EACH,MAAM;IACJC,aADI;IAEJC,aAFI;IAGJC,aAHI;IAIJC;EAJI,IAKFhB,KAAK,CAACiB,UAANjB,CAAiBK,aAAjBL,CALJ,CADG,CAOH;;EACA,IAAIM,qBAAqB,CAAC,EAAE,GAAGM,KAAL;IAAYH,UAAZ;IAAwBC,KAAxB;IAA+BC;EAA/B,CAAD,CAAzB,EAAmE;IACjE,OAAO,IAAP;EACD;;EACD,IAAIR,QAAQ,CAACe,EAATf,KAAgB,KAApB,EAA2B;IACzB,MAAMgB,UAAU,GAAGL,aAAa,KAAKH,KAArC;IAEA,oBACEX,oBAACI,WAAD,CAAaG,IAAb;MACEC,GAAG,EAAEA,GADP;MAEEY,OAAO,EAAE,MAAM;QACb,IAAI,CAACX,UAAL,EAAiB;UACfI,aAAa,CAACF,KAAD,CAAbE;QACD;MALL;MAOEQ,kBAAkB,EAAE;QAAEC,QAAQ,EAAEH;MAAZ;IAPtB,GAQMH,KARN,EASOG,UAAU,IAAIJ,aATrB,EAUMH,KAVN,GAYGF,KAZH,CADF;EAHF,OAmBO;IACL,oBACEV;MAAQQ,GAAG,EAAEA,GAAb;MAAkBG,KAAK,EAAEA,KAAzB;MAAgCY,QAAQ,EAAEd;IAA1C,GACGC,KADH,CADF;EAKD;AAvCI;AA0CP,4BAAeR,IAAI,eAACD,UAAU,CAACM,IAAD,CAAX,CAAnB","names":["React","forwardRef","memo","Platform","Actionsheet","SelectContext","useHasResponsiveProps","Item","ref","isDisabled","label","value","props","onValueChange","selectedValue","_selectedItem","_item","useContext","OS","isSelected","onPress","accessibilityState","selected","disabled"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Select/SelectItem.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport type { ISelectItemProps } from './types';\nimport { Platform } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport { SelectContext } from './Select';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const Item = (\n  { isDisabled, label, value, ...props }: ISelectItemProps,\n  ref?: any\n) => {\n  const {\n    onValueChange,\n    selectedValue,\n    _selectedItem,\n    _item,\n  } = React.useContext(SelectContext);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, isDisabled, label, value })) {\n    return null;\n  }\n  if (Platform.OS !== 'web') {\n    const isSelected = selectedValue === value;\n\n    return (\n      <Actionsheet.Item\n        ref={ref}\n        onPress={() => {\n          if (!isDisabled) {\n            onValueChange(value);\n          }\n        }}\n        accessibilityState={{ selected: isSelected }}\n        {..._item}\n        {...(isSelected && _selectedItem)}\n        {...props}\n      >\n        {label}\n      </Actionsheet.Item>\n    );\n  } else {\n    return (\n      <option ref={ref} value={value} disabled={isDisabled}>\n        {label}\n      </option>\n    );\n  }\n};\n\nexport default memo(forwardRef(Item));\n"]},"metadata":{},"sourceType":"module"}