{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from '../../primitives/Box';\nimport { useFormControlProvider, FormControlContext } from './useFormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst FormControl = (props, ref) => {\n  const {\n    htmlProps,\n    ...context\n  } = useFormControlProvider(props);\n  const resolvedProps = usePropsResolution('FormControl', props, {\n    isDisabled: context.isDisabled,\n    isReadOnly: context.isReadOnly,\n    isInvalid: context.isInvalid // isRequired: context.isRequired,\n\n  }); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(FormControlContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(Box, _extends({}, resolvedProps, htmlProps, {\n    ref: ref\n  })));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(FormControl));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AAEA,SAASC,sBAAT,EAAiCC,kBAAjC,QAA2D,kBAA3D;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAA2BC,GAA3B,KAAwC;EAC1D,MAAM;IAAEC,SAAF;IAAa,GAAGC;EAAhB,IAA4BP,sBAAsB,CAACI,KAAD,CAAxD;EACA,MAAMI,aAAa,GAAGV,kBAAkB,CAAC,aAAD,EAAgBM,KAAhB,EAAuB;IAC7DK,UAAU,EAAEF,OAAO,CAACE,UADyC;IAE7DC,UAAU,EAAEH,OAAO,CAACG,UAFyC;IAG7DC,SAAS,EAAEJ,OAAO,CAACI,SAH0C,CAI7D;;EAJ6D,CAAvB,CAAxC,CAF0D,CAQ1D;;EACA,IAAIT,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBACET,oBAACM,kBAAD,CAAoBW,QAApB;IAA6BC,KAAK,EAAEN;EAApC,gBACEZ,oBAACI,GAAD,eAASS,aAAT,EAA4BF,SAA5B;IAAuCD,GAAG,EAAEA;EAA5C,GADF,CADF;AAZF;;AAmBA,4BAAeT,IAAI,eAACC,UAAU,CAACM,WAAD,CAAX,CAAnB","names":["React","memo","forwardRef","usePropsResolution","Box","useFormControlProvider","FormControlContext","useHasResponsiveProps","FormControl","props","ref","htmlProps","context","resolvedProps","isDisabled","isReadOnly","isInvalid","Provider","value"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/FormControl/FormControl.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from '../../primitives/Box';\nimport type { IFormControlProps } from './types';\nimport { useFormControlProvider, FormControlContext } from './useFormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst FormControl = (props: IFormControlProps, ref: any) => {\n  const { htmlProps, ...context } = useFormControlProvider(props);\n  const resolvedProps = usePropsResolution('FormControl', props, {\n    isDisabled: context.isDisabled,\n    isReadOnly: context.isReadOnly,\n    isInvalid: context.isInvalid,\n    // isRequired: context.isRequired,\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <FormControlContext.Provider value={context}>\n      <Box {...resolvedProps} {...htmlProps} ref={ref} />\n    </FormControlContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(FormControl));\n"]},"metadata":{},"sourceType":"module"}