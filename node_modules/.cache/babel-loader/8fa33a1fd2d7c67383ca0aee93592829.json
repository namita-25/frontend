{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFormControlContext } from './useFormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlHelperText = (props, ref) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const resolvedProps = usePropsResolution('FormControlHelperText', combinedProps, {\n    isDisabled: combinedProps.isDisabled,\n    isReadOnly: combinedProps.isReadOnly,\n    isInvalid: combinedProps.isInvalid // isRequired: combinedProps.isRequired,\n\n  });\n  React.useEffect(() => {\n    resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.setHasHelpText(true);\n    return () => {\n      resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.setHasHelpText(false);\n    };\n  }); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, _extends({}, resolvedProps, {\n    nativeID: resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.feedbackId,\n    ref: ref\n  }));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(FormControlHelperText));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,qBAAT,QAAsC,kBAAtC;AAEA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,sBAAT,QAAuC,gBAAvC;;AAEA,MAAMC,qBAAqB,GAAG,CAC5BC,KAD4B,EAE5BC,GAF4B,KAGzB;EACH,MAAMC,kBAAkB,GAAGN,qBAAqB,EAAhD;EACA,MAAMO,aAAa,GAAGL,sBAAsB,CAACI,kBAAD,EAAqBF,KAArB,CAA5C;EACA,MAAMI,aAAa,GAAGT,kBAAkB,CACtC,uBADsC,EAEtCQ,aAFsC,EAGtC;IACEE,UAAU,EAAEF,aAAa,CAACE,UAD5B;IAEEC,UAAU,EAAEH,aAAa,CAACG,UAF5B;IAGEC,SAAS,EAAEJ,aAAa,CAACI,SAH3B,CAIE;;EAJF,CAHsC,CAAxC;EAWAhB,KAAK,CAACiB,SAANjB,CAAgB,MAAM;IACpBa,aAAa,SAAbA,iBAAa,WAAbA,yBAAa,CAAEK,cAAfL,CAA8B,IAA9BA;IACA,OAAO,MAAM;MACXA,aAAa,SAAbA,iBAAa,WAAbA,yBAAa,CAAEK,cAAfL,CAA8B,KAA9BA;IADF;EAFF,GAdG,CAoBH;;EACA,IAAIP,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EAED,oBACET,oBAACG,GAAD,eAASU,aAAT;IAAwBM,QAAQ,EAAEN,aAAF,SAAEA,iBAAF,WAAEA,GAAF,MAAEA,gBAAa,CAAEO,UAAjD;IAA6DV,GAAG,EAAEA;EAAlE,GADF;AA5BF;;AAiCA,4BAAeT,IAAI,eAACC,UAAU,CAACM,qBAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Box","usePropsResolution","useFormControlContext","useHasResponsiveProps","combineContextAndProps","FormControlHelperText","props","ref","formControlContext","combinedProps","resolvedProps","isDisabled","isReadOnly","isInvalid","useEffect","setHasHelpText","nativeID","feedbackId"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/FormControl/FormControlHelperText.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFormControlContext } from './useFormControl';\nimport type { IFormControlHelperTextProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlHelperText = (\n  props: IFormControlHelperTextProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const resolvedProps = usePropsResolution(\n    'FormControlHelperText',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  React.useEffect(() => {\n    resolvedProps?.setHasHelpText(true);\n    return () => {\n      resolvedProps?.setHasHelpText(false);\n    };\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box {...resolvedProps} nativeID={resolvedProps?.feedbackId} ref={ref} />\n  );\n};\n\nexport default memo(forwardRef(FormControlHelperText));\n"]},"metadata":{},"sourceType":"module"}