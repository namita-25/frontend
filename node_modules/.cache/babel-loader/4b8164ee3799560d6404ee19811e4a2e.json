{"ast":null,"code":"import React from 'react';\nexport function useControllableProp(prop, state) {\n  const {\n    current: isControlled\n  } = React.useRef(prop !== undefined);\n  const value = isControlled && typeof prop !== 'undefined' ? prop : state;\n  return [isControlled, value];\n}\n/**\n * React hook for using controlling component state.\n * @param props\n */\n\nexport function useControllableState(props) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange\n  } = props;\n  const [valueState, setValue] = React.useState(defaultValue);\n  const isControlled = valueProp !== undefined;\n  const value = isControlled ? valueProp : valueState;\n  const updateValue = React.useCallback(next => {\n    const nextValue = typeof next === 'function' ? next(value) : next;\n\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n\n    onChange && onChange(nextValue);\n  }, [isControlled, onChange, value]);\n  return [value, updateValue];\n}","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,mBAAT,CAAgCC,IAAhC,EAAqDC,KAArD,EAA+D;EACpE,MAAM;IAAEC,OAAO,EAAEC;EAAX,IAA4BL,KAAK,CAACM,MAANN,CAAaE,IAAI,KAAKK,SAAtBP,CAAlC;EACA,MAAMQ,KAAK,GAAGH,YAAY,IAAI,OAAOH,IAAP,KAAgB,WAAhCG,GAA8CH,IAA9CG,GAAqDF,KAAnE;EACA,OAAO,CAACE,YAAD,EAAeG,KAAf,CAAP;AACD;AAqBD;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,CAAiCC,KAAjC,EAAsE;EAC3E,MAAM;IAAEF,KAAK,EAAEG,SAAT;IAAoBC,YAApB;IAAkCC;EAAlC,IAA+CH,KAArD;EAEA,MAAM,CAACI,UAAD,EAAaC,QAAb,IAAyBf,KAAK,CAACgB,QAANhB,CAAeY,YAAfZ,CAA/B;EACA,MAAMK,YAAY,GAAGM,SAAS,KAAKJ,SAAnC;EAEA,MAAMC,KAAK,GAAGH,YAAY,GAAIM,SAAJ,GAAsBG,UAAhD;EAEA,MAAMG,WAAW,GAAGjB,KAAK,CAACkB,WAANlB,CACjBmB,IAAD,IAAe;IACb,MAAMC,SAAS,GAAG,OAAOD,IAAP,KAAgB,UAAhB,GAA6BA,IAAI,CAACX,KAAD,CAAjC,GAA2CW,IAA7D;;IACA,IAAI,CAACd,YAAL,EAAmB;MACjBU,QAAQ,CAACK,SAAD,CAARL;IACD;;IACDF,QAAQ,IAAIA,QAAQ,CAACO,SAAD,CAApBP;EANgB,GAQlB,CAACR,YAAD,EAAeQ,QAAf,EAAyBL,KAAzB,CARkBR,CAApB;EAWA,OAAO,CAACQ,KAAD,EAAQS,WAAR,CAAP;AACD","names":["React","useControllableProp","prop","state","current","isControlled","useRef","undefined","value","useControllableState","props","valueProp","defaultValue","onChange","valueState","setValue","useState","updateValue","useCallback","next","nextValue"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/hooks/useControllableProp.ts"],"sourcesContent":["import React from 'react';\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const { current: isControlled } = React.useRef(prop !== undefined);\n  const value = isControlled && typeof prop !== 'undefined' ? prop : state;\n  return [isControlled, value] as const;\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T;\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T);\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void;\n  /**\n   * The component name (for warnings)\n   */\n  name?: string;\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const { value: valueProp, defaultValue, onChange } = props;\n\n  const [valueState, setValue] = React.useState(defaultValue as T);\n  const isControlled = valueProp !== undefined;\n\n  const value = isControlled ? (valueProp as T) : valueState;\n\n  const updateValue = React.useCallback(\n    (next: any) => {\n      const nextValue = typeof next === 'function' ? next(value) : next;\n      if (!isControlled) {\n        setValue(nextValue);\n      }\n      onChange && onChange(nextValue);\n    },\n    [isControlled, onChange, value]\n  );\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>];\n}\n"]},"metadata":{},"sourceType":"module"}