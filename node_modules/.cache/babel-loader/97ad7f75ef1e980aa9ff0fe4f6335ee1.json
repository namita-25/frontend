{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks';\nimport { Stack } from '../../primitives/Stack';\nimport Skeleton from './Skeleton';\n\nconst SkeletonText = (props, ref) => {\n  // const { children, ...props } = allProps;\n  const {\n    children,\n    startColor,\n    endColor,\n    lines,\n    isLoaded,\n    _line,\n    ...resolvedProps\n  } = usePropsResolution('SkeletonText', props);\n  const computedChildren = []; //generating an array of skeleton components (same length as noOfLines)\n\n  for (let i = 0; i < lines; i++) {\n    //check for last line (to change the width of last line)\n    if (i === lines - 1 && lines !== 1) {\n      computedChildren.push(\n      /*#__PURE__*/\n      //Using Skeleton component with required props\n      React.createElement(Skeleton, _extends({\n        key: i,\n        endColor: endColor,\n        startColor: startColor,\n        w: \"75%\"\n      }, _line)));\n    } else computedChildren.push( /*#__PURE__*/React.createElement(Skeleton, _extends({\n      key: i,\n      endColor: endColor,\n      startColor: startColor\n    }, _line)));\n  }\n\n  return isLoaded ? children : /*#__PURE__*/React.createElement(Stack, _extends({}, resolvedProps, {\n    ref: ref\n  }), computedChildren);\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(SkeletonText));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,KAAT,QAAsB,wBAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAGA,MAAMC,YAAY,GAAG,CAEnBC,KAFmB,EAGnBC,GAHmB,KAIhB;EACH;EACA,MAAM;IACJC,QADI;IAEJC,UAFI;IAGJC,QAHI;IAIJC,KAJI;IAKJC,QALI;IAMJC,KANI;IAOJ,GAAGC;EAPC,IAQFZ,kBAAkB,CAAC,cAAD,EAAiBI,KAAjB,CARtB;EAUA,MAAMS,gBAAgB,GAAG,EAAzB,CAZG,CAaH;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAApB,EAA2BK,CAAC,EAA5B,EAAgC;IAC9B;IACA,IAAIA,CAAC,KAAKL,KAAK,GAAG,CAAdK,IAAmBL,KAAK,KAAK,CAAjC,EAAoC;MAClCI,gBAAgB,CAACE,IAAjBF;MAAA;MACE;MACAhB,oBAACK,QAAD;QACEc,GAAG,EAAEF,CADP;QAEEN,QAAQ,EAAEA,QAFZ;QAGED,UAAU,EAAEA,UAHd;QAIEU,CAAC,EAAC;MAJJ,GAKMN,KALN,EAFFE;IADF,OAYEA,gBAAgB,CAACE,IAAjBF,eACEhB,oBAACK,QAAD;MACEc,GAAG,EAAEF,CADP;MAEEN,QAAQ,EAAEA,QAFZ;MAGED,UAAU,EAAEA;IAHd,GAIMI,KAJN,EADFE;EAQH;;EACD,OAAOH,QAAQ,GACbJ,QADa,gBAGbT,oBAACI,KAAD,eAAWW,aAAX;IAA0BP,GAAG,EAAEA;EAA/B,IACGQ,gBADH,CAHF;AAzCF;;AAkDA,4BAAef,IAAI,eAACC,UAAU,CAACI,YAAD,CAAX,CAAnB","names":["React","memo","forwardRef","usePropsResolution","Stack","Skeleton","SkeletonText","props","ref","children","startColor","endColor","lines","isLoaded","_line","resolvedProps","computedChildren","i","push","key","w"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Skeleton/SkeletonText.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks';\nimport { Stack } from '../../primitives/Stack';\nimport Skeleton from './Skeleton';\nimport type { ISkeletonTextProps } from './types';\n\nconst SkeletonText = (\n  //@ts-ignore\n  props: ISkeletonTextProps,\n  ref: any\n) => {\n  // const { children, ...props } = allProps;\n  const {\n    children,\n    startColor,\n    endColor,\n    lines,\n    isLoaded,\n    _line,\n    ...resolvedProps\n  } = usePropsResolution('SkeletonText', props);\n\n  const computedChildren = [];\n  //generating an array of skeleton components (same length as noOfLines)\n  for (let i = 0; i < lines; i++) {\n    //check for last line (to change the width of last line)\n    if (i === lines - 1 && lines !== 1) {\n      computedChildren.push(\n        //Using Skeleton component with required props\n        <Skeleton\n          key={i}\n          endColor={endColor}\n          startColor={startColor}\n          w=\"75%\"\n          {..._line}\n        />\n      );\n    } else\n      computedChildren.push(\n        <Skeleton\n          key={i}\n          endColor={endColor}\n          startColor={startColor}\n          {..._line}\n        />\n      );\n  }\n  return isLoaded ? (\n    children\n  ) : (\n    <Stack {...resolvedProps} ref={ref}>\n      {computedChildren}\n    </Stack>\n  );\n};\n\nexport default memo(forwardRef(SkeletonText));\n"]},"metadata":{},"sourceType":"module"}