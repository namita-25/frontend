{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { HStack } from '../../primitives/Stack';\nimport { useThemeProps } from '../../../hooks';\nimport { useFormControlContext } from '../FormControl';\nimport { Platform } from 'react-native';\nimport { PinInputContext } from './Context';\nimport { themeTools } from '../../../theme';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst PinInput = (_ref, ref) => {\n  let {\n    children,\n    ...props\n  } = _ref;\n  let [padding, remProps] = themeTools.extractInObject(props, ['p', 'px', 'py', 'pt', 'pb', 'pl', 'pr']);\n  const {\n    manageFocus,\n    defaultValue,\n    value,\n    space,\n    onChange,\n    ...newProps\n  } = useThemeProps('PinInput', remProps);\n  const formControlContext = useFormControlContext();\n  const RefList = [];\n\n  const setRefList = (ref, index) => {\n    RefList[index] = ref;\n  };\n\n  const [pinInputValue, setPinInputValue] = React.useState(value || defaultValue);\n\n  const handleChange = (newValue, fieldIndex) => {\n    let temp = pinInputValue && [...pinInputValue] || [];\n    temp[fieldIndex] = newValue;\n    value === undefined && setPinInputValue(temp.join(''));\n    onChange && onChange(temp.join(''));\n    if (newValue === '' && manageFocus && fieldIndex - 1 > -1) RefList[fieldIndex - 1].current.focus();else if (newValue && manageFocus && fieldIndex + 1 < RefList.length) RefList[fieldIndex + 1].current.focus();\n    return temp.join('');\n  };\n\n  const handleMultiValueChange = (newValue, fieldIndex) => {\n    const pinFieldLength = RefList.length;\n    const newValueLength = newValue.length;\n\n    if (newValueLength >= pinFieldLength && newValueLength > 2) {\n      let splicedValue = newValue ? [...newValue] : [];\n      splicedValue.splice(pinFieldLength);\n      RefList[pinFieldLength - 1].current.focus();\n      setPinInputValue(splicedValue.join(''));\n      onChange && onChange(splicedValue.join(''));\n    }\n\n    if (Platform.OS !== 'ios') {\n      let temp = pinInputValue ? [...pinInputValue] : [];\n\n      if (newValue === '') {\n        // Handling Backward focus.\n        temp = temp.filter((_n, i) => i !== fieldIndex);\n        if (manageFocus && fieldIndex - 1 > -1) RefList[fieldIndex - 1].current.focus();\n      } else {\n        temp[fieldIndex] = JSON.stringify(parseInt(newValue, 10) % 10);\n        if (manageFocus && fieldIndex + 1 < RefList.length) RefList[fieldIndex + 1].current.focus();\n      }\n\n      value === undefined && setPinInputValue(temp.join(''));\n      onChange && onChange(temp.join(''));\n    }\n  };\n\n  const indexSetter = allChildren => {\n    let pinInputFiledCounter = -1;\n    return React.Children.map(allChildren, child => {\n      pinInputFiledCounter++;\n      return /*#__PURE__*/React.cloneElement(child, {\n        fieldIndex: pinInputFiledCounter\n      }, child.props.children);\n    });\n  };\n\n  React.useEffect(() => {\n    if (value !== undefined && value != pinInputValue) setPinInputValue(value);\n  }, [value, pinInputValue, setPinInputValue]); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(PinInputContext.Provider, {\n    value: { ...formControlContext,\n      ...newProps,\n      setRefList,\n      handleChange,\n      handleMultiValueChange,\n      value: pinInputValue\n    }\n  }, children && /*#__PURE__*/React.createElement(HStack, _extends({\n    flexDirection: \"row\",\n    space: space\n  }, padding, {\n    ref: ref\n  }), indexSetter(children)));\n};\n\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(PinInput));","map":{"version":3,"mappings":"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","names":["React","HStack","useThemeProps","useFormControlContext","Platform","PinInputContext","themeTools","useHasResponsiveProps","PinInput","ref","children","props","padding","remProps","extractInObject","manageFocus","defaultValue","value","space","onChange","newProps","formControlContext","RefList","setRefList","index","pinInputValue","setPinInputValue","useState","handleChange","newValue","fieldIndex","temp","undefined","join","current","focus","length","handleMultiValueChange","pinFieldLength","newValueLength","splicedValue","splice","OS","filter","_n","i","JSON","stringify","parseInt","indexSetter","allChildren","pinInputFiledCounter","Children","map","child","cloneElement","useEffect","Provider","flexDirection","memo","forwardRef"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/PinInput/PinInput.tsx"],"sourcesContent":["import React from 'react';\nimport { HStack } from '../../primitives/Stack';\nimport { useThemeProps } from '../../../hooks';\nimport type { IPinInputProps } from './types';\nimport { useFormControlContext } from '../FormControl';\nimport { Platform } from 'react-native';\nimport { PinInputContext } from './Context';\nimport { themeTools } from '../../../theme';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst PinInput = ({ children, ...props }: IPinInputProps, ref?: any) => {\n  let [padding, remProps] = themeTools.extractInObject(props, [\n    'p',\n    'px',\n    'py',\n    'pt',\n    'pb',\n    'pl',\n    'pr',\n  ]);\n  const {\n    manageFocus,\n    defaultValue,\n    value,\n    space,\n    onChange,\n    ...newProps\n  } = useThemeProps('PinInput', remProps);\n  const formControlContext = useFormControlContext();\n\n  const RefList: Array<any> = [];\n  const setRefList = (ref: any, index: number) => {\n    RefList[index] = ref;\n  };\n  const [pinInputValue, setPinInputValue] = React.useState(\n    value || defaultValue\n  );\n\n  const handleChange = (newValue: string, fieldIndex: number) => {\n    let temp = (pinInputValue && [...pinInputValue]) || [];\n    temp[fieldIndex] = newValue;\n    value === undefined && setPinInputValue(temp.join(''));\n    onChange && onChange(temp.join(''));\n    if (newValue === '' && manageFocus && fieldIndex - 1 > -1)\n      RefList[fieldIndex - 1].current.focus();\n    else if (newValue && manageFocus && fieldIndex + 1 < RefList.length)\n      RefList[fieldIndex + 1].current.focus();\n    return temp.join('');\n  };\n  const handleMultiValueChange = (newValue: string, fieldIndex: number) => {\n    const pinFieldLength = RefList.length;\n    const newValueLength = newValue.length;\n    if (newValueLength >= pinFieldLength && newValueLength > 2) {\n      let splicedValue = newValue ? [...newValue] : [];\n      splicedValue.splice(pinFieldLength);\n      RefList[pinFieldLength - 1].current.focus();\n      setPinInputValue(splicedValue.join(''));\n      onChange && onChange(splicedValue.join(''));\n    }\n\n    if (Platform.OS !== 'ios') {\n      let temp = pinInputValue ? [...pinInputValue] : [];\n      if (newValue === '') {\n        // Handling Backward focus.\n        temp = temp.filter((_n, i) => i !== fieldIndex);\n        if (manageFocus && fieldIndex - 1 > -1)\n          RefList[fieldIndex - 1].current.focus();\n      } else {\n        temp[fieldIndex] = JSON.stringify(parseInt(newValue, 10) % 10);\n        if (manageFocus && fieldIndex + 1 < RefList.length)\n          RefList[fieldIndex + 1].current.focus();\n      }\n      value === undefined && setPinInputValue(temp.join(''));\n      onChange && onChange(temp.join(''));\n    }\n  };\n\n  const indexSetter = (allChildren: JSX.Element | JSX.Element[]) => {\n    let pinInputFiledCounter = -1;\n    return React.Children.map(allChildren, (child: JSX.Element) => {\n      pinInputFiledCounter++;\n      return React.cloneElement(\n        child,\n        {\n          fieldIndex: pinInputFiledCounter,\n        },\n        child.props.children\n      );\n    });\n  };\n\n  React.useEffect(() => {\n    if (value !== undefined && value != pinInputValue) setPinInputValue(value);\n  }, [value, pinInputValue, setPinInputValue]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <PinInputContext.Provider\n      value={{\n        ...formControlContext,\n        ...newProps,\n        setRefList,\n        handleChange,\n        handleMultiValueChange,\n        value: pinInputValue,\n      }}\n    >\n      {children && (\n        <HStack flexDirection=\"row\" space={space} {...padding} ref={ref}>\n          {indexSetter(children)}\n        </HStack>\n      )}\n    </PinInputContext.Provider>\n  );\n};\n\nexport default React.memo(React.forwardRef(PinInput));\n"]},"metadata":{},"sourceType":"module"}