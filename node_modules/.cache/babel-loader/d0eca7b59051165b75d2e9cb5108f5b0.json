{"ast":null,"code":"/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport { disableTextSelection, restoreTextSelection } from './textSelection';\nimport { useMemo, useRef } from 'react';\nimport { useGlobalListeners } from '@react-aria/utils';\n/**\n * Handles move interactions across mouse, touch, and keyboard, including dragging with\n * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and\n * platforms, and ignores emulated mouse events on touch devices.\n */\n\nexport function useMove(props) {\n  let {\n    onMoveStart,\n    onMove,\n    onMoveEnd\n  } = props;\n  let state = useRef({\n    didMove: false,\n    lastPosition: null,\n    id: null\n  });\n  let {\n    addGlobalListener,\n    removeGlobalListener\n  } = useGlobalListeners();\n  let moveProps = useMemo(() => {\n    let moveProps = {};\n\n    let start = () => {\n      disableTextSelection();\n      state.current.didMove = false;\n    };\n\n    let move = (pointerType, deltaX, deltaY) => {\n      if (deltaX === 0 && deltaY === 0) {\n        return;\n      }\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n          type: 'movestart',\n          pointerType\n        });\n      }\n\n      onMove({\n        type: 'move',\n        pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY\n      });\n    };\n\n    let end = pointerType => {\n      restoreTextSelection();\n\n      if (state.current.didMove) {\n        onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n          type: 'moveend',\n          pointerType\n        });\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      let onMouseMove = e => {\n        if (e.button === 0) {\n          move('mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n\n      let onMouseUp = e => {\n        if (e.button === 0) {\n          end('mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      moveProps.onMouseDown = e => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = e => {\n        // @ts-ignore\n        let touch = [...e.changedTouches].findIndex(_ref => {\n          let {\n            identifier\n          } = _ref;\n          return identifier === state.current.id;\n        });\n\n        if (touch >= 0) {\n          let {\n            pageX,\n            pageY\n          } = e.changedTouches[touch];\n          move('touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX,\n            pageY\n          };\n        }\n      };\n\n      let onTouchEnd = e => {\n        // @ts-ignore\n        let touch = [...e.changedTouches].findIndex(_ref2 => {\n          let {\n            identifier\n          } = _ref2;\n          return identifier === state.current.id;\n        });\n\n        if (touch >= 0) {\n          end('touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n\n      moveProps.onTouchStart = e => {\n        if (e.changedTouches.length === 0 || state.current.id != null) {\n          return;\n        }\n\n        let {\n          pageX,\n          pageY,\n          identifier\n        } = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {\n          pageX,\n          pageY\n        };\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    }\n\n    let triggerKeyboardMove = (deltaX, deltaY) => {\n      start();\n      move('keyboard', deltaX, deltaY);\n      end('keyboard');\n    };\n\n    moveProps.onKeyDown = e => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(-1, 0);\n          break;\n\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(1, 0);\n          break;\n\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(0, -1);\n          break;\n\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n  return {\n    moveProps\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,oBAAT,EAA+BC,oBAA/B,QAA2D,iBAA3D;AAEA,SAAgCC,OAAhC,EAAyCC,MAAzC,QAAuD,OAAvD;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AAOA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAAgD;EACrD,IAAI;IAAEC,WAAF;IAAeC,MAAf;IAAuBC;EAAvB,IAAqCH,KAAzC;EAEA,IAAII,KAAK,GAAGP,MAAM,CAIf;IAAEQ,OAAO,EAAE,KAAX;IAAkBC,YAAY,EAAE,IAAhC;IAAsCC,EAAE,EAAE;EAA1C,CAJe,CAAlB;EAMA,IAAI;IAAEC,iBAAF;IAAqBC;EAArB,IAA8CX,kBAAkB,EAApE;EAEA,IAAIY,SAAS,GAAGd,OAAO,CAAC,MAAM;IAC5B,IAAIc,SAAsC,GAAG,EAA7C;;IAEA,IAAIC,KAAK,GAAG,MAAM;MAChBjB,oBAAoB;MACpBU,KAAK,CAACQ,OAANR,CAAcC,OAAdD,GAAwB,KAAxBA;IAFF;;IAIA,IAAIS,IAAI,GAAG,CAACC,WAAD,EAA2BC,MAA3B,EAA2CC,MAA3C,KAA8D;MACvE,IAAID,MAAM,KAAK,CAAXA,IAAgBC,MAAM,KAAK,CAA/B,EAAkC;QAChC;MACD;;MAED,IAAI,CAACZ,KAAK,CAACQ,OAANR,CAAcC,OAAnB,EAA4B;QAC1BD,KAAK,CAACQ,OAANR,CAAcC,OAAdD,GAAwB,IAAxBA;QACAH,WAAW,SAAXA,eAAW,WAAXA,uBAAW,CAAG;UACZgB,IAAI,EAAE,WADM;UAEZH;QAFY,CAAH,CAAXb;MAID;;MACDC,MAAM,CAAC;QACLe,IAAI,EAAE,MADD;QAELH,WAFK;QAGLC,MAAM,EAAEA,MAHH;QAILC,MAAM,EAAEA;MAJH,CAAD,CAANd;IAZF;;IAmBA,IAAIgB,GAAG,GAAIJ,WAAD,IAA8B;MACtCnB,oBAAoB;;MACpB,IAAIS,KAAK,CAACQ,OAANR,CAAcC,OAAlB,EAA2B;QACzBF,SAAS,SAATA,aAAS,WAATA,qBAAS,CAAG;UACVc,IAAI,EAAE,SADI;UAEVH;QAFU,CAAH,CAATX;MAID;IAPH;;IAUA,IAAI,OAAOgB,YAAP,KAAwB,WAA5B,EAAyC;MACvC,IAAIC,WAAW,GAAIC,CAAD,IAAmB;QACnC,IAAIA,CAAC,CAACC,MAAFD,KAAa,CAAjB,EAAoB;UAClBR,IAAI,CACF,OADE,EAEFQ,CAAC,CAACE,KAAFF,GAAUjB,KAAK,CAACQ,OAANR,CAAcE,YAAdF,CAA2BmB,KAFnC,EAGFF,CAAC,CAACG,KAAFH,GAAUjB,KAAK,CAACQ,OAANR,CAAcE,YAAdF,CAA2BoB,KAHnC,CAAJX;UAKAT,KAAK,CAACQ,OAANR,CAAcE,YAAdF,GAA6B;YAAEmB,KAAK,EAAEF,CAAC,CAACE,KAAX;YAAkBC,KAAK,EAAEH,CAAC,CAACG;UAA3B,CAA7BpB;QACD;MARH;;MAUA,IAAIqB,SAAS,GAAIJ,CAAD,IAAmB;QACjC,IAAIA,CAAC,CAACC,MAAFD,KAAa,CAAjB,EAAoB;UAClBH,GAAG,CAAC,OAAD,CAAHA;UACAT,oBAAoB,CAACiB,MAAD,EAAS,WAAT,EAAsBN,WAAtB,EAAmC,KAAnC,CAApBX;UACAA,oBAAoB,CAACiB,MAAD,EAAS,SAAT,EAAoBD,SAApB,EAA+B,KAA/B,CAApBhB;QACD;MALH;;MAOAC,SAAS,CAACiB,WAAVjB,GAAyBW,CAAD,IAAyB;QAC/C,IAAIA,CAAC,CAACC,MAAFD,KAAa,CAAjB,EAAoB;UAClBV,KAAK;UACLU,CAAC,CAACO,eAAFP;UACAA,CAAC,CAACQ,cAAFR;UACAjB,KAAK,CAACQ,OAANR,CAAcE,YAAdF,GAA6B;YAAEmB,KAAK,EAAEF,CAAC,CAACE,KAAX;YAAkBC,KAAK,EAAEH,CAAC,CAACG;UAA3B,CAA7BpB;UACAI,iBAAiB,CAACkB,MAAD,EAAS,WAAT,EAAsBN,WAAtB,EAAmC,KAAnC,CAAjBZ;UACAA,iBAAiB,CAACkB,MAAD,EAAS,SAAT,EAAoBD,SAApB,EAA+B,KAA/B,CAAjBjB;QACD;MARH;;MAWA,IAAIsB,WAAW,GAAIT,CAAD,IAAmB;QACnC;QACA,IAAIU,KAAK,GAAG,CAAC,GAAGV,CAAC,CAACW,cAAN,EAAsBC,SAAtB,CACV;UAAA,IAAC;YAAEC;UAAF,CAAD;UAAA,OAAoBA,UAAU,KAAK9B,KAAK,CAACQ,OAANR,CAAcG,EAAjD;QAAA,CADU,CAAZ;;QAGA,IAAIwB,KAAK,IAAI,CAAb,EAAgB;UACd,IAAI;YAAER,KAAF;YAASC;UAAT,IAAmBH,CAAC,CAACW,cAAFX,CAAiBU,KAAjBV,CAAvB;UACAR,IAAI,CACF,OADE,EAEFU,KAAK,GAAGnB,KAAK,CAACQ,OAANR,CAAcE,YAAdF,CAA2BmB,KAFjC,EAGFC,KAAK,GAAGpB,KAAK,CAACQ,OAANR,CAAcE,YAAdF,CAA2BoB,KAHjC,CAAJX;UAKAT,KAAK,CAACQ,OAANR,CAAcE,YAAdF,GAA6B;YAAEmB,KAAF;YAASC;UAAT,CAA7BpB;QACD;MAbH;;MAeA,IAAI+B,UAAU,GAAId,CAAD,IAAmB;QAClC;QACA,IAAIU,KAAK,GAAG,CAAC,GAAGV,CAAC,CAACW,cAAN,EAAsBC,SAAtB,CACV;UAAA,IAAC;YAAEC;UAAF,CAAD;UAAA,OAAoBA,UAAU,KAAK9B,KAAK,CAACQ,OAANR,CAAcG,EAAjD;QAAA,CADU,CAAZ;;QAGA,IAAIwB,KAAK,IAAI,CAAb,EAAgB;UACdb,GAAG,CAAC,OAAD,CAAHA;UACAd,KAAK,CAACQ,OAANR,CAAcG,EAAdH,GAAmB,IAAnBA;UACAK,oBAAoB,CAACiB,MAAD,EAAS,WAAT,EAAsBI,WAAtB,CAApBrB;UACAA,oBAAoB,CAACiB,MAAD,EAAS,UAAT,EAAqBS,UAArB,CAApB1B;UACAA,oBAAoB,CAACiB,MAAD,EAAS,aAAT,EAAwBS,UAAxB,CAApB1B;QACD;MAXH;;MAaAC,SAAS,CAAC0B,YAAV1B,GAA0BW,CAAD,IAAyB;QAChD,IAAIA,CAAC,CAACW,cAAFX,CAAiBgB,MAAjBhB,KAA4B,CAA5BA,IAAiCjB,KAAK,CAACQ,OAANR,CAAcG,EAAdH,IAAoB,IAAzD,EAA+D;UAC7D;QACD;;QAED,IAAI;UAAEmB,KAAF;UAASC,KAAT;UAAgBU;QAAhB,IAA+Bb,CAAC,CAACW,cAAFX,CAAiB,CAAjBA,CAAnC;QACAV,KAAK;QACLU,CAAC,CAACO,eAAFP;QACAA,CAAC,CAACQ,cAAFR;QACAjB,KAAK,CAACQ,OAANR,CAAcE,YAAdF,GAA6B;UAAEmB,KAAF;UAASC;QAAT,CAA7BpB;QACAA,KAAK,CAACQ,OAANR,CAAcG,EAAdH,GAAmB8B,UAAnB9B;QACAI,iBAAiB,CAACkB,MAAD,EAAS,WAAT,EAAsBI,WAAtB,EAAmC,KAAnC,CAAjBtB;QACAA,iBAAiB,CAACkB,MAAD,EAAS,UAAT,EAAqBS,UAArB,EAAiC,KAAjC,CAAjB3B;QACAA,iBAAiB,CAACkB,MAAD,EAAS,aAAT,EAAwBS,UAAxB,EAAoC,KAApC,CAAjB3B;MAbF;IAeD;;IAED,IAAI8B,mBAAmB,GAAG,CAACvB,MAAD,EAAiBC,MAAjB,KAAoC;MAC5DL,KAAK;MACLE,IAAI,CAAC,UAAD,EAAaE,MAAb,EAAqBC,MAArB,CAAJH;MACAK,GAAG,CAAC,UAAD,CAAHA;IAHF;;IAMAR,SAAS,CAAC6B,SAAV7B,GAAuBW,CAAD,IAAO;MAC3B,QAAQA,CAAC,CAACmB,GAAV;QACE,KAAK,MAAL;QACA,KAAK,WAAL;UACEnB,CAAC,CAACQ,cAAFR;UACAA,CAAC,CAACO,eAAFP;UACAiB,mBAAmB,CAAC,CAAC,CAAF,EAAK,CAAL,CAAnBA;UACA;;QACF,KAAK,OAAL;QACA,KAAK,YAAL;UACEjB,CAAC,CAACQ,cAAFR;UACAA,CAAC,CAACO,eAAFP;UACAiB,mBAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnBA;UACA;;QACF,KAAK,IAAL;QACA,KAAK,SAAL;UACEjB,CAAC,CAACQ,cAAFR;UACAA,CAAC,CAACO,eAAFP;UACAiB,mBAAmB,CAAC,CAAD,EAAI,CAAC,CAAL,CAAnBA;UACA;;QACF,KAAK,MAAL;QACA,KAAK,WAAL;UACEjB,CAAC,CAACQ,cAAFR;UACAA,CAAC,CAACO,eAAFP;UACAiB,mBAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnBA;UACA;MAxBJ;IADF;;IA6BA,OAAO5B,SAAP;EAjJqB,GAkJpB,CACDN,KADC,EAEDH,WAFC,EAGDC,MAHC,EAIDC,SAJC,EAKDK,iBALC,EAMDC,oBANC,CAlJoB,CAAvB;EA2JA,OAAO;IAAEC;EAAF,CAAP;AACD","names":["disableTextSelection","restoreTextSelection","useMemo","useRef","useGlobalListeners","useMove","props","onMoveStart","onMove","onMoveEnd","state","didMove","lastPosition","id","addGlobalListener","removeGlobalListener","moveProps","start","current","move","pointerType","deltaX","deltaY","type","end","PointerEvent","onMouseMove","e","button","pageX","pageY","onMouseUp","window","onMouseDown","stopPropagation","preventDefault","onTouchMove","touch","changedTouches","findIndex","identifier","onTouchEnd","onTouchStart","length","triggerKeyboardMove","onKeyDown","key"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/@react-native-aria/slider/lib/module/useMove.web.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { disableTextSelection, restoreTextSelection } from './textSelection';\nimport { MoveEvents, PointerType } from '@react-types/shared';\nimport React, { HTMLAttributes, useMemo, useRef } from 'react';\nimport { useGlobalListeners } from '@react-aria/utils';\n\ninterface MoveResult {\n  /** Props to spread on the target element. */\n  moveProps: HTMLAttributes<HTMLElement>;\n}\n\n/**\n * Handles move interactions across mouse, touch, and keyboard, including dragging with\n * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and\n * platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useMove(props: MoveEvents): MoveResult {\n  let { onMoveStart, onMove, onMoveEnd } = props;\n\n  let state = useRef<{\n    didMove: boolean;\n    lastPosition: { pageX: number; pageY: number } | null;\n    id: number | null;\n  }>({ didMove: false, lastPosition: null, id: null });\n\n  let { addGlobalListener, removeGlobalListener } = useGlobalListeners();\n\n  let moveProps = useMemo(() => {\n    let moveProps: HTMLAttributes<HTMLElement> = {};\n\n    let start = () => {\n      disableTextSelection();\n      state.current.didMove = false;\n    };\n    let move = (pointerType: PointerType, deltaX: number, deltaY: number) => {\n      if (deltaX === 0 && deltaY === 0) {\n        return;\n      }\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart?.({\n          type: 'movestart',\n          pointerType,\n        });\n      }\n      onMove({\n        type: 'move',\n        pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n      });\n    };\n    let end = (pointerType: PointerType) => {\n      restoreTextSelection();\n      if (state.current.didMove) {\n        onMoveEnd?.({\n          type: 'moveend',\n          pointerType,\n        });\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      let onMouseMove = (e: MouseEvent) => {\n        if (e.button === 0) {\n          move(\n            'mouse',\n            e.pageX - state.current.lastPosition.pageX,\n            e.pageY - state.current.lastPosition.pageY\n          );\n          state.current.lastPosition = { pageX: e.pageX, pageY: e.pageY };\n        }\n      };\n      let onMouseUp = (e: MouseEvent) => {\n        if (e.button === 0) {\n          end('mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = { pageX: e.pageX, pageY: e.pageY };\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = (e: TouchEvent) => {\n        // @ts-ignore\n        let touch = [...e.changedTouches].findIndex(\n          ({ identifier }) => identifier === state.current.id\n        );\n        if (touch >= 0) {\n          let { pageX, pageY } = e.changedTouches[touch];\n          move(\n            'touch',\n            pageX - state.current.lastPosition.pageX,\n            pageY - state.current.lastPosition.pageY\n          );\n          state.current.lastPosition = { pageX, pageY };\n        }\n      };\n      let onTouchEnd = (e: TouchEvent) => {\n        // @ts-ignore\n        let touch = [...e.changedTouches].findIndex(\n          ({ identifier }) => identifier === state.current.id\n        );\n        if (touch >= 0) {\n          end('touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = (e: React.TouchEvent) => {\n        if (e.changedTouches.length === 0 || state.current.id != null) {\n          return;\n        }\n\n        let { pageX, pageY, identifier } = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = { pageX, pageY };\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    }\n\n    let triggerKeyboardMove = (deltaX: number, deltaY: number) => {\n      start();\n      move('keyboard', deltaX, deltaY);\n      end('keyboard');\n    };\n\n    moveProps.onKeyDown = (e) => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(-1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [\n    state,\n    onMoveStart,\n    onMove,\n    onMoveEnd,\n    addGlobalListener,\n    removeGlobalListener,\n  ]);\n\n  return { moveProps };\n}\n"]},"metadata":{},"sourceType":"module"}