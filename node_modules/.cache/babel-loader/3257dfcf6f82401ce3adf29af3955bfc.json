{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { useFormControlContext } from '../../composites/FormControl';\nconst RadioComponent = /*#__PURE__*/memo( /*#__PURE__*/forwardRef((_ref2, ref) => {\n  let {\n    icon,\n    inputProps,\n    combinedProps,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  } = _ref2;\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate\n  } = combinedProps;\n  const {\n    disabled: isDisabled,\n    checked: isChecked\n  } = inputProps;\n\n  const _ref = React.useRef(null);\n\n  const {\n    isHovered\n  } = useHover({}, _ref);\n  const mergedRefs = mergeRefs([_ref, wrapperRef]);\n  const {\n    focusProps,\n    isFocusVisible\n  } = useFocusRing();\n  const {\n    _interactionBox,\n    _icon,\n    _stack,\n    _text,\n    ...resolvedProps\n  } = usePropsResolution('Radio', combinedProps, {\n    isInvalid,\n    isReadOnly,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled,\n    isIndeterminate,\n    isChecked,\n    isHovered: isHoveredProp || isHovered\n  }); // only calling below function when icon exist.\n\n  const sizedIcon = () =>\n  /*#__PURE__*/\n  //@ts-ignore\n  React.cloneElement(icon, { ..._icon\n  });\n\n  const component = /*#__PURE__*/React.createElement(Stack, _stack, /*#__PURE__*/React.createElement(Center, null, /*#__PURE__*/React.createElement(Box, _interactionBox), /*#__PURE__*/React.createElement(Center, resolvedProps, icon && sizedIcon && isChecked ? sizedIcon() : /*#__PURE__*/React.createElement(CircleIcon, _extends({}, _icon, {\n    opacity: isChecked ? 1 : 0\n  })))), wrapStringChild(children, _text)); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box // @ts-ignore - RN web supports accessibilityRole=\"label\"\n  , {\n    accessibilityRole: \"label\",\n    ref: mergedRefs\n  }, /*#__PURE__*/React.createElement(VisuallyHidden, null, /*#__PURE__*/React.createElement(\"input\", _extends({}, inputProps, focusProps, {\n    ref: ref\n  }))), component);\n}));\n\nconst Radio = (_ref3, ref) => {\n  let {\n    icon,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  } = _ref3;\n\n  var _contextState$state;\n\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n  const combinedProps = combineContextAndProps({ ...formControlContext,\n    ...contextState\n  }, props);\n  const inputRef = React.useRef(null);\n  const radioState = useRadio({ ...combinedProps,\n    'aria-label': props.accessibilityLabel,\n    children\n  }, (_contextState$state = contextState.state) !== null && _contextState$state !== void 0 ? _contextState$state : {}, inputRef); //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const inputProps = React.useMemo(() => radioState.inputProps, [radioState.inputProps.checked, radioState.inputProps.disabled]);\n  const [contextCombinedProps] = React.useState({ ...combinedProps\n  }); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n\n  return /*#__PURE__*/React.createElement(RadioComponent, {\n    inputProps: inputProps,\n    combinedProps: contextCombinedProps,\n    children: children,\n    ref: ref,\n    icon: icon,\n    wrapperRef: wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp\n  });\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Radio));","map":{"version":3,"mappings":"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","names":["React","memo","forwardRef","Box","Stack","Center","usePropsResolution","wrapStringChild","mergeRefs","useHover","useRadio","VisuallyHidden","RadioContext","useFocusRing","CircleIcon","useHasResponsiveProps","combineContextAndProps","isEmptyObj","useFormControlContext","RadioComponent","ref","icon","inputProps","combinedProps","children","wrapperRef","isHovered","isHoveredProp","isFocusVisible","isFocusVisibleProp","props","isInvalid","isReadOnly","isIndeterminate","disabled","isDisabled","checked","isChecked","_ref","useRef","mergedRefs","focusProps","_interactionBox","_icon","_stack","_text","resolvedProps","sizedIcon","cloneElement","component","opacity","accessibilityRole","Radio","formControlContext","contextState","useContext","inputRef","radioState","accessibilityLabel","state","useMemo","contextCombinedProps","useState","console","error"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Radio/Radio.web.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { useFormControlContext } from '../../composites/FormControl';\n\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isFocusVisible: isFocusVisibleProp,\n        ...props\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n      const _ref = React.useRef(null);\n      const { isHovered } = useHover({}, _ref);\n      const mergedRefs = mergeRefs([_ref, wrapperRef]);\n      const { focusProps, isFocusVisible } = useFocusRing();\n\n      const {\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution('Radio', combinedProps, {\n        isInvalid,\n        isReadOnly,\n        isFocusVisible: isFocusVisibleProp || isFocusVisible,\n        isDisabled,\n        isIndeterminate,\n        isChecked,\n        isHovered: isHoveredProp || isHovered,\n      });\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      const component = (\n        <Stack {..._stack}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Radio */}\n            <Center {...resolvedProps}>\n              {icon && sizedIcon && isChecked ? (\n                sizedIcon()\n              ) : (\n                <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n              )}\n            </Center>\n          </Center>\n          {wrapStringChild(children, _text)}\n        </Stack>\n      );\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n\n      return (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={mergedRefs}\n        >\n          <VisuallyHidden>\n            <input {...inputProps} {...focusProps} ref={ref} />\n          </VisuallyHidden>\n          {component}\n        </Box>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...combinedProps,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]},"metadata":{},"sourceType":"module"}