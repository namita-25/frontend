{"ast":null,"code":"import React from 'react';\nimport { SafeAreaProvider, initialWindowMetrics as defaultInitialWindowMetrics } from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme } from './../theme';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from '../components/composites/Toast';\nimport { defaultConfig, NativeBaseConfigProvider } from './NativeBaseContext';\nimport { useToast } from '../components/composites/Toast';\nimport { Platform, useWindowDimensions } from 'react-native';\nimport { getClosestBreakpoint, platformSpecificSpaceUnits } from '../theme/tools/utils';\nimport { ResponsiveQueryProvider } from '../utils/useResponsiveQuery'; // For SSR to work, we need to pass initial insets as 0 values on web.\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\n\nconst defaultInitialWindowMetricsBasedOnPlatform = Platform.select({\n  web: {\n    frame: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    insets: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }\n  },\n  default: defaultInitialWindowMetrics\n});\n\nconst NativeBaseProvider = props => {\n  var _config$theme, _useWindowDimensions;\n\n  const {\n    colorModeManager,\n    config = defaultConfig,\n    children,\n    theme: propsTheme = defaultTheme,\n    initialWindowMetrics,\n    isSSR,\n    disableContrastText\n  } = props;\n  const theme = (_config$theme = config.theme) !== null && _config$theme !== void 0 ? _config$theme : propsTheme;\n  const newTheme = React.useMemo(() => {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n\n    return theme;\n  }, [config.enableRem, theme]);\n  const windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width;\n  const currentBreakpoint = React.useMemo(() => getClosestBreakpoint(newTheme.breakpoints, windowWidth), [windowWidth, newTheme.breakpoints]);\n  return /*#__PURE__*/React.createElement(NativeBaseConfigProvider, {\n    theme: newTheme,\n    config: config,\n    currentBreakpoint: currentBreakpoint,\n    isSSR: isSSR,\n    disableContrastText: disableContrastText\n  }, /*#__PURE__*/React.createElement(SafeAreaProvider, {\n    initialMetrics: initialWindowMetrics !== null && initialWindowMetrics !== void 0 ? initialWindowMetrics : defaultInitialWindowMetricsBasedOnPlatform\n  }, /*#__PURE__*/React.createElement(ResponsiveQueryProvider, {\n    disableCSSMediaQueries: !isSSR\n  }, /*#__PURE__*/React.createElement(HybridProvider, {\n    colorModeManager: colorModeManager,\n    options: theme.config\n  }, /*#__PURE__*/React.createElement(OverlayProvider, null, /*#__PURE__*/React.createElement(ToastProvider, null, /*#__PURE__*/React.createElement(InitializeToastRef, null), /*#__PURE__*/React.createElement(SSRProvider, null, children)))))));\n};\n\nconst InitializeToastRef = () => {\n  const toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\nexport { NativeBaseProvider };","map":{"version":3,"mappings":"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","names":["React","SafeAreaProvider","initialWindowMetrics","defaultInitialWindowMetrics","SSRProvider","theme","defaultTheme","HybridProvider","OverlayProvider","ToastProvider","ToastRef","defaultConfig","NativeBaseConfigProvider","useToast","Platform","useWindowDimensions","getClosestBreakpoint","platformSpecificSpaceUnits","ResponsiveQueryProvider","defaultInitialWindowMetricsBasedOnPlatform","select","web","frame","x","y","width","height","insets","top","left","right","bottom","default","NativeBaseProvider","props","colorModeManager","config","children","propsTheme","isSSR","disableContrastText","newTheme","useMemo","enableRem","windowWidth","_useWindowDimensions","currentBreakpoint","breakpoints","initialMetrics","disableCSSMediaQueries","options","InitializeToastRef","toast","current"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/core/NativeBaseProvider.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  SafeAreaProvider,\n  Metrics,\n  initialWindowMetrics as defaultInitialWindowMetrics,\n} from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme, ITheme } from './../theme';\nimport type { IColorModeProviderProps } from './color-mode';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from '../components/composites/Toast';\nimport {\n  defaultConfig,\n  INativebaseConfig,\n  NativeBaseConfigProvider,\n} from './NativeBaseContext';\nimport { useToast } from '../components/composites/Toast';\nimport { Platform, useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  platformSpecificSpaceUnits,\n} from '../theme/tools/utils';\nimport { ResponsiveQueryProvider } from '../utils/useResponsiveQuery';\n\n// For SSR to work, we need to pass initial insets as 0 values on web.\n\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\nconst defaultInitialWindowMetricsBasedOnPlatform: Metrics | null = Platform.select(\n  {\n    web: {\n      frame: { x: 0, y: 0, width: 0, height: 0 },\n      insets: { top: 0, left: 0, right: 0, bottom: 0 },\n    },\n    default: defaultInitialWindowMetrics,\n  }\n);\n\nexport interface NativeBaseProviderProps {\n  theme?: ITheme;\n  colorModeManager?: IColorModeProviderProps['colorModeManager'];\n  children?: React.ReactNode;\n  initialWindowMetrics?: any;\n  config?: INativebaseConfig;\n  isSSR?: boolean;\n  disableContrastText?: boolean;\n  // Refer https://github.com/th3rdwave/react-native-safe-area-context#testing\n}\n\nconst NativeBaseProvider = (props: NativeBaseProviderProps) => {\n  const {\n    colorModeManager,\n    config = defaultConfig,\n    children,\n    theme: propsTheme = defaultTheme,\n    initialWindowMetrics,\n    isSSR,\n    disableContrastText,\n  } = props;\n  const theme = config.theme ?? propsTheme;\n\n  const newTheme = React.useMemo(() => {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n    return theme;\n  }, [config.enableRem, theme]);\n\n  const windowWidth = useWindowDimensions()?.width;\n\n  const currentBreakpoint = React.useMemo(\n    () => getClosestBreakpoint(newTheme.breakpoints, windowWidth),\n    [windowWidth, newTheme.breakpoints]\n  );\n\n  return (\n    <NativeBaseConfigProvider\n      theme={newTheme}\n      config={config}\n      currentBreakpoint={currentBreakpoint}\n      isSSR={isSSR}\n      disableContrastText={disableContrastText}\n    >\n      <SafeAreaProvider\n        initialMetrics={\n          initialWindowMetrics ?? defaultInitialWindowMetricsBasedOnPlatform\n        }\n      >\n        <ResponsiveQueryProvider disableCSSMediaQueries={!isSSR}>\n          <HybridProvider\n            colorModeManager={colorModeManager}\n            options={theme.config}\n          >\n            <OverlayProvider>\n              <ToastProvider>\n                <InitializeToastRef />\n                <SSRProvider>{children}</SSRProvider>\n              </ToastProvider>\n            </OverlayProvider>\n          </HybridProvider>\n        </ResponsiveQueryProvider>\n      </SafeAreaProvider>\n    </NativeBaseConfigProvider>\n  );\n};\n\nconst InitializeToastRef = () => {\n  const toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\nexport { NativeBaseProvider };\n"]},"metadata":{},"sourceType":"module"}