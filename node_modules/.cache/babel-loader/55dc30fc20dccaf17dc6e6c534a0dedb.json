{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Button } from '../../primitives/Button';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { extractInObject } from '../../../theme/tools/utils';\n\nconst Fab = (_ref, ref) => {\n  let { ...props\n  } = _ref;\n\n  /** Extracting Button Specific Props */\n  const [buttonProps, remainingProps] = extractInObject(props, ['variant', '_pressed', '_hover', '_text', '_focus', '_stack', '_loading', '_disabled', '_spinner']);\n  const themeProps = usePropsResolution('FAB', remainingProps);\n  const {\n    label,\n    icon,\n    renderInPortal,\n    placement,\n    placementProps,\n    ...newProps\n  } = themeProps;\n  const fabComponent = /*#__PURE__*/React.createElement(Button, _extends({}, buttonProps, placementProps[placement], {\n    ref: ref,\n    startIcon: icon\n  }, newProps), label); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return renderInPortal ? /*#__PURE__*/React.createElement(OverlayContainer, null, fabComponent) : fabComponent;\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Fab));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,MAAT,QAAuB,yBAAvB;AAEA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,eAAT,QAAgC,4BAAhC;;AAEA,MAAMC,GAAG,GAAG,OAA0BC,GAA1B,KAAuC;EAAA,IAAtC,EAAE,GAAGC;EAAL,CAAsC;;EACjD;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,eAAe,CAACG,KAAD,EAAQ,CAC3D,SAD2D,EAE3D,UAF2D,EAG3D,QAH2D,EAI3D,OAJ2D,EAK3D,QAL2D,EAM3D,QAN2D,EAO3D,UAP2D,EAQ3D,WAR2D,EAS3D,UAT2D,CAAR,CAArD;EAWA,MAAMG,UAAU,GAAGT,kBAAkB,CAAC,KAAD,EAAQQ,cAAR,CAArC;EAEA,MAAM;IACJE,KADI;IAEJC,IAFI;IAGJC,cAHI;IAIJC,SAJI;IAKJC,cALI;IAMJ,GAAGC;EANC,IAOFN,UAPJ;EASA,MAAMO,YAAY,gBAChBpB,oBAACG,MAAD,eACMQ,WADN,EAEMO,cAAc,CAACD,SAAD,CAFpB;IAGER,GAAG,EAAEA,GAHP;IAIEY,SAAS,EAAEN;EAJb,GAKMI,QALN,GAOGL,KAPH,CADF,CAxBiD,CAmCjD;;EACA,IAAIR,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EAED,OAAOM,cAAc,gBACnBhB,oBAACK,gBAAD,QAAmBe,YAAnB,CADmB,GAGnBA,YAHF;AAxCF;;AA+CA,4BAAenB,IAAI,eAACC,UAAU,CAACM,GAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Button","usePropsResolution","OverlayContainer","useHasResponsiveProps","extractInObject","Fab","ref","props","buttonProps","remainingProps","themeProps","label","icon","renderInPortal","placement","placementProps","newProps","fabComponent","startIcon"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Fab/Fab.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Button } from '../../primitives/Button';\nimport type { IFabProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { extractInObject } from '../../../theme/tools/utils';\n\nconst Fab = ({ ...props }: IFabProps, ref: any) => {\n  /** Extracting Button Specific Props */\n  const [buttonProps, remainingProps] = extractInObject(props, [\n    'variant',\n    '_pressed',\n    '_hover',\n    '_text',\n    '_focus',\n    '_stack',\n    '_loading',\n    '_disabled',\n    '_spinner',\n  ]);\n  const themeProps = usePropsResolution('FAB', remainingProps);\n\n  const {\n    label,\n    icon,\n    renderInPortal,\n    placement,\n    placementProps,\n    ...newProps\n  } = themeProps;\n\n  const fabComponent = (\n    <Button\n      {...buttonProps}\n      {...placementProps[placement]}\n      ref={ref}\n      startIcon={icon}\n      {...newProps}\n    >\n      {label}\n    </Button>\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return renderInPortal ? (\n    <OverlayContainer>{fabComponent}</OverlayContainer>\n  ) : (\n    fabComponent\n  );\n};\n\nexport default memo(forwardRef(Fab));\n"]},"metadata":{},"sourceType":"module"}