{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport { AppState, useColorScheme as _useColorScheme } from 'react-native';\nimport { useSubscription } from 'use-subscription';\nexport const useColorMode = () => {\n  const {\n    colorMode: colorModeContext\n  } = React.useContext(HybridContext);\n\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n\n  return colorModeContext;\n};\nexport function useColorModeValue(light, dark) {\n  const {\n    colorMode\n  } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\nexport const useAppState = () => {\n  const subscription = React.useMemo(() => ({\n    getCurrentValue: () => AppState.currentState,\n    subscribe: callback => {\n      AppState.addEventListener('change', callback);\n      return () => AppState.removeEventListener('change', callback);\n    }\n  }), []);\n  return useSubscription(subscription);\n};\nexport const useColorScheme = () => {\n  const colorScheme = _useColorScheme();\n\n  const [currentScheme, setCurrentScheme] = useState(colorScheme);\n  const appState = useAppState();\n  useEffect(() => {\n    if (appState === 'active') {\n      setCurrentScheme(colorScheme);\n    }\n  }, [appState, colorScheme]);\n  return currentScheme;\n};\nexport function useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  const systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState(initialColorMode);\n  const setColorMode = React.useCallback(async val => {\n    if (colorModeManager) {\n      await colorModeManager.set(val);\n    }\n\n    setRawMode(val);\n  }, [colorModeManager]); // For initial setting initial color mode from storage\n\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]); // Set system color mode only when user has not passed a colorModeManager\n\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode,\n    setColorMode\n  };\n}\nexport function useAccessibleColors() {\n  const {\n    colorMode: colorModeContext\n  } = React.useContext(HybridContext);\n\n  const toggleAccessibleColors = () => colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","HybridContext","AppState","useColorScheme","_useColorScheme","useSubscription","useColorMode","colorMode","colorModeContext","useContext","undefined","Error","useColorModeValue","light","dark","useAppState","subscription","useMemo","getCurrentValue","currentState","subscribe","callback","addEventListener","removeEventListener","colorScheme","currentScheme","setCurrentScheme","appState","useModeManager","initialColorMode","useSystemColorMode","colorModeManager","systemColorMode","setRawMode","setColorMode","useCallback","val","set","getMode","value","get","useAccessibleColors","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/core/color-mode/hooks.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\nimport { AppState, useColorScheme as _useColorScheme } from 'react-native';\nimport { useSubscription } from 'use-subscription';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport const useAppState = () => {\n  const subscription = React.useMemo(\n    () => ({\n      getCurrentValue: () => AppState.currentState,\n      subscribe: (callback: () => void) => {\n        AppState.addEventListener('change', callback);\n        return () => AppState.removeEventListener('change', callback);\n      },\n    }),\n    []\n  );\n  return useSubscription(subscription);\n};\n\nexport const useColorScheme = () => {\n  const colorScheme = _useColorScheme();\n  const [currentScheme, setCurrentScheme] = useState(colorScheme);\n  const appState = useAppState();\n\n  useEffect(() => {\n    if (appState === 'active') {\n      setCurrentScheme(colorScheme);\n    }\n  }, [appState, colorScheme]);\n\n  return currentScheme;\n};\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  useSystemColorMode: boolean | undefined,\n  colorModeManager?: StorageManager\n) {\n  const systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  const setColorMode = React.useCallback(\n    async (val: ColorMode) => {\n      if (colorModeManager) {\n        await colorModeManager.set(val);\n      }\n      setRawMode(val);\n    },\n    [colorModeManager]\n  );\n\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  // Set system color mode only when user has not passed a colorModeManager\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}