{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { SliderContext } from './Context';\nimport Box from '../Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst SliderFilledTrack = (props, ref) => {\n  const {\n    isReversed,\n    colorScheme,\n    state,\n    trackLayout,\n    orientation,\n    isDisabled,\n    sliderSize,\n    isReadOnly\n  } = React.useContext(SliderContext);\n  const sliderTrackPosition = isReversed ? orientation === 'vertical' ? trackLayout.height - trackLayout.height * state.getThumbPercent(0) : trackLayout.width - trackLayout.width * state.getThumbPercent(0) : state.getThumbPercent(0) * 100 + '%';\n  const resolvedProps = usePropsResolution('SliderFilledTrack', {\n    size: sliderSize,\n    colorScheme,\n    isReversed,\n    orientation,\n    sliderTrackPosition,\n    ...props\n  }, {\n    isDisabled,\n    isReadOnly\n  }); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    position: \"absolute\"\n  }, resolvedProps, {\n    ref: ref // {...(isReadOnly && _readOnly)}\n    // {...(isDisabled && _disabled)}\n\n  }));\n};\n\nexport default /*#__PURE__*/React.forwardRef(SliderFilledTrack);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAiCC,GAAjC,KAA+C;EACvE,MAAM;IACJC,UADI;IAEJC,WAFI;IAGJC,KAHI;IAIJC,WAJI;IAKJC,WALI;IAMJC,UANI;IAOJC,UAPI;IAQJC;EARI,IASFf,KAAK,CAACgB,UAANhB,CAAiBC,aAAjBD,CATJ;EAWA,MAAMiB,mBAAmB,GAAGT,UAAU,GAClCI,WAAW,KAAK,UAAhBA,GACED,WAAW,CAACO,MAAZP,GAAqBA,WAAW,CAACO,MAAZP,GAAqBD,KAAK,CAACS,eAANT,CAAsB,CAAtBA,CAD5CE,GAEED,WAAW,CAACS,KAAZT,GAAoBA,WAAW,CAACS,KAAZT,GAAoBD,KAAK,CAACS,eAANT,CAAsB,CAAtBA,CAHR,GAIlCA,KAAK,CAACS,eAANT,CAAsB,CAAtBA,IAA2B,GAA3BA,GAAiC,GAJrC;EAMA,MAAMW,aAAa,GAAGlB,kBAAkB,CACtC,mBADsC,EAEtC;IACEmB,IAAI,EAAER,UADR;IAEEL,WAFF;IAGED,UAHF;IAIEI,WAJF;IAKEK,mBALF;IAME,GAAGX;EANL,CAFsC,EAUtC;IAAEO,UAAF;IAAcE;EAAd,CAVsC,CAAxC,CAlBuE,CA+BvE;;EACA,IAAIX,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EAED,oBACEN,oBAACE,GAAD;IACEqB,QAAQ,EAAC;EADX,GAEMF,aAFN;IAGEd,GAAG,EAAEA,GAHP,CAIE;IACA;;EALF,GADF;AApCF;;AA+CA,4BAAeP,KAAK,CAACwB,UAANxB,CAAiBK,iBAAjBL,CAAf","names":["React","SliderContext","Box","usePropsResolution","useHasResponsiveProps","SliderFilledTrack","props","ref","isReversed","colorScheme","state","trackLayout","orientation","isDisabled","sliderSize","isReadOnly","useContext","sliderTrackPosition","height","getThumbPercent","width","resolvedProps","size","position","forwardRef"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Slider/SliderFilledTrack.tsx"],"sourcesContent":["import React from 'react';\nimport { SliderContext } from './Context';\nimport Box from '../Box';\nimport type { ISliderTrackFilledProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst SliderFilledTrack = (props: ISliderTrackFilledProps, ref?: any) => {\n  const {\n    isReversed,\n    colorScheme,\n    state,\n    trackLayout,\n    orientation,\n    isDisabled,\n    sliderSize,\n    isReadOnly,\n  } = React.useContext(SliderContext);\n\n  const sliderTrackPosition = isReversed\n    ? orientation === 'vertical'\n      ? trackLayout.height - trackLayout.height * state.getThumbPercent(0)\n      : trackLayout.width - trackLayout.width * state.getThumbPercent(0)\n    : state.getThumbPercent(0) * 100 + '%';\n\n  const resolvedProps = usePropsResolution(\n    'SliderFilledTrack',\n    {\n      size: sliderSize,\n      colorScheme,\n      isReversed,\n      orientation,\n      sliderTrackPosition,\n      ...props,\n    },\n    { isDisabled, isReadOnly }\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      position=\"absolute\"\n      {...resolvedProps}\n      ref={ref}\n      // {...(isReadOnly && _readOnly)}\n      // {...(isDisabled && _disabled)}\n    />\n  );\n};\n\nexport default React.forwardRef(SliderFilledTrack);\n"]},"metadata":{},"sourceType":"module"}