{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Text from '../Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Heading = (props, ref) => {\n  const resolvedProps = usePropsResolution('Heading', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Text, _extends({}, resolvedProps, {\n    ref: ref\n  }));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Heading));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AAEA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAuBC,GAAvB,KAAoC;EAClD,MAAMC,aAAa,GAAGL,kBAAkB,CAAC,SAAD,EAAYG,KAAZ,CAAxC,CADkD,CAElD;;EACA,IAAIF,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBAAOP,oBAACG,IAAD,eAAUM,aAAV;IAAyBD,GAAG,EAAEA;EAA9B,GAAP;AANF;;AASA,4BAAeP,IAAI,eAACC,UAAU,CAACI,OAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Text","usePropsResolution","useHasResponsiveProps","Heading","props","ref","resolvedProps"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Heading/index.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Text from '../Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IHeadingProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Heading = (props: IHeadingProps, ref: any) => {\n  const resolvedProps = usePropsResolution('Heading', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <Text {...resolvedProps} ref={ref} />;\n};\n\nexport default memo(forwardRef(Heading));\nexport type { IHeadingProps };\n"]},"metadata":{},"sourceType":"module"}