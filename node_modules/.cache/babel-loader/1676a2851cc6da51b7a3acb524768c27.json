{"ast":null,"code":"import React from 'react';\nimport { useEffect } from 'react';\nimport { BackHandler } from 'react-native';\nlet keyboardDismissHandlers = [];\nexport const keyboardDismissHandlerManager = {\n  push: handler => {\n    keyboardDismissHandlers.push(handler);\n    return () => {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(h => h !== handler);\n    };\n  },\n  length: () => keyboardDismissHandlers.length,\n  pop: () => {\n    return keyboardDismissHandlers.pop();\n  }\n};\n/**\n * Handles attaching callback for Escape key listener on web and Back button listener on Android\n */\n\nexport const useKeyboardDismissable = _ref => {\n  let {\n    enabled,\n    callback\n  } = _ref;\n  React.useEffect(() => {\n    let cleanupFn = () => {};\n\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n\n    return () => {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n  useBackHandler({\n    enabled,\n    callback\n  });\n};\nexport function useBackHandler(_ref2) {\n  let {\n    enabled,\n    callback\n  } = _ref2;\n  useEffect(() => {\n    let backHandler = () => {\n      callback();\n      return true;\n    };\n\n    if (enabled) {\n      BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n\n    return () => BackHandler.removeEventListener('hardwareBackPress', backHandler);\n  }, [enabled, callback]);\n}","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,cAA5B;AAOA,IAAIC,uBAAyC,GAAG,EAAhD;AACA,OAAO,MAAMC,6BAA6B,GAAG;EAC3CC,IAAI,EAAGC,OAAD,IAAwB;IAC5BH,uBAAuB,CAACE,IAAxBF,CAA6BG,OAA7BH;IACA,OAAO,MAAM;MACXA,uBAAuB,GAAGA,uBAAuB,CAACI,MAAxBJ,CACvBK,CAAD,IAAOA,CAAC,KAAKF,OADWH,CAA1BA;IADF;EAHyC;EAS3CM,MAAM,EAAE,MAAMN,uBAAuB,CAACM,MATK;EAU3CC,GAAG,EAAE,MAAM;IACT,OAAOP,uBAAuB,CAACO,GAAxBP,EAAP;EACD;AAZ0C,CAAtC;AAeP;AACA;AACA;;AACA,OAAO,MAAMQ,sBAAsB,GAAG,QAAoC;EAAA,IAAnC;IAAEC,OAAF;IAAWC;EAAX,CAAmC;EACxEb,KAAK,CAACC,SAAND,CAAgB,MAAM;IACpB,IAAIc,SAAS,GAAG,MAAM,CAAtB;;IACA,IAAIF,OAAJ,EAAa;MACXE,SAAS,GAAGV,6BAA6B,CAACC,IAA9BD,CAAmCS,QAAnCT,CAAZU;IADF,OAEO;MACLA,SAAS;IACV;;IACD,OAAO,MAAM;MACXA,SAAS;IADX;EAPF,GAUG,CAACF,OAAD,EAAUC,QAAV,CAVHb;EAYAe,cAAc,CAAC;IAAEH,OAAF;IAAWC;EAAX,CAAD,CAAdE;AAbK;AAgBP,OAAO,SAASA,cAAT,QAAwD;EAAA,IAAhC;IAAEH,OAAF;IAAWC;EAAX,CAAgC;EAC7DZ,SAAS,CAAC,MAAM;IACd,IAAIe,WAAW,GAAG,MAAM;MACtBH,QAAQ;MACR,OAAO,IAAP;IAFF;;IAIA,IAAID,OAAJ,EAAa;MACXV,WAAW,CAACe,gBAAZf,CAA6B,mBAA7BA,EAAkDc,WAAlDd;IADF,OAEO;MACLA,WAAW,CAACgB,mBAAZhB,CAAgC,mBAAhCA,EAAqDc,WAArDd;IACD;;IACD,OAAO,MACLA,WAAW,CAACgB,mBAAZhB,CAAgC,mBAAhCA,EAAqDc,WAArDd,CADF;EAVO,GAYN,CAACU,OAAD,EAAUC,QAAV,CAZM,CAATZ;AAaD","names":["React","useEffect","BackHandler","keyboardDismissHandlers","keyboardDismissHandlerManager","push","handler","filter","h","length","pop","useKeyboardDismissable","enabled","callback","cleanupFn","useBackHandler","backHandler","addEventListener","removeEventListener"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/hooks/useKeyboardDismissable.ts"],"sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\nimport { BackHandler } from 'react-native';\n\ntype IParams = {\n  enabled?: boolean;\n  callback: () => any;\n};\n\nlet keyboardDismissHandlers: Array<() => any> = [];\nexport const keyboardDismissHandlerManager = {\n  push: (handler: () => any) => {\n    keyboardDismissHandlers.push(handler);\n    return () => {\n      keyboardDismissHandlers = keyboardDismissHandlers.filter(\n        (h) => h !== handler\n      );\n    };\n  },\n  length: () => keyboardDismissHandlers.length,\n  pop: () => {\n    return keyboardDismissHandlers.pop();\n  },\n};\n\n/**\n * Handles attaching callback for Escape key listener on web and Back button listener on Android\n */\nexport const useKeyboardDismissable = ({ enabled, callback }: IParams) => {\n  React.useEffect(() => {\n    let cleanupFn = () => {};\n    if (enabled) {\n      cleanupFn = keyboardDismissHandlerManager.push(callback);\n    } else {\n      cleanupFn();\n    }\n    return () => {\n      cleanupFn();\n    };\n  }, [enabled, callback]);\n\n  useBackHandler({ enabled, callback });\n};\n\nexport function useBackHandler({ enabled, callback }: IParams) {\n  useEffect(() => {\n    let backHandler = () => {\n      callback();\n      return true;\n    };\n    if (enabled) {\n      BackHandler.addEventListener('hardwareBackPress', backHandler);\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n    }\n    return () =>\n      BackHandler.removeEventListener('hardwareBackPress', backHandler);\n  }, [enabled, callback]);\n}\n"]},"metadata":{},"sourceType":"module"}