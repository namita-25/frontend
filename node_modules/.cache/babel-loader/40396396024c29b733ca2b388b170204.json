{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport { Modal, Platform } from 'react-native';\nimport { useKeyboardDismissable } from '../../../hooks';\nimport { ExitAnimationContext } from './ExitAnimationContext';\nexport function Overlay(_ref) {\n  let {\n    children,\n    isOpen,\n    useRNModal = false,\n    useRNModalOnAndroid = false,\n    isKeyboardDismissable = true,\n    //@ts-ignore\n    animationPreset = 'fade',\n    onRequestClose,\n    style,\n    unmountOnExit\n  } = _ref;\n  const [exited, setExited] = React.useState(!isOpen);\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : () => {}\n  });\n  const styleObj = { ...style\n  };\n\n  if (animationPreset === 'slide') {\n    styleObj.overflow = 'hidden';\n    styleObj.display = 'flex';\n  } else {\n    styleObj.display = exited && !isOpen ? 'none' : 'flex';\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  if (useRNModal || useRNModalOnAndroid && Platform.OS === 'android') {\n    return /*#__PURE__*/React.createElement(ExitAnimationContext.Provider, {\n      value: {\n        exited,\n        setExited\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      statusBarTranslucent: true,\n      transparent: true,\n      visible: isOpen,\n      onRequestClose: onRequestClose,\n      animationType: animationPreset\n    }, children));\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  return (\n    /*#__PURE__*/\n    //@ts-ignore\n    React.createElement(OverlayContainer, {\n      style: { ...styleObj\n      }\n    }, /*#__PURE__*/React.createElement(ExitAnimationContext.Provider, {\n      value: {\n        exited,\n        setExited\n      }\n    }, children))\n  );\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,gBAAT,QAAiC,6BAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,cAAhC;AACA,SAASC,sBAAT,QAAuC,gBAAvC;AACA,SAASC,oBAAT,QAAqC,wBAArC;AAeA,OAAO,SAASC,OAAT,OAWW;EAAA,IAXM;IACtBC,QADsB;IAEtBC,MAFsB;IAGtBC,UAAU,GAAG,KAHS;IAItBC,mBAAmB,GAAG,KAJA;IAKtBC,qBAAqB,GAAG,IALF;IAMtB;IACAC,eAAe,GAAG,MAPI;IAQtBC,cARsB;IAStBC,KATsB;IAUtBC;EAVsB,CAWN;EAChB,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBhB,KAAK,CAACiB,QAANjB,CAAe,CAACO,MAAhBP,CAA5B;EAEAG,sBAAsB,CAAC;IACrBe,OAAO,EAAEX,MAAM,IAAIG,qBADE;IAErBS,QAAQ,EAAEP,cAAc,GAAGA,cAAH,GAAoB,MAAM,CAAE;EAF/B,CAAD,CAAtBT;EAIA,MAAMiB,QAAQ,GAAG,EAAE,GAAGP;EAAL,CAAjB;;EACA,IAAIF,eAAe,KAAK,OAAxB,EAAiC;IAC/BS,QAAQ,CAACC,QAATD,GAAoB,QAApBA;IACAA,QAAQ,CAACE,OAATF,GAAmB,MAAnBA;EAFF,OAGO;IACLA,QAAQ,CAACE,OAATF,GAAmBL,MAAM,IAAI,CAACR,MAAXQ,GAAoB,MAApBA,GAA6B,MAAhDK;EACD;;EAED,IAAIN,aAAa,IAAI,CAACP,MAAlBO,IAA4BC,MAAhC,EAAwC;IACtC,OAAO,IAAP;EACD;;EAED,IAAIP,UAAU,IAAKC,mBAAmB,IAAIP,QAAQ,CAACqB,EAATrB,KAAgB,SAA1D,EAAsE;IACpE,oBACEF,oBAACI,oBAAD,CAAsBoB,QAAtB;MAA+BC,KAAK,EAAE;QAAEV,MAAF;QAAUC;MAAV;IAAtC,gBACEhB,oBAACC,KAAD;MACEyB,oBAAoB,MADtB;MAEEC,WAAW,MAFb;MAGEC,OAAO,EAAErB,MAHX;MAIEK,cAAc,EAAEA,cAJlB;MAKEiB,aAAa,EAAElB;IALjB,GAOGL,QAPH,CADF,CADF;EAaD;;EAED,IAAIQ,aAAa,IAAI,CAACP,MAAlBO,IAA4BC,MAAhC,EAAwC;IACtC,OAAO,IAAP;EACD;;EAED;IAAA;IACE;IACAf,oBAACD,gBAAD;MAAkBc,KAAK,EAAE,EAAE,GAAGO;MAAL;IAAzB,gBACEpB,oBAACI,oBAAD,CAAsBoB,QAAtB;MAA+BC,KAAK,EAAE;QAAEV,MAAF;QAAUC;MAAV;IAAtC,GACGV,QADH,CADF;EAFF;AAQD","names":["OverlayContainer","React","Modal","Platform","useKeyboardDismissable","ExitAnimationContext","Overlay","children","isOpen","useRNModal","useRNModalOnAndroid","isKeyboardDismissable","animationPreset","onRequestClose","style","unmountOnExit","exited","setExited","useState","enabled","callback","styleObj","overflow","display","OS","Provider","value","statusBarTranslucent","transparent","visible","animationType"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Overlay/Overlay.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport type { ViewStyle } from 'react-native';\nimport { Modal, Platform } from 'react-native';\nimport { useKeyboardDismissable } from '../../../hooks';\nimport { ExitAnimationContext } from './ExitAnimationContext';\n\nexport interface IOverlayProps {\n  isOpen?: boolean;\n  children?: any;\n  // We use RN modal on android if needed as it supports shifting accessiblity focus to the opened view. IOS automatically shifts focus if an absolutely placed view appears in front.\n  useRNModalOnAndroid?: boolean;\n  useRNModal?: boolean;\n  onRequestClose?: any;\n  isKeyboardDismissable?: boolean;\n  animationPreset?: 'fade' | 'slide' | 'none';\n  style?: ViewStyle;\n  unmountOnExit?: boolean;\n}\n\nexport function Overlay({\n  children,\n  isOpen,\n  useRNModal = false,\n  useRNModalOnAndroid = false,\n  isKeyboardDismissable = true,\n  //@ts-ignore\n  animationPreset = 'fade',\n  onRequestClose,\n  style,\n  unmountOnExit,\n}: IOverlayProps) {\n  const [exited, setExited] = React.useState(!isOpen);\n\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : () => {},\n  });\n  const styleObj = { ...style };\n  if (animationPreset === 'slide') {\n    styleObj.overflow = 'hidden';\n    styleObj.display = 'flex';\n  } else {\n    styleObj.display = exited && !isOpen ? 'none' : 'flex';\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  if (useRNModal || (useRNModalOnAndroid && Platform.OS === 'android')) {\n    return (\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        <Modal\n          statusBarTranslucent\n          transparent\n          visible={isOpen}\n          onRequestClose={onRequestClose}\n          animationType={animationPreset}\n        >\n          {children}\n        </Modal>\n      </ExitAnimationContext.Provider>\n    );\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  return (\n    //@ts-ignore\n    <OverlayContainer style={{ ...styleObj }}>\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        {children}\n      </ExitAnimationContext.Provider>\n    </OverlayContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}