{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { mergeRefs } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport { useToggleState } from '@react-stately/toggle';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { combineContextAndProps } from '../../../utils';\nimport SizedIcon from './SizedIcon';\nimport { Stack } from '../Stack';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\n\nconst Checkbox = (_ref2, ref) => {\n  let {\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  } = _ref2;\n  const formControlContext = useFormControlContext();\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    ...combinedProps\n  } = combineContextAndProps(formControlContext, props);\n  const checkboxGroupContext = React.useContext(CheckboxGroupContext);\n  const state = useToggleState({ ...props,\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked\n  });\n\n  const _ref = React.useRef();\n\n  const mergedRef = mergeRefs([ref, _ref]); // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n\n  const {\n    inputProps: groupItemInputProps\n  } = checkboxGroupContext ? // eslint-disable-next-line react-hooks/rules-of-hooks\n  useCheckboxGroupItem({ ...combinedProps,\n    'aria-label': combinedProps.accessibilityLabel,\n    'value': combinedProps.value\n  }, checkboxGroupContext.state, //@ts-ignore\n  mergedRef) : // eslint-disable-next-line react-hooks/rules-of-hooks\n  useCheckbox({ ...combinedProps,\n    'aria-label': combinedProps.accessibilityLabel\n  }, state, //@ts-ignore\n  mergedRef); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const inputProps = React.useMemo(() => groupItemInputProps, [groupItemInputProps.checked, groupItemInputProps.disabled, groupItemInputProps]);\n  const [contextCombinedProps] = React.useState({ ...checkboxGroupContext,\n    ...combinedProps\n  });\n  return /*#__PURE__*/React.createElement(CheckboxComponent, {\n    wrapperRef: wrapperRef,\n    mergedRef: mergedRef,\n    inputProps: inputProps,\n    combinedProps: contextCombinedProps,\n    isInvalid: isInvalid,\n    isReadOnly: isReadOnly,\n    isHovered: isHoveredProp,\n    isIndeterminate: isIndeterminate,\n    isFocusVisible: isFocusVisibleProp\n  });\n};\n\nconst CheckboxComponent = /*#__PURE__*/React.memo(_ref3 => {\n  let {\n    wrapperRef,\n    inputProps,\n    combinedProps,\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    mergedRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp\n  } = _ref3;\n\n  const _ref = React.useRef();\n\n  const {\n    isHovered\n  } = useHover({}, _ref);\n  const {\n    checked: isChecked,\n    disabled: isDisabled\n  } = inputProps;\n  const {\n    focusProps,\n    isFocusVisible\n  } = useFocusRing();\n  const {\n    icon,\n    _interactionBox,\n    _icon,\n    _stack,\n    _text,\n    ...resolvedProps\n  } = usePropsResolution('Checkbox', combinedProps, {\n    isInvalid,\n    isReadOnly,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled,\n    isIndeterminate,\n    isChecked,\n    isHovered: isHovered || isHoveredProp\n  });\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [...stylingProps.margin, ...stylingProps.layout, ...stylingProps.flexbox, ...stylingProps.position, '_text']);\n  const component = React.useMemo(() => {\n    return /*#__PURE__*/React.createElement(Stack, _extends({}, _stack, layoutProps), /*#__PURE__*/React.createElement(Center, null, /*#__PURE__*/React.createElement(Box, _interactionBox), /*#__PURE__*/React.createElement(Center, nonLayoutProps, /*#__PURE__*/React.createElement(SizedIcon, {\n      icon: icon,\n      _icon: _icon,\n      isChecked: isChecked\n    }))), wrapStringChild(resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.children, _text));\n  }, [_icon, _stack, _text, _interactionBox, icon, isChecked, nonLayoutProps, layoutProps, resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.children]);\n  const mergedWrapperRef = React.useMemo(() => mergeRefs([wrapperRef, _ref]), [wrapperRef]); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box // @ts-ignore - RN web supports accessibilityRole=\"label\"\n  , {\n    accessibilityRole: \"label\",\n    ref: mergedWrapperRef\n  }, /*#__PURE__*/React.createElement(VisuallyHidden, null, /*#__PURE__*/React.createElement(\"input\", _extends({}, inputProps, focusProps, {\n    ref: mergedRef\n  }))), component);\n});\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Checkbox));","map":{"version":3,"mappings":"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","names":["React","memo","forwardRef","mergeRefs","usePropsResolution","Center","useFormControlContext","Box","useToggleState","VisuallyHidden","CheckboxGroupContext","useHover","useCheckbox","useCheckboxGroupItem","useFocusRing","useHasResponsiveProps","extractInObject","stylingProps","combineContextAndProps","SizedIcon","Stack","wrapStringChild","Checkbox","ref","wrapperRef","isHovered","isHoveredProp","isFocusVisible","isFocusVisibleProp","props","formControlContext","isInvalid","isReadOnly","isIndeterminate","combinedProps","checkboxGroupContext","useContext","state","defaultSelected","defaultIsChecked","isSelected","isChecked","_ref","useRef","mergedRef","inputProps","groupItemInputProps","accessibilityLabel","value","useMemo","checked","disabled","contextCombinedProps","useState","CheckboxComponent","isDisabled","focusProps","icon","_interactionBox","_icon","_stack","_text","resolvedProps","layoutProps","nonLayoutProps","margin","layout","flexbox","position","component","children","mergedWrapperRef","accessibilityRole"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Checkbox/Checkbox.web.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { mergeRefs } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { combineContextAndProps } from '../../../utils';\nimport SizedIcon from './SizedIcon';\nimport { Stack } from '../Stack';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\n\nconst Checkbox = (\n  {\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: ICheckboxProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    ...combinedProps\n  } = combineContextAndProps(formControlContext, props);\n\n  const checkboxGroupContext = React.useContext(CheckboxGroupContext);\n  const state = useToggleState({\n    ...props,\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked,\n  });\n\n  const _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps: groupItemInputProps } = checkboxGroupContext\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n          'value': combinedProps.value,\n        },\n        checkboxGroupContext.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n        },\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => groupItemInputProps, [\n    groupItemInputProps.checked,\n    groupItemInputProps.disabled,\n    groupItemInputProps,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...checkboxGroupContext,\n    ...combinedProps,\n  });\n\n  return (\n    <CheckboxComponent\n      wrapperRef={wrapperRef}\n      mergedRef={mergedRef}\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n      isHovered={isHoveredProp}\n      isIndeterminate={isIndeterminate}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nconst CheckboxComponent = React.memo(\n  ({\n    wrapperRef,\n    inputProps,\n    combinedProps,\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    mergedRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n  }: any) => {\n    const _ref = React.useRef();\n    const { isHovered } = useHover({}, _ref);\n\n    const { checked: isChecked, disabled: isDisabled } = inputProps;\n\n    const { focusProps, isFocusVisible } = useFocusRing();\n\n    const {\n      icon,\n      _interactionBox,\n      _icon,\n      _stack,\n      _text,\n      ...resolvedProps\n    } = usePropsResolution('Checkbox', combinedProps, {\n      isInvalid,\n      isReadOnly,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n      isDisabled,\n      isIndeterminate,\n      isChecked,\n      isHovered: isHovered || isHoveredProp,\n    });\n\n    const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n      ...stylingProps.margin,\n      ...stylingProps.layout,\n      ...stylingProps.flexbox,\n      ...stylingProps.position,\n      '_text',\n    ]);\n    const component = React.useMemo(() => {\n      return (\n        <Stack {..._stack} {...layoutProps}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Checkbox */}\n            <Center {...nonLayoutProps}>\n              {/* {iconResolver()} */}\n              <SizedIcon icon={icon} _icon={_icon} isChecked={isChecked} />\n            </Center>\n          </Center>\n          {/* Label */}\n          {/* {resolvedProps?.children} */}\n          {wrapStringChild(resolvedProps?.children, _text)}\n        </Stack>\n      );\n    }, [\n      _icon,\n      _stack,\n      _text,\n      _interactionBox,\n      icon,\n      isChecked,\n      nonLayoutProps,\n      layoutProps,\n      resolvedProps?.children,\n    ]);\n\n    const mergedWrapperRef = React.useMemo(\n      () => mergeRefs([wrapperRef, _ref]),\n      [wrapperRef]\n    );\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(resolvedProps)) {\n      return null;\n    }\n\n    return (\n      <Box\n        // @ts-ignore - RN web supports accessibilityRole=\"label\"\n        accessibilityRole=\"label\"\n        ref={mergedWrapperRef}\n      >\n        <VisuallyHidden>\n          {/* <input {...props.inputProps} {...props.focusProps} ref={props.mergedRef} /> */}\n          <input {...inputProps} {...focusProps} ref={mergedRef} />\n        </VisuallyHidden>\n\n        {component}\n      </Box>\n    );\n  }\n);\n\nexport default memo(forwardRef(Checkbox));\n"]},"metadata":{},"sourceType":"module"}