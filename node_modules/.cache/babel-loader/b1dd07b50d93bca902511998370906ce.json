{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Flex = (props, ref) => {\n  const {\n    align,\n    justify,\n    wrap,\n    basis,\n    grow,\n    shrink,\n    direction,\n    ...resolvedProps\n  } = usePropsResolution('Flex', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, _extends({}, resolvedProps, {\n    flexDirection: direction || resolvedProps.flexDirection,\n    alignItems: align || resolvedProps.alignItems,\n    justifyContent: justify || resolvedProps.justifyContent,\n    flexGrow: grow || resolvedProps.flexGrow,\n    flexBasis: basis || resolvedProps.flexBasis,\n    flexShrink: shrink || resolvedProps.flexShrink,\n    flexWrap: wrap || resolvedProps.flexWrap,\n    ref: ref\n  }));\n}; //Spacer Component that adds space between components where it is placed\n\n\nexport const Spacer = props => {\n  const resolvedProps = usePropsResolution('Spacer', props);\n  return /*#__PURE__*/React.createElement(Box, resolvedProps);\n};\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Flex));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,IAAI,GAAG,CAACC,KAAD,EAAoBC,GAApB,KAAiC;EAC5C,MAAM;IACJC,KADI;IAEJC,OAFI;IAGJC,IAHI;IAIJC,KAJI;IAKJC,IALI;IAMJC,MANI;IAOJC,SAPI;IAQJ,GAAGC;EARC,IASFZ,kBAAkB,CAAC,MAAD,EAASG,KAAT,CATtB,CAD4C,CAY5C;;EACA,IAAIF,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EAED,oBACEP,oBAACG,GAAD,eACMa,aADN;IAEEC,aAAa,EAAEF,SAAS,IAAIC,aAAa,CAACC,aAF5C;IAGEC,UAAU,EAAET,KAAK,IAAIO,aAAa,CAACE,UAHrC;IAIEC,cAAc,EAAET,OAAO,IAAIM,aAAa,CAACG,cAJ3C;IAKEC,QAAQ,EAAEP,IAAI,IAAIG,aAAa,CAACI,QALlC;IAMEC,SAAS,EAAET,KAAK,IAAII,aAAa,CAACK,SANpC;IAOEC,UAAU,EAAER,MAAM,IAAIE,aAAa,CAACM,UAPtC;IAQEC,QAAQ,EAAEZ,IAAI,IAAIK,aAAa,CAACO,QARlC;IASEf,GAAG,EAAEA;EATP,GADF;AAjBF,E,CAgCA;;;AACA,OAAO,MAAMgB,MAAM,GAAIjB,KAAD,IAAgB;EACpC,MAAMS,aAAa,GAAGZ,kBAAkB,CAAC,QAAD,EAAWG,KAAX,CAAxC;EAEA,oBAAOP,oBAACG,GAAD,EAASa,aAAT,CAAP;AAHK;AAOP,4BAAef,IAAI,eAACC,UAAU,CAACI,IAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Box","usePropsResolution","useHasResponsiveProps","Flex","props","ref","align","justify","wrap","basis","grow","shrink","direction","resolvedProps","flexDirection","alignItems","justifyContent","flexGrow","flexBasis","flexShrink","flexWrap","Spacer"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Flex/index.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport type { IFlexProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Flex = (props: IFlexProps, ref: any) => {\n  const {\n    align,\n    justify,\n    wrap,\n    basis,\n    grow,\n    shrink,\n    direction,\n    ...resolvedProps\n  } = usePropsResolution('Flex', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      {...resolvedProps}\n      flexDirection={direction || resolvedProps.flexDirection}\n      alignItems={align || resolvedProps.alignItems}\n      justifyContent={justify || resolvedProps.justifyContent}\n      flexGrow={grow || resolvedProps.flexGrow}\n      flexBasis={basis || resolvedProps.flexBasis}\n      flexShrink={shrink || resolvedProps.flexShrink}\n      flexWrap={wrap || resolvedProps.flexWrap}\n      ref={ref}\n    />\n  );\n};\n\n//Spacer Component that adds space between components where it is placed\nexport const Spacer = (props: any) => {\n  const resolvedProps = usePropsResolution('Spacer', props);\n\n  return <Box {...resolvedProps} />;\n};\n\nexport type { IFlexProps };\nexport default memo(forwardRef(Flex));\n"]},"metadata":{},"sourceType":"module"}