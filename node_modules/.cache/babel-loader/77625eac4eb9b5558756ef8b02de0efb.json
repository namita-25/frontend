{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport MenuGroup from './MenuGroup';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nexport const MenuOptionContext = /*#__PURE__*/React.createContext({\n  values: [],\n  onChange: _val => {},\n  type: 'checkbox'\n});\n\nconst MenuOptionGroup = (_ref, ref) => {\n  let {\n    type,\n    defaultValue,\n    value,\n    onChange,\n    ...props\n  } = _ref;\n  const internalDefaultValue = defaultValue ? Array.isArray(defaultValue) ? defaultValue : [defaultValue] : [];\n  const [internalValues, setValues] = React.useState(internalDefaultValue);\n\n  const _onChange = newValue => {\n    if (type === 'checkbox') {\n      const newValues = [...internalValues];\n\n      if (internalValues.includes(newValue)) {\n        newValues.splice(newValues.indexOf(newValue), 1);\n        setValues(newValues);\n      } else {\n        newValues.push(newValue);\n        setValues(newValues);\n      }\n\n      onChange && onChange(newValues);\n    } else if (type === 'radio') {\n      setValues([newValue]);\n      onChange && onChange(newValue);\n    }\n  }; //TODO: refactor for responsive prop\n\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(MenuOptionContext.Provider, {\n    value: {\n      values: !value ? internalValues : Array.isArray(value) ? value : [value],\n      onChange: _onChange,\n      type\n    }\n  }, /*#__PURE__*/React.createElement(MenuGroup, _extends({}, props, {\n    ref: ref\n  })));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(MenuOptionGroup));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,IAA5B,QAAwC,OAAxC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,OAAO,MAAMC,iBAAiB,gBAAGL,KAAK,CAACM,aAANN,CAA6C;EAC5EO,MAAM,EAAE,EADoE;EAE5EC,QAAQ,EAAGC,IAAD,IAAU,CAFwD;EAG5EC,IAAI,EAAE;AAHsE,CAA7CV,CAA1B;;AAMP,MAAMW,eAAe,GAAG,OAEtBC,GAFsB,KAGnB;EAAA,IAFH;IAAEF,IAAF;IAAQG,YAAR;IAAsBC,KAAtB;IAA6BN,QAA7B;IAAuC,GAAGO;EAA1C,CAEG;EACH,MAAMC,oBAAoB,GAAGH,YAAY,GACrCI,KAAK,CAACC,OAAND,CAAcJ,YAAdI,IACEJ,YADFI,GAEE,CAACJ,YAAD,CAHmC,GAIrC,EAJJ;EAMA,MAAM,CAACM,cAAD,EAAiBC,SAAjB,IAA8BpB,KAAK,CAACqB,QAANrB,CAClCgB,oBADkChB,CAApC;;EAGA,MAAMsB,SAAS,GAAIC,QAAD,IAA+B;IAC/C,IAAIb,IAAI,KAAK,UAAb,EAAyB;MACvB,MAAMc,SAAS,GAAG,CAAC,GAAGL,cAAJ,CAAlB;;MACA,IAAIA,cAAc,CAACM,QAAfN,CAAwBI,QAAxBJ,CAAJ,EAAuC;QACrCK,SAAS,CAACE,MAAVF,CAAiBA,SAAS,CAACG,OAAVH,CAAkBD,QAAlBC,CAAjBA,EAA8C,CAA9CA;QACAJ,SAAS,CAACI,SAAD,CAATJ;MAFF,OAGO;QACLI,SAAS,CAACI,IAAVJ,CAAeD,QAAfC;QACAJ,SAAS,CAACI,SAAD,CAATJ;MACD;;MACDZ,QAAQ,IAAIA,QAAQ,CAACgB,SAAD,CAApBhB;IATF,OAUO,IAAIE,IAAI,KAAK,OAAb,EAAsB;MAC3BU,SAAS,CAAC,CAACG,QAAD,CAAD,CAATH;MACAZ,QAAQ,IAAIA,QAAQ,CAACe,QAAD,CAApBf;IACD;EAdH,EAVG,CA0BH;;;EACA,IAAIJ,qBAAqB,CAACW,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBACEf,oBAACK,iBAAD,CAAmBwB,QAAnB;IACEf,KAAK,EAAE;MACLP,MAAM,EAAE,CAACO,KAAD,GACJK,cADI,GAEJF,KAAK,CAACC,OAAND,CAAcH,KAAdG,IACAH,KADAG,GAEA,CAACH,KAAD,CALC;MAMLN,QAAQ,EAAEc,SANL;MAOLZ;IAPK;EADT,gBAWEV,oBAACG,SAAD,eAAeY,KAAf;IAAsBH,GAAG,EAAEA;EAA3B,GAXF,CADF;AAjCF;;AAkDA,4BAAeV,IAAI,eAACD,UAAU,CAACU,eAAD,CAAX,CAAnB","names":["React","forwardRef","memo","MenuGroup","useHasResponsiveProps","MenuOptionContext","createContext","values","onChange","_val","type","MenuOptionGroup","ref","defaultValue","value","props","internalDefaultValue","Array","isArray","internalValues","setValues","useState","_onChange","newValue","newValues","includes","splice","indexOf","push","Provider"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Menu/MenuOptionGroup.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport MenuGroup from './MenuGroup';\nimport type { IMenuOptionGroupProps, IMenuOptionContextProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const MenuOptionContext = React.createContext<IMenuOptionContextProps>({\n  values: [],\n  onChange: (_val) => {},\n  type: 'checkbox',\n});\n\nconst MenuOptionGroup = (\n  { type, defaultValue, value, onChange, ...props }: IMenuOptionGroupProps,\n  ref?: any\n) => {\n  const internalDefaultValue = defaultValue\n    ? Array.isArray(defaultValue)\n      ? defaultValue\n      : [defaultValue]\n    : [];\n\n  const [internalValues, setValues] = React.useState<Array<string | number>>(\n    internalDefaultValue\n  );\n  const _onChange = (newValue: string | number) => {\n    if (type === 'checkbox') {\n      const newValues = [...internalValues];\n      if (internalValues.includes(newValue)) {\n        newValues.splice(newValues.indexOf(newValue), 1);\n        setValues(newValues);\n      } else {\n        newValues.push(newValue);\n        setValues(newValues);\n      }\n      onChange && onChange(newValues);\n    } else if (type === 'radio') {\n      setValues([newValue]);\n      onChange && onChange(newValue);\n    }\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <MenuOptionContext.Provider\n      value={{\n        values: !value\n          ? internalValues\n          : Array.isArray(value)\n          ? value\n          : [value],\n        onChange: _onChange,\n        type,\n      }}\n    >\n      <MenuGroup {...props} ref={ref} />\n    </MenuOptionContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(MenuOptionGroup));\n"]},"metadata":{},"sourceType":"module"}