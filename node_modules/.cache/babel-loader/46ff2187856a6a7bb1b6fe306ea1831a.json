{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport Box from '../../primitives/Box';\nimport { useThemeProps } from '../../../hooks';\nimport getIndexedChildren from '../../../utils/getIndexedChildren';\nimport { AccordionContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Accordion = (_ref, ref) => {\n  let {\n    children,\n    index: pIndex,\n    defaultIndex,\n    allowMultiple,\n    allowToggle,\n    onChange,\n    ...props\n  } = _ref;\n  const {\n    endingHeight,\n    startingHeight,\n    duration,\n    isOpen,\n    onAnimationEnd,\n    onAnimationStart,\n    ...newProps\n  } = useThemeProps('Accordion', props);\n  const [index, setIndex] = React.useState(pIndex || defaultIndex || []); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const changeHandler = (isOpening, activeIndex) => {\n    let indexCopy = index.map(i => i);\n\n    if (allowToggle) {\n      if (isOpening) {\n        indexCopy.push(activeIndex);\n        allowMultiple ? setIndex(indexCopy) : setIndex([activeIndex]);\n      } else {\n        setIndex(index.splice(index.indexOf(activeIndex), 1));\n      }\n    } else {\n      if (isOpening) {\n        indexCopy.push(activeIndex);\n        allowMultiple ? setIndex(indexCopy) : setIndex([activeIndex]);\n      } else {\n        indexCopy = indexCopy.filter(n => n !== activeIndex);\n        setIndex(indexCopy);\n      }\n    }\n\n    onChange && onChange(indexCopy);\n  };\n\n  return /*#__PURE__*/React.createElement(AccordionContext.Provider, {\n    value: {\n      index: index,\n      changeHandler,\n      AnimationProps: {\n        endingHeight,\n        startingHeight,\n        duration,\n        isOpen,\n        onAnimationEnd,\n        onAnimationStart\n      }\n    }\n  }, /*#__PURE__*/React.createElement(Box, _extends({\n    overflow: \"hidden\"\n  }, newProps, {\n    ref: ref\n  }), getIndexedChildren(children)));\n};\n\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Accordion));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AAEA,SAASC,aAAT,QAA8B,gBAA9B;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,SAASC,gBAAT,QAAiC,WAAjC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,SAAS,GAAG,OAUhBC,GAVgB,KAWb;EAAA,IAVH;IACEC,QADF;IAEEC,KAAK,EAAEC,MAFT;IAGEC,YAHF;IAIEC,aAJF;IAKEC,WALF;IAMEC,QANF;IAOE,GAAGC;EAPL,CAUG;EACH,MAAM;IACJC,YADI;IAEJC,cAFI;IAGJC,QAHI;IAIJC,MAJI;IAKJC,cALI;IAMJC,gBANI;IAOJ,GAAGC;EAPC,IAQFpB,aAAa,CAAC,WAAD,EAAca,KAAd,CARjB;EAUA,MAAM,CAACN,KAAD,EAAQc,QAAR,IAAoBvB,KAAK,CAACwB,QAANxB,CAAeU,MAAM,IAAIC,YAAVD,IAA0B,EAAzCV,CAA1B,CAXG,CAYH;;EACA,IAAIK,qBAAqB,CAACU,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,MAAMU,aAAa,GAAG,CAACC,SAAD,EAAqBC,WAArB,KAA6C;IACjE,IAAIC,SAAS,GAAGnB,KAAK,CAACoB,GAANpB,CAAWqB,CAAD,IAAeA,CAAzBrB,CAAhB;;IACA,IAAII,WAAJ,EAAiB;MACf,IAAIa,SAAJ,EAAe;QACbE,SAAS,CAACG,IAAVH,CAAeD,WAAfC;QACAhB,aAAa,GAAGW,QAAQ,CAACK,SAAD,CAAX,GAAyBL,QAAQ,CAAC,CAACI,WAAD,CAAD,CAA9Cf;MAFF,OAGO;QACLW,QAAQ,CAACd,KAAK,CAACuB,MAANvB,CAAaA,KAAK,CAACwB,OAANxB,CAAckB,WAAdlB,CAAbA,EAAyC,CAAzCA,CAAD,CAARc;MACD;IANH,OAOO;MACL,IAAIG,SAAJ,EAAe;QACbE,SAAS,CAACG,IAAVH,CAAeD,WAAfC;QACAhB,aAAa,GAAGW,QAAQ,CAACK,SAAD,CAAX,GAAyBL,QAAQ,CAAC,CAACI,WAAD,CAAD,CAA9Cf;MAFF,OAGO;QACLgB,SAAS,GAAGA,SAAS,CAACM,MAAVN,CAAkBO,CAAD,IAAYA,CAAC,KAAKR,WAAnCC,CAAZA;QACAL,QAAQ,CAACK,SAAD,CAARL;MACD;IACF;;IACDT,QAAQ,IAAIA,QAAQ,CAACc,SAAD,CAApBd;EAlBF;;EAoBA,oBACEd,oBAACI,gBAAD,CAAkBgC,QAAlB;IACEC,KAAK,EAAE;MACL5B,KAAK,EAAEA,KADF;MAELgB,aAFK;MAGLa,cAAc,EAAE;QACdtB,YADc;QAEdC,cAFc;QAGdC,QAHc;QAIdC,MAJc;QAKdC,cALc;QAMdC;MANc;IAHX;EADT,gBAcErB,oBAACC,GAAD;IAAKsC,QAAQ,EAAC;EAAd,GAA2BjB,QAA3B;IAAqCf,GAAG,EAAEA;EAA1C,IACGJ,kBAAkB,CAACK,QAAD,CADrB,CAdF,CADF;AA/CF;;AAqEA,4BAAeR,KAAK,CAACwC,IAANxC,eAAWA,KAAK,CAACyC,UAANzC,CAAiBM,SAAjBN,CAAXA,CAAf","names":["React","Box","useThemeProps","getIndexedChildren","AccordionContext","useHasResponsiveProps","Accordion","ref","children","index","pIndex","defaultIndex","allowMultiple","allowToggle","onChange","props","endingHeight","startingHeight","duration","isOpen","onAnimationEnd","onAnimationStart","newProps","setIndex","useState","changeHandler","isOpening","activeIndex","indexCopy","map","i","push","splice","indexOf","filter","n","Provider","value","AnimationProps","overflow","memo","forwardRef"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Accordion/Accordion.tsx"],"sourcesContent":["import React from 'react';\nimport Box from '../../primitives/Box';\nimport type { IAccordionProps } from './types';\nimport { useThemeProps } from '../../../hooks';\nimport getIndexedChildren from '../../../utils/getIndexedChildren';\nimport { AccordionContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Accordion = (\n  {\n    children,\n    index: pIndex,\n    defaultIndex,\n    allowMultiple,\n    allowToggle,\n    onChange,\n    ...props\n  }: IAccordionProps,\n  ref: any\n) => {\n  const {\n    endingHeight,\n    startingHeight,\n    duration,\n    isOpen,\n    onAnimationEnd,\n    onAnimationStart,\n    ...newProps\n  } = useThemeProps('Accordion', props);\n\n  const [index, setIndex] = React.useState(pIndex || defaultIndex || []);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  const changeHandler = (isOpening: boolean, activeIndex: number) => {\n    let indexCopy = index.map((i: number) => i);\n    if (allowToggle) {\n      if (isOpening) {\n        indexCopy.push(activeIndex);\n        allowMultiple ? setIndex(indexCopy) : setIndex([activeIndex]);\n      } else {\n        setIndex(index.splice(index.indexOf(activeIndex), 1));\n      }\n    } else {\n      if (isOpening) {\n        indexCopy.push(activeIndex);\n        allowMultiple ? setIndex(indexCopy) : setIndex([activeIndex]);\n      } else {\n        indexCopy = indexCopy.filter((n: any) => n !== activeIndex);\n        setIndex(indexCopy);\n      }\n    }\n    onChange && onChange(indexCopy);\n  };\n  return (\n    <AccordionContext.Provider\n      value={{\n        index: index,\n        changeHandler,\n        AnimationProps: {\n          endingHeight,\n          startingHeight,\n          duration,\n          isOpen,\n          onAnimationEnd,\n          onAnimationStart,\n        },\n      }}\n    >\n      <Box overflow=\"hidden\" {...newProps} ref={ref}>\n        {getIndexedChildren(children)}\n      </Box>\n    </AccordionContext.Provider>\n  );\n};\n\nexport default React.memo(React.forwardRef(Accordion));\n"]},"metadata":{},"sourceType":"module"}