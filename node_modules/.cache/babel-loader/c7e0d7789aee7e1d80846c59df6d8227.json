{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Center = (props, ref) => {\n  const resolvedProps = usePropsResolution('Center', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    ref: ref\n  }, resolvedProps));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Center));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AAEA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAsBC,GAAtB,KAAmC;EAChD,MAAMC,aAAa,GAAGN,kBAAkB,CAAC,QAAD,EAAWI,KAAX,CAAxC,CADgD,CAEhD;;EACA,IAAIF,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBAAOP,oBAACI,GAAD;IAAKI,GAAG,EAAEA;EAAV,GAAmBC,aAAnB,EAAP;AANF;;AASA,4BAAeR,IAAI,eAACC,UAAU,CAACI,MAAD,CAAX,CAAnB","names":["React","memo","forwardRef","usePropsResolution","Box","useHasResponsiveProps","Center","props","ref","resolvedProps"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Center/Center.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from '../../primitives/Box';\nimport type { ICenterProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Center = (props: ICenterProps, ref: any) => {\n  const resolvedProps = usePropsResolution('Center', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <Box ref={ref} {...resolvedProps} />;\n};\n\nexport default memo(forwardRef(Center));\n"]},"metadata":{},"sourceType":"module"}