{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport Box from '../../primitives/Box';\nimport PresenceTransition from './PresenceTransition';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { Overlay } from '../../primitives/Overlay';\nimport { usePropsResolution } from '../../../hooks/';\nconst holderStyle = {\n  top: {\n    top: 0,\n    right: 0,\n    left: 0\n  },\n  right: {\n    right: 0,\n    top: 0,\n    bottom: 0\n  },\n  bottom: {\n    bottom: 0,\n    right: 0,\n    left: 0\n  },\n  left: {\n    left: 0,\n    bottom: 0,\n    top: 0\n  }\n};\nexport const Slide = /*#__PURE__*/memo( /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    children,\n    ...props\n  } = _ref;\n  const {\n    in: visible,\n    placement,\n    overlay,\n    duration,\n    _overlay,\n    ...resolvedProps\n  } = usePropsResolution('Slide', props);\n  const [containerOpacity, setContainerOpacity] = React.useState(0);\n  const [size, setSize] = React.useState(0);\n\n  const provideSize = layoutSize => {\n    if (placement === 'right' || placement === 'left') setSize(layoutSize.width);else setSize(layoutSize.height);\n    setContainerOpacity(1);\n  };\n\n  const transition = {\n    duration\n  };\n  const animationStyle = {\n    top: {\n      initial: {\n        translateY: -size\n      },\n      animate: {\n        translateY: 0,\n        transition\n      }\n    },\n    bottom: {\n      initial: {\n        translateY: size\n      },\n      animate: {\n        translateY: 0,\n        transition\n      },\n      exit: {\n        translateY: size,\n        transition\n      }\n    },\n    left: {\n      initial: {\n        translateX: -size\n      },\n      animate: {\n        translateX: 0,\n        transition\n      }\n    },\n    right: {\n      initial: {\n        translateX: size\n      },\n      animate: {\n        translateX: 0,\n        transition\n      }\n    }\n  }; //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const slideComponent = /*#__PURE__*/React.createElement(PresenceTransition, _extends({\n    visible: visible\n  }, animationStyle[placement], {\n    style: [{\n      position: 'absolute'\n    }, holderStyle[placement], {\n      height: '100%'\n    }]\n  }), /*#__PURE__*/React.createElement(Box, _extends({}, resolvedProps, {\n    opacity: containerOpacity,\n    ref: ref,\n    onLayout: e => provideSize(e.nativeEvent.layout)\n  }), children));\n\n  if (overlay) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Overlay, _overlay, slideComponent));\n  } else {\n    return slideComponent;\n  }\n}));\nexport default Slide;","map":{"version":3,"mappings":"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","names":["React","forwardRef","memo","Box","PresenceTransition","useHasResponsiveProps","Overlay","usePropsResolution","holderStyle","top","right","left","bottom","Slide","ref","children","props","in","visible","placement","overlay","duration","_overlay","resolvedProps","containerOpacity","setContainerOpacity","useState","size","setSize","provideSize","layoutSize","width","height","transition","animationStyle","initial","translateY","animate","exit","translateX","slideComponent","style","position","opacity","onLayout","e","nativeEvent","layout"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Transitions/Slide.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport Box from '../../primitives/Box';\nimport type { ISlideProps } from './types';\nimport PresenceTransition from './PresenceTransition';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { Overlay } from '../../primitives/Overlay';\nimport { usePropsResolution } from '../../../hooks/';\n\nconst holderStyle: any = {\n  top: {\n    top: 0,\n    right: 0,\n    left: 0,\n  },\n  right: {\n    right: 0,\n    top: 0,\n    bottom: 0,\n  },\n  bottom: {\n    bottom: 0,\n    right: 0,\n    left: 0,\n  },\n  left: {\n    left: 0,\n    bottom: 0,\n    top: 0,\n  },\n};\n\nexport const Slide = memo(\n  forwardRef(({ children, ...props }: ISlideProps, ref: any) => {\n    const {\n      in: visible,\n      placement,\n      overlay,\n      duration,\n      _overlay,\n      ...resolvedProps\n    } = usePropsResolution('Slide', props);\n    const [containerOpacity, setContainerOpacity] = React.useState(0);\n    const [size, setSize] = React.useState(0);\n    const provideSize = (layoutSize: any) => {\n      if (placement === 'right' || placement === 'left')\n        setSize(layoutSize.width);\n      else setSize(layoutSize.height);\n      setContainerOpacity(1);\n    };\n\n    const transition = { duration };\n\n    const animationStyle: any = {\n      top: {\n        initial: {\n          translateY: -size,\n        },\n        animate: {\n          translateY: 0,\n          transition,\n        },\n      },\n      bottom: {\n        initial: {\n          translateY: size,\n        },\n        animate: {\n          translateY: 0,\n          transition,\n        },\n        exit: {\n          translateY: size,\n          transition,\n        },\n      },\n      left: {\n        initial: {\n          translateX: -size,\n        },\n        animate: {\n          translateX: 0,\n          transition,\n        },\n      },\n      right: {\n        initial: {\n          translateX: size,\n        },\n        animate: {\n          translateX: 0,\n          transition,\n        },\n      },\n    };\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n\n    const slideComponent = (\n      <PresenceTransition\n        visible={visible}\n        {...animationStyle[placement]}\n        style={[\n          { position: 'absolute' },\n          holderStyle[placement],\n          { height: '100%' },\n        ]}\n      >\n        <Box\n          {...resolvedProps}\n          opacity={containerOpacity}\n          ref={ref}\n          onLayout={(e) => provideSize(e.nativeEvent.layout)}\n        >\n          {children}\n        </Box>\n      </PresenceTransition>\n    );\n\n    if (overlay) {\n      return (\n        <>\n          <Overlay {..._overlay}>{slideComponent}</Overlay>\n        </>\n      );\n    } else {\n      return slideComponent;\n    }\n  })\n);\n\nexport default Slide;\n"]},"metadata":{},"sourceType":"module"}