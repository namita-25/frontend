{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { useButton } from '@react-native-aria/button';\nimport { useComboBoxState } from '@react-stately/combobox';\nimport { useComboBox } from '@react-native-aria/combobox';\nimport { useListBox, useOption } from '@react-native-aria/listbox';\nimport { ScrollView, findNodeHandle, Platform } from 'react-native';\nimport { Item } from '@react-stately/collections';\nimport Box from '../../primitives/Box';\nimport { Pressable } from '../../primitives/Pressable';\nimport Text from '../../primitives/Text';\nimport { extractInObject } from '../../../theme/tools';\nimport { layoutPropsList } from './types';\nimport { Input } from '../../primitives/Input';\nimport { useThemeProps } from '../../../hooks';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nexport const Typeahead = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    onSelectedItemChange,\n    options,\n    renderItem,\n    getOptionLabel,\n    getOptionKey,\n    onChange,\n    numberOfItems,\n    ...rest\n  } = _ref;\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(ComboBoxImplementation, _extends({}, rest, {\n    onSelectionChange: onSelectedItemChange,\n    items: numberOfItems !== undefined ? options.slice(0, numberOfItems) : options,\n    onInputChange: onChange,\n    ref: ref\n  }), item => {\n    if (typeof item !== 'string' && getOptionLabel === undefined) {\n      throw new Error('Please use getOptionLabel prop');\n    }\n\n    if (item.id === undefined && getOptionKey === undefined) {\n      throw new Error('Please use getOptionKey prop');\n    }\n\n    const optionLabel = getOptionLabel ? getOptionLabel(item) : item;\n    const optionKey = getOptionKey ? getOptionKey(item) : item.id !== undefined ? item.id : optionLabel;\n    return /*#__PURE__*/React.createElement(Item, {\n      textValue: optionLabel,\n      key: optionKey\n    }, renderItem ? renderItem(item) : /*#__PURE__*/React.createElement(Box, {\n      p: 2,\n      justifyContent: \"center\"\n    }, /*#__PURE__*/React.createElement(Text, null, optionLabel)));\n  });\n});\nconst ComboBoxImplementation = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const [layoutProps] = extractInObject(props, layoutPropsList);\n  let state = useComboBoxState(props);\n  let triggerRef = React.useRef(null);\n  let inputRef = React.useRef(null);\n  let listBoxRef = React.useRef(null);\n  let popoverRef = React.useRef(null);\n  let {\n    buttonProps: triggerProps,\n    inputProps,\n    listBoxProps,\n    labelProps\n  } = useComboBox({ ...props,\n    inputRef,\n    buttonRef: triggerRef,\n    listBoxRef,\n    popoverRef,\n    menuTrigger: 'input'\n  }, state);\n\n  const toggleIconSetter = () => {\n    if (typeof props.toggleIcon === 'function') return props.toggleIcon({\n      isOpen: state.isOpen\n    });\n    return props.toggleIcon;\n  };\n\n  let {\n    buttonProps\n  } = useButton(triggerProps);\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    flexDirection: \"row\"\n  }, layoutProps, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(Box, {\n    flex: 1\n  }, props.label && /*#__PURE__*/React.createElement(Text, _extends({}, labelProps, {\n    pb: 1\n  }), props.label), /*#__PURE__*/React.createElement(Input, _extends({}, inputProps, {\n    ref: inputRef,\n    InputRightElement:\n    /*#__PURE__*/\n    // @ts-ignore - RN has hitSlop type inconsistent for View and Pressable!\n    React.createElement(Pressable, _extends({}, buttonProps, {\n      ref: triggerRef\n    }), toggleIconSetter())\n  })), state.isOpen && /*#__PURE__*/React.createElement(ListBoxPopup, _extends({}, listBoxProps, {\n    listBoxRef: listBoxRef,\n    popoverRef: popoverRef,\n    state: state,\n    label: props.label\n  }))));\n});\n\nfunction ListBoxPopup(props) {\n  let {\n    popoverRef,\n    listBoxRef,\n    state,\n    dropdownHeight,\n    label\n  } = props;\n  let {\n    listBoxProps\n  } = useListBox({\n    label,\n    autoFocus: state.focusStrategy,\n    disallowEmptySelection: true\n  }, state, listBoxRef);\n  return /*#__PURE__*/React.createElement(Box, {\n    ref: popoverRef\n  }, /*#__PURE__*/React.createElement(Box, {\n    position: \"absolute\",\n    width: \"100%\",\n    maxHeight: dropdownHeight !== null && dropdownHeight !== void 0 ? dropdownHeight : 200\n  }, /*#__PURE__*/React.createElement(ScrollView, _extends({}, listBoxProps, {\n    keyboardShouldPersistTaps: \"handled\",\n    ref: node => {\n      if (Platform.OS === 'web') {\n        listBoxRef.current = findNodeHandle(node);\n      } else {\n        listBoxRef.current = node;\n      }\n    }\n  }), [...state.collection].map(item => /*#__PURE__*/React.createElement(Option, {\n    key: item.key,\n    item: item,\n    state: state\n  })))));\n}\n\nfunction Option(_ref2) {\n  let {\n    item,\n    state\n  } = _ref2;\n  const searchItemStyle = useThemeProps('TypeAheadSearchItem', {});\n  let ref = React.useRef(null);\n  let isDisabled = state.disabledKeys.has(item.key);\n  let isSelected = state.selectionManager.isSelected(item.key);\n  let isFocused = state.selectionManager.focusedKey === item.key;\n  let {\n    optionProps\n  } = useOption({\n    key: item.key,\n    isDisabled,\n    isSelected,\n    shouldFocusOnHover: true,\n    shouldUseVirtualFocus: true\n  }, state, ref);\n  let backgroundColor = searchItemStyle.backgroundColor;\n  let opacity = 1;\n\n  if (isSelected) {\n    backgroundColor = searchItemStyle._focus.backgroundColor;\n  } else if (isFocused) {\n    backgroundColor = searchItemStyle._focus.backgroundColor;\n  } else if (isDisabled) {\n    opacity = 0.6;\n    backgroundColor = searchItemStyle._disabled.backgroundColor;\n  }\n\n  return /*#__PURE__*/React.createElement(Pressable, _extends({}, optionProps, {\n    opacity: opacity,\n    cursor: isDisabled ? Platform.OS === 'web' ? 'not-allowed' : null : null,\n    backgroundColor: backgroundColor,\n    ref: ref\n  }), item.rendered);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAAwBC,gBAAxB,QAAgD,yBAAhD;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,4BAAtC;AACA,SAASC,UAAT,EAAqBC,cAArB,EAAqCC,QAArC,QAAqD,cAArD;AACA,SAASC,IAAT,QAAqB,4BAArB;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAA0CC,eAA1C,QAAiE,SAAjE;AACA,SAASC,KAAT,QAAsB,wBAAtB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,OAAO,MAAMC,SAAS,gBAAGlB,KAAK,CAACmB,UAANnB,CACvB,OAWEoB,GAXF,KAYK;EAAA,IAXH;IACEC,oBADF;IAEEC,OAFF;IAGEC,UAHF;IAIEC,cAJF;IAKEC,YALF;IAMEC,QANF;IAOEC,aAPF;IAQE,GAAGC;EARL,CAWG;;EACH;EACA,IAAIX,qBAAqB,CAACW,IAAD,CAAzB,EAAiC;IAC/B,OAAO,IAAP;EACD;;EACD,oBACE5B,oBAAC6B,sBAAD,eACMD,IADN;IAEEE,iBAAiB,EAAET,oBAFrB;IAGEU,KAAK,EACHJ,aAAa,KAAKK,SAAlBL,GACIL,OAAO,CAACW,KAARX,CAAc,CAAdA,EAAiBK,aAAjBL,CADJK,GAEIL,OANR;IAQEY,aAAa,EAAER,QARjB;IASEN,GAAG,EAAEA;EATP,IAWIe,IAAD,IAAe;IACd,IAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4BX,cAAc,KAAKQ,SAAnD,EAA8D;MAC5D,MAAM,IAAII,KAAJ,CAAU,gCAAV,CAAN;IACD;;IAED,IAAID,IAAI,CAACE,EAALF,KAAYH,SAAZG,IAAyBV,YAAY,KAAKO,SAA9C,EAAyD;MACvD,MAAM,IAAII,KAAJ,CAAU,8BAAV,CAAN;IACD;;IAED,MAAME,WAAW,GAAGd,cAAc,GAAGA,cAAc,CAACW,IAAD,CAAjB,GAA0BA,IAA5D;IACA,MAAMI,SAAS,GAAGd,YAAY,GAC1BA,YAAY,CAACU,IAAD,CADc,GAE1BA,IAAI,CAACE,EAALF,KAAYH,SAAZG,GACAA,IAAI,CAACE,EADLF,GAEAG,WAJJ;IAMA,oBACEtC,oBAACS,IAAD;MAAM+B,SAAS,EAAEF,WAAjB;MAA8BG,GAAG,EAAEF;IAAnC,GACGhB,UAAU,GACTA,UAAU,CAACY,IAAD,CADD,gBAGTnC,oBAACU,GAAD;MAAKgC,CAAC,EAAE,CAAR;MAAWC,cAAc,EAAC;IAA1B,gBACE3C,oBAACY,IAAD,QAAO0B,WAAP,CADF,CAJJ,CADF;EA3BJ,EADF;AAlBqB,EAAlB;AA+DP,MAAMT,sBAAsB,gBAAG7B,KAAK,CAACmB,UAANnB,CAC7B,CAAC4C,KAAD,EAAwBxB,GAAxB,KAAsC;EACpC,MAAM,CAACyB,WAAD,IAAgBhC,eAAe,CAAC+B,KAAD,EAAQ9B,eAAR,CAArC;EACA,IAAIgC,KAAK,GAAG5C,gBAAgB,CAAC0C,KAAD,CAA5B;EAEA,IAAIG,UAAU,GAAG/C,KAAK,CAACgD,MAANhD,CAAa,IAAbA,CAAjB;EACA,IAAIiD,QAAQ,GAAGjD,KAAK,CAACgD,MAANhD,CAAa,IAAbA,CAAf;EACA,IAAIkD,UAAU,GAAGlD,KAAK,CAACgD,MAANhD,CAAa,IAAbA,CAAjB;EACA,IAAImD,UAAU,GAAGnD,KAAK,CAACgD,MAANhD,CAAa,IAAbA,CAAjB;EAEA,IAAI;IACFoD,WAAW,EAAEC,YADX;IAEFC,UAFE;IAGFC,YAHE;IAIFC;EAJE,IAKArD,WAAW,CACb,EACE,GAAGyC,KADL;IAEEK,QAFF;IAGEQ,SAAS,EAAEV,UAHb;IAIEG,UAJF;IAKEC,UALF;IAMEO,WAAW,EAAE;EANf,CADa,EASbZ,KATa,CALf;;EAiBA,MAAMa,gBAAgB,GAAG,MAAM;IAC7B,IAAI,OAAOf,KAAK,CAACgB,UAAb,KAA4B,UAAhC,EACE,OAAOhB,KAAK,CAACgB,UAANhB,CAAiB;MACtBiB,MAAM,EAAEf,KAAK,CAACe;IADQ,CAAjBjB,CAAP;IAGF,OAAOA,KAAK,CAACgB,UAAb;EALF;;EAQA,IAAI;IAAER;EAAF,IAAkBnD,SAAS,CAACoD,YAAD,CAA/B;EAEA,oBACErD,oBAACU,GAAD;IAAKoD,aAAa,EAAC;EAAnB,GAA6BjB,WAA7B;IAA0CzB,GAAG,EAAEA;EAA/C,iBACEpB,oBAACU,GAAD;IAAKqD,IAAI,EAAE;EAAX,GACGnB,KAAK,CAACoB,KAANpB,iBACC5C,oBAACY,IAAD,eAAU4C,UAAV;IAAsBS,EAAE,EAAE;EAA1B,IACGrB,KAAK,CAACoB,KADT,CAFJ,eAMEhE,oBAACe,KAAD,eACMuC,UADN;IAEElC,GAAG,EAAE6B,QAFP;IAGEiB,iBAAiB;IAAA;IACf;IACAlE,oBAACW,SAAD,eAAeyC,WAAf;MAA4BhC,GAAG,EAAE2B;IAAjC,IACGY,gBAAgB,EADnB;EALJ,GANF,EAiBGb,KAAK,CAACe,MAANf,iBACC9C,oBAACmE,YAAD,eACMZ,YADN;IAEEL,UAAU,EAAEA,UAFd;IAGEC,UAAU,EAAEA,UAHd;IAIEL,KAAK,EAAEA,KAJT;IAKEkB,KAAK,EAAEpB,KAAK,CAACoB;EALf,GAlBJ,CADF,CADF;AArC2B,EAA/B;;AA+EA,SAASG,YAAT,CAAsBvB,KAAtB,EAA4C;EAC1C,IAAI;IAAEO,UAAF;IAAcD,UAAd;IAA0BJ,KAA1B;IAAiCsB,cAAjC;IAAiDJ;EAAjD,IAA2DpB,KAA/D;EAEA,IAAI;IAAEW;EAAF,IAAmBnD,UAAU,CAC/B;IACE4D,KADF;IAEEK,SAAS,EAAEvB,KAAK,CAACwB,aAFnB;IAGEC,sBAAsB,EAAE;EAH1B,CAD+B,EAM/BzB,KAN+B,EAO/BI,UAP+B,CAAjC;EAUA,oBACElD,oBAACU,GAAD;IAAKU,GAAG,EAAE+B;EAAV,gBACEnD,oBAACU,GAAD;IAAK8D,QAAQ,EAAC,UAAd;IAAyBC,KAAK,EAAC,MAA/B;IAAsCC,SAAS,EAAEN,cAAF,SAAEA,kBAAF,WAAEA,oBAAkB;EAAnE,gBACEpE,oBAACM,UAAD,eACMiD,YADN;IAEEoB,yBAAyB,EAAC,SAF5B;IAGEvD,GAAG,EAAGwD,IAAD,IAAU;MACb,IAAIpE,QAAQ,CAACqE,EAATrE,KAAgB,KAApB,EAA2B;QACzB0C,UAAU,CAAC4B,OAAX5B,GAAqB3C,cAAc,CAACqE,IAAD,CAAnC1B;MADF,OAEO;QACLA,UAAU,CAAC4B,OAAX5B,GAAqB0B,IAArB1B;MACD;IACF;EATH,IAWG,CAAC,GAAGJ,KAAK,CAACiC,UAAV,EAAsBC,GAAtB,CAA2B7C,IAAD,iBACzBnC,oBAACiF,MAAD;IAAQxC,GAAG,EAAEN,IAAI,CAACM,GAAlB;IAAuBN,IAAI,EAAEA,IAA7B;IAAmCW,KAAK,EAAEA;EAA1C,EADD,CAXH,CADF,CADF,CADF;AAqBD;;AAED,SAASmC,MAAT,QAA2E;EAAA,IAA3D;IAAE9C,IAAF;IAAQW;EAAR,CAA2D;EACzE,MAAMoC,eAAe,GAAGlE,aAAa,CAAC,qBAAD,EAAwB,EAAxB,CAArC;EAEA,IAAII,GAAG,GAAGpB,KAAK,CAACgD,MAANhD,CAAa,IAAbA,CAAV;EACA,IAAImF,UAAU,GAAGrC,KAAK,CAACsC,YAANtC,CAAmBuC,GAAnBvC,CAAuBX,IAAI,CAACM,GAA5BK,CAAjB;EACA,IAAIwC,UAAU,GAAGxC,KAAK,CAACyC,gBAANzC,CAAuBwC,UAAvBxC,CAAkCX,IAAI,CAACM,GAAvCK,CAAjB;EACA,IAAI0C,SAAS,GAAG1C,KAAK,CAACyC,gBAANzC,CAAuB2C,UAAvB3C,KAAsCX,IAAI,CAACM,GAA3D;EAEA,IAAI;IAAEiD;EAAF,IAAkBrF,SAAS,CAC7B;IACEoC,GAAG,EAAEN,IAAI,CAACM,GADZ;IAEE0C,UAFF;IAGEG,UAHF;IAIEK,kBAAkB,EAAE,IAJtB;IAKEC,qBAAqB,EAAE;EALzB,CAD6B,EAQ7B9C,KAR6B,EAS7B1B,GAT6B,CAA/B;EAYA,IAAIyE,eAAe,GAAGX,eAAe,CAACW,eAAtC;EACA,IAAIC,OAAO,GAAG,CAAd;;EAEA,IAAIR,UAAJ,EAAgB;IACdO,eAAe,GAAGX,eAAe,CAACa,MAAhBb,CAAuBW,eAAzCA;EADF,OAEO,IAAIL,SAAJ,EAAe;IACpBK,eAAe,GAAGX,eAAe,CAACa,MAAhBb,CAAuBW,eAAzCA;EADK,OAEA,IAAIV,UAAJ,EAAgB;IACrBW,OAAO,GAAG,GAAVA;IACAD,eAAe,GAAGX,eAAe,CAACc,SAAhBd,CAA0BW,eAA5CA;EACD;;EAED,oBACE7F,oBAACW,SAAD,eACM+E,WADN;IAEEI,OAAO,EAAEA,OAFX;IAGEG,MAAM,EACJd,UAAU,GAAI3E,QAAQ,CAACqE,EAATrE,KAAgB,KAAhBA,GAAwB,aAAxBA,GAAwC,IAA5C,GAAoD,IAJlE;IAMEqF,eAAe,EAAEA,eANnB;IAOEzE,GAAG,EAAEA;EAPP,IASGe,IAAI,CAAC+D,QATR,CADF;AAaD","names":["React","useButton","useComboBoxState","useComboBox","useListBox","useOption","ScrollView","findNodeHandle","Platform","Item","Box","Pressable","Text","extractInObject","layoutPropsList","Input","useThemeProps","useHasResponsiveProps","Typeahead","forwardRef","ref","onSelectedItemChange","options","renderItem","getOptionLabel","getOptionKey","onChange","numberOfItems","rest","ComboBoxImplementation","onSelectionChange","items","undefined","slice","onInputChange","item","Error","id","optionLabel","optionKey","textValue","key","p","justifyContent","props","layoutProps","state","triggerRef","useRef","inputRef","listBoxRef","popoverRef","buttonProps","triggerProps","inputProps","listBoxProps","labelProps","buttonRef","menuTrigger","toggleIconSetter","toggleIcon","isOpen","flexDirection","flex","label","pb","InputRightElement","ListBoxPopup","dropdownHeight","autoFocus","focusStrategy","disallowEmptySelection","position","width","maxHeight","keyboardShouldPersistTaps","node","OS","current","collection","map","Option","searchItemStyle","isDisabled","disabledKeys","has","isSelected","selectionManager","isFocused","focusedKey","optionProps","shouldFocusOnHover","shouldUseVirtualFocus","backgroundColor","opacity","_focus","_disabled","cursor","rendered"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Typeahead/Typeahead.tsx"],"sourcesContent":["import React from 'react';\nimport { useButton } from '@react-native-aria/button';\nimport { ComboBoxState, useComboBoxState } from '@react-stately/combobox';\nimport { useComboBox } from '@react-native-aria/combobox';\nimport { useListBox, useOption } from '@react-native-aria/listbox';\nimport { ScrollView, findNodeHandle, Platform } from 'react-native';\nimport { Item } from '@react-stately/collections';\nimport Box from '../../primitives/Box';\nimport { Pressable } from '../../primitives/Pressable';\nimport Text from '../../primitives/Text';\nimport { extractInObject } from '../../../theme/tools';\nimport { ITypeaheadProps, IComboBoxProps, layoutPropsList } from './types';\nimport { Input } from '../../primitives/Input';\nimport { useThemeProps } from '../../../hooks';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const Typeahead = React.forwardRef(\n  (\n    {\n      onSelectedItemChange,\n      options,\n      renderItem,\n      getOptionLabel,\n      getOptionKey,\n      onChange,\n      numberOfItems,\n      ...rest\n    }: ITypeaheadProps,\n    ref?: any\n  ) => {\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(rest)) {\n      return null;\n    }\n    return (\n      <ComboBoxImplementation\n        {...rest}\n        onSelectionChange={onSelectedItemChange}\n        items={\n          numberOfItems !== undefined\n            ? options.slice(0, numberOfItems)\n            : options\n        }\n        onInputChange={onChange}\n        ref={ref}\n      >\n        {(item: any) => {\n          if (typeof item !== 'string' && getOptionLabel === undefined) {\n            throw new Error('Please use getOptionLabel prop');\n          }\n\n          if (item.id === undefined && getOptionKey === undefined) {\n            throw new Error('Please use getOptionKey prop');\n          }\n\n          const optionLabel = getOptionLabel ? getOptionLabel(item) : item;\n          const optionKey = getOptionKey\n            ? getOptionKey(item)\n            : item.id !== undefined\n            ? item.id\n            : optionLabel;\n\n          return (\n            <Item textValue={optionLabel} key={optionKey}>\n              {renderItem ? (\n                renderItem(item)\n              ) : (\n                <Box p={2} justifyContent=\"center\">\n                  <Text>{optionLabel}</Text>\n                </Box>\n              )}\n            </Item>\n          );\n        }}\n      </ComboBoxImplementation>\n    );\n  }\n);\n\nconst ComboBoxImplementation = React.forwardRef(\n  (props: IComboBoxProps, ref?: any) => {\n    const [layoutProps] = extractInObject(props, layoutPropsList);\n    let state = useComboBoxState(props);\n\n    let triggerRef = React.useRef(null);\n    let inputRef = React.useRef(null);\n    let listBoxRef = React.useRef(null);\n    let popoverRef = React.useRef(null);\n\n    let {\n      buttonProps: triggerProps,\n      inputProps,\n      listBoxProps,\n      labelProps,\n    } = useComboBox(\n      {\n        ...props,\n        inputRef,\n        buttonRef: triggerRef,\n        listBoxRef,\n        popoverRef,\n        menuTrigger: 'input',\n      },\n      state\n    );\n\n    const toggleIconSetter = () => {\n      if (typeof props.toggleIcon === 'function')\n        return props.toggleIcon({\n          isOpen: state.isOpen,\n        });\n      return props.toggleIcon;\n    };\n\n    let { buttonProps } = useButton(triggerProps);\n\n    return (\n      <Box flexDirection=\"row\" {...layoutProps} ref={ref}>\n        <Box flex={1}>\n          {props.label && (\n            <Text {...labelProps} pb={1}>\n              {props.label}\n            </Text>\n          )}\n          <Input\n            {...inputProps}\n            ref={inputRef}\n            InputRightElement={\n              // @ts-ignore - RN has hitSlop type inconsistent for View and Pressable!\n              <Pressable {...buttonProps} ref={triggerRef}>\n                {toggleIconSetter()}\n              </Pressable>\n            }\n          />\n\n          {state.isOpen && (\n            <ListBoxPopup\n              {...listBoxProps}\n              listBoxRef={listBoxRef}\n              popoverRef={popoverRef}\n              state={state}\n              label={props.label}\n            />\n          )}\n        </Box>\n      </Box>\n    );\n  }\n);\n\ntype IListBoxProps = {\n  popoverRef: any;\n  listBoxRef: any;\n  state: ComboBoxState<any>;\n  dropdownHeight: number;\n  label: string;\n};\n\nfunction ListBoxPopup(props: IListBoxProps) {\n  let { popoverRef, listBoxRef, state, dropdownHeight, label } = props;\n\n  let { listBoxProps } = useListBox(\n    {\n      label,\n      autoFocus: state.focusStrategy,\n      disallowEmptySelection: true,\n    },\n    state,\n    listBoxRef\n  );\n\n  return (\n    <Box ref={popoverRef}>\n      <Box position=\"absolute\" width=\"100%\" maxHeight={dropdownHeight ?? 200}>\n        <ScrollView\n          {...listBoxProps}\n          keyboardShouldPersistTaps=\"handled\"\n          ref={(node) => {\n            if (Platform.OS === 'web') {\n              listBoxRef.current = findNodeHandle(node);\n            } else {\n              listBoxRef.current = node;\n            }\n          }}\n        >\n          {[...state.collection].map((item) => (\n            <Option key={item.key} item={item} state={state} />\n          ))}\n        </ScrollView>\n      </Box>\n    </Box>\n  );\n}\n\nfunction Option({ item, state }: { item: any; state: ComboBoxState<any> }) {\n  const searchItemStyle = useThemeProps('TypeAheadSearchItem', {});\n\n  let ref = React.useRef(null);\n  let isDisabled = state.disabledKeys.has(item.key);\n  let isSelected = state.selectionManager.isSelected(item.key);\n  let isFocused = state.selectionManager.focusedKey === item.key;\n\n  let { optionProps } = useOption(\n    {\n      key: item.key,\n      isDisabled,\n      isSelected,\n      shouldFocusOnHover: true,\n      shouldUseVirtualFocus: true,\n    },\n    state,\n    ref\n  );\n\n  let backgroundColor = searchItemStyle.backgroundColor;\n  let opacity = 1;\n\n  if (isSelected) {\n    backgroundColor = searchItemStyle._focus.backgroundColor;\n  } else if (isFocused) {\n    backgroundColor = searchItemStyle._focus.backgroundColor;\n  } else if (isDisabled) {\n    opacity = 0.6;\n    backgroundColor = searchItemStyle._disabled.backgroundColor;\n  }\n\n  return (\n    <Pressable\n      {...optionProps}\n      opacity={opacity}\n      cursor={\n        isDisabled ? (Platform.OS === 'web' ? 'not-allowed' : null) : null\n      }\n      backgroundColor={backgroundColor}\n      ref={ref}\n    >\n      {item.rendered}\n    </Pressable>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}