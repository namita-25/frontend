{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Stack } from '../Stack';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport { useRadioGroupState } from '@react-stately/radio';\nimport { useRadioGroup } from '@react-native-aria/radio';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nexport const RadioContext = /*#__PURE__*/React.createContext({});\nconst RadioWrapper = /*#__PURE__*/memo(props => {\n  const resolvedProps = usePropsResolution('RadioGroup', props);\n  return /*#__PURE__*/React.createElement(Stack, _extends({}, resolvedProps, props.radioGroupProps, props));\n});\n\nconst RadioGroup = (_ref, ref) => {\n  let {\n    size,\n    colorScheme,\n    _radio,\n    children,\n    ...props\n  } = _ref;\n  const formControlContext = useFormControlContext();\n  const state = useRadioGroupState(props);\n  const radioGroupState = useRadioGroup({ ...formControlContext,\n    ...props,\n    'aria-label': props.accessibilityLabel\n  }, state);\n  const [propsState] = React.useState(props);\n  const contextValue = React.useMemo(() => {\n    return {\n      formControlContext,\n      size,\n      colorScheme,\n      ..._radio,\n      state\n    };\n  }, [size, colorScheme, formControlContext, state, _radio]);\n  const radioGroupProps = React.useMemo(() => radioGroupState.radioGroupProps, // eslint-disable-next-line react-hooks/exhaustive-deps\n  []); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps({ ...props,\n    size,\n    colorScheme\n  })) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(RadioContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(RadioWrapper, _extends({}, radioGroupProps, propsState, {\n    ref: ref\n  }), children));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(RadioGroup));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,qBAAT,QAAsC,8BAAtC;AAEA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AAEA,OAAO,MAAMC,YAAY,gBAAGT,KAAK,CAACU,aAANV,CAC1B,EAD0BA,CAArB;AAGP,MAAMW,YAAY,gBAAGV,IAAI,CAAEW,KAAD,IAAgB;EACxC,MAAMC,aAAa,GAAGL,kBAAkB,CAAC,YAAD,EAAeI,KAAf,CAAxC;EACA,oBAAOZ,oBAACG,KAAD,eAAWU,aAAX,EAA8BD,KAAK,CAACE,eAApC,EAAyDF,KAAzD,EAAP;AAFuB,EAAzB;;AAKA,MAAMG,UAAU,GAAG,OAEjBC,GAFiB,KAGd;EAAA,IAFH;IAAEC,IAAF;IAAQC,WAAR;IAAqBC,MAArB;IAA6BC,QAA7B;IAAuC,GAAGR;EAA1C,CAEG;EACH,MAAMS,kBAAkB,GAAGjB,qBAAqB,EAAhD;EAEA,MAAMkB,KAAK,GAAGjB,kBAAkB,CAACO,KAAD,CAAhC;EACA,MAAMW,eAAe,GAAGjB,aAAa,CACnC,EAAE,GAAGe,kBAAL;IAAyB,GAAGT,KAA5B;IAAmC,cAAcA,KAAK,CAACY;EAAvD,CADmC,EAEnCF,KAFmC,CAArC;EAIA,MAAM,CAACG,UAAD,IAAezB,KAAK,CAAC0B,QAAN1B,CAAeY,KAAfZ,CAArB;EACA,MAAM2B,YAAiB,GAAG3B,KAAK,CAAC4B,OAAN5B,CAAc,MAAM;IAC5C,OAAO;MACLqB,kBADK;MAELJ,IAFK;MAGLC,WAHK;MAIL,GAAGC,MAJE;MAKLG;IALK,CAAP;EADwB,GAQvB,CAACL,IAAD,EAAOC,WAAP,EAAoBG,kBAApB,EAAwCC,KAAxC,EAA+CH,MAA/C,CARuBnB,CAA1B;EAUA,MAAMc,eAAe,GAAGd,KAAK,CAAC4B,OAAN5B,CACtB,MAAMuB,eAAe,CAACT,eADAd,EAEtB;EACA,EAHsBA,CAAxB,CAnBG,CAyBH;;EACA,IAAIO,qBAAqB,CAAC,EAAE,GAAGK,KAAL;IAAYK,IAAZ;IAAkBC;EAAlB,CAAD,CAAzB,EAA4D;IAC1D,OAAO,IAAP;EACD;;EAED,oBACElB,oBAACS,YAAD,CAAcoB,QAAd;IAAuBC,KAAK,EAAEH;EAA9B,gBACE3B,oBAACW,YAAD,eAAkBG,eAAlB,EAAuCW,UAAvC;IAAmDT,GAAG,EAAEA;EAAxD,IACGI,QADH,CADF,CADF;AAjCF;;AA0CA,4BAAenB,IAAI,eAACC,UAAU,CAACa,UAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Stack","useFormControlContext","useRadioGroupState","useRadioGroup","useHasResponsiveProps","usePropsResolution","RadioContext","createContext","RadioWrapper","props","resolvedProps","radioGroupProps","RadioGroup","ref","size","colorScheme","_radio","children","formControlContext","state","radioGroupState","accessibilityLabel","propsState","useState","contextValue","useMemo","Provider","value"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Radio/RadioGroup.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Stack } from '../Stack';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport type { IRadioContext, IRadioGroupProps } from './types';\nimport { useRadioGroupState } from '@react-stately/radio';\nimport { useRadioGroup } from '@react-native-aria/radio';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\n\nexport const RadioContext = React.createContext<IRadioContext>(\n  {} as IRadioContext\n);\nconst RadioWrapper = memo((props: any) => {\n  const resolvedProps = usePropsResolution('RadioGroup', props);\n  return <Stack {...resolvedProps} {...props.radioGroupProps} {...props} />;\n});\n\nconst RadioGroup = (\n  { size, colorScheme, _radio, children, ...props }: IRadioGroupProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const state = useRadioGroupState(props);\n  const radioGroupState = useRadioGroup(\n    { ...formControlContext, ...props, 'aria-label': props.accessibilityLabel },\n    state\n  );\n  const [propsState] = React.useState(props);\n  const contextValue: any = React.useMemo(() => {\n    return {\n      formControlContext,\n      size,\n      colorScheme,\n      ..._radio,\n      state,\n    };\n  }, [size, colorScheme, formControlContext, state, _radio]);\n\n  const radioGroupProps = React.useMemo(\n    () => radioGroupState.radioGroupProps,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, size, colorScheme })) {\n    return null;\n  }\n\n  return (\n    <RadioContext.Provider value={contextValue}>\n      <RadioWrapper {...radioGroupProps} {...propsState} ref={ref}>\n        {children}\n      </RadioWrapper>\n    </RadioContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(RadioGroup));\n"]},"metadata":{},"sourceType":"module"}