{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { default as Box } from '../Box';\nimport { getSpacedChildren } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { ResponsiveQueryContext } from '../../../utils/useResponsiveQuery/ResponsiveQueryProvider';\n\nconst Stack = (_ref, ref) => {\n  let {\n    space,\n    ...props\n  } = _ref;\n  const dir = props.direction;\n  const {\n    children,\n    direction,\n    reversed,\n    divider,\n    size,\n    ...resolvedProps\n  } = usePropsResolution('Stack', { ...props,\n    size: space\n  }, {\n    isDisabled: props.isDisabled,\n    isHovered: props.isHovered,\n    isFocused: props.isFocused,\n    isInvalid: props.isInvalid,\n    isReadOnly: props.isReadOnly\n  }, {\n    resolveResponsively: ['space', 'direction']\n  });\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries; //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    flexDirection: dir\n  }, resolvedProps, {\n    ref: ref // @ts-ignore\n    ,\n    gap: disableCSSMediaQueries ? undefined : size\n  }), getSpacedChildren(children, size, direction === 'row' ? 'X' : 'Y', reversed ? 'reverse' : 'normal', divider));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Stack));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,OAAO,IAAIC,GAApB,QAAkD,QAAlD;AACA,SAASC,iBAAT,QAAkC,gBAAlC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,SAASC,sBAAT,QAAuC,2DAAvC;;AAgDA,MAAMC,KAAK,GAAG,OAAmCC,GAAnC,KAAiD;EAAA,IAAhD;IAAEC,KAAF;IAAS,GAAGC;EAAZ,CAAgD;EAC7D,MAAMC,GAAG,GAAGD,KAAK,CAACE,SAAlB;EACA,MAAM;IACJC,QADI;IAEJD,SAFI;IAGJE,QAHI;IAIJC,OAJI;IAKJC,IALI;IAMJ,GAAGC;EANC,IAOGb,kBAAkB,CACzB,OADyB,EAEzB,EAAE,GAAGM,KAAL;IAAYM,IAAI,EAAEP;EAAlB,CAFyB,EAGzB;IACES,UAAU,EAAER,KAAK,CAACQ,UADpB;IAEEC,SAAS,EAAET,KAAK,CAACS,SAFnB;IAGEC,SAAS,EAAEV,KAAK,CAACU,SAHnB;IAIEC,SAAS,EAAEX,KAAK,CAACW,SAJnB;IAKEC,UAAU,EAAEZ,KAAK,CAACY;EALpB,CAHyB,EAUzB;IAAEC,mBAAmB,EAAE,CAAC,OAAD,EAAU,WAAV;EAAvB,CAVyB,CAP3B;EAoBA,MAAMC,sBAAsB,GAAG1B,KAAK,CAAC2B,UAAN3B,CAAiBQ,sBAAjBR,CAA/B;EACA,MAAM4B,sBAAsB,GAAGF,sBAAsB,CAACE,sBAAtD,CAvB6D,CAyB7D;;EACA,IAAIrB,qBAAqB,CAACK,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EAED,oBACEZ,oBAACI,GAAD;IACEyB,aAAa,EAAEhB;EADjB,GAEMM,aAFN;IAGET,GAAG,EAAEA,GAHP,CAIE;IAJF;IAKEoB,GAAG,EAAEF,sBAAsB,GAAGG,SAAH,GAAeb;EAL5C,IAOGb,iBAAiB,CAChBU,QADgB,EAEhBG,IAFgB,EAGhBJ,SAAS,KAAK,KAAdA,GAAsB,GAAtBA,GAA4B,GAHZ,EAIhBE,QAAQ,GAAG,SAAH,GAAe,QAJP,EAKhBC,OALgB,CAPpB,CADF;AA9BF;;AAiDA,4BAAehB,IAAI,eAACC,UAAU,CAACO,KAAD,CAAX,CAAnB","names":["React","memo","forwardRef","default","Box","getSpacedChildren","usePropsResolution","useHasResponsiveProps","ResponsiveQueryContext","Stack","ref","space","props","dir","direction","children","reversed","divider","size","resolvedProps","isDisabled","isHovered","isFocused","isInvalid","isReadOnly","resolveResponsively","responsiveQueryContext","useContext","disableCSSMediaQueries","flexDirection","gap","undefined"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Stack/Stack.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { default as Box, InterfaceBoxProps } from '../Box';\nimport { getSpacedChildren } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { CustomProps, ResponsiveValue, SpaceType } from '../../types';\nimport { ResponsiveQueryContext } from '../../../utils/useResponsiveQuery/ResponsiveQueryProvider';\n\nexport interface InterfaceStackProps extends InterfaceBoxProps<IStackProps> {\n  /**\n   * The divider element to use between elements.\n   */\n  divider?: JSX.Element;\n  /**\n   * The space between each stack item. Accepts Responsive values\n   */\n  space?: ResponsiveValue<\n    'gutter' | '2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | SpaceType\n  >;\n  /**\n   * Determines whether to reverse the direction of Stack Items.\n   */\n  reversed?: boolean;\n  /**\n   * The direction of the Stack Items.\n   * @default column\n   */\n  direction?: ResponsiveValue<\n    'column' | 'row' | 'column-reverse' | 'row-reverse'\n  >;\n  /**\n   * If true, the Stack will be in hovered state.\n   */\n  isHovered?: boolean;\n  /**\n   * If true, the Stack will be focused.\n   */\n  isFocused?: boolean;\n  /**\n   * If true, the Stack will be disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * If true, the Stack will be invalid.\n   */\n  isInvalid?: boolean;\n  /**\n   * If true, prevents the value of the children from being edited. Used with FormControls.\n   */\n  isReadOnly?: boolean;\n}\n\nexport type IStackProps = InterfaceStackProps & CustomProps<'Stack'>;\n\nconst Stack = ({ space, ...props }: IStackProps, ref?: any) => {\n  const dir = props.direction;\n  const {\n    children,\n    direction,\n    reversed,\n    divider,\n    size,\n    ...resolvedProps\n  }: any = usePropsResolution(\n    'Stack',\n    { ...props, size: space },\n    {\n      isDisabled: props.isDisabled,\n      isHovered: props.isHovered,\n      isFocused: props.isFocused,\n      isInvalid: props.isInvalid,\n      isReadOnly: props.isReadOnly,\n    },\n    { resolveResponsively: ['space', 'direction'] }\n  );\n\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      flexDirection={dir}\n      {...resolvedProps}\n      ref={ref}\n      // @ts-ignore\n      gap={disableCSSMediaQueries ? undefined : size}\n    >\n      {getSpacedChildren(\n        children,\n        size,\n        direction === 'row' ? 'X' : 'Y',\n        reversed ? 'reverse' : 'normal',\n        divider\n      )}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Stack));\n"]},"metadata":{},"sourceType":"module"}