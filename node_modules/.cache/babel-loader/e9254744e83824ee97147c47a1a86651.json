{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport Box from '../../primitives/Box';\nimport { AccordionContext, AccordionItemContext } from './Context';\nimport { useThemeProps } from '../../../hooks';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AccordionItem = (_ref, ref) => {\n  let {\n    children,\n    index: pIndex = 0,\n    isDisabled,\n    ...props\n  } = _ref;\n  const {\n    index: cIndex,\n    changeHandler\n  } = React.useContext(AccordionContext);\n  const { ...newProps\n  } = useThemeProps('AccordionItem', props);\n  const isOpen = cIndex === null || cIndex === void 0 ? void 0 : cIndex.includes(pIndex);\n\n  const onClose = cb => {\n    changeHandler && changeHandler(false, pIndex);\n    cb && cb();\n  };\n\n  const onOpen = cb => {\n    changeHandler && changeHandler(true, pIndex);\n    cb && cb();\n  };\n\n  const childSetter = () => {\n    if (typeof children === 'function') return children({\n      isExpanded: isOpen,\n      isDisabled\n    });\n    return children;\n  }; //TODO: refactor for responsive prop\n\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(AccordionItemContext.Provider, {\n    value: {\n      index: pIndex,\n      isOpen,\n      isDisabled,\n      onClose,\n      onOpen\n    }\n  }, /*#__PURE__*/React.createElement(Box, _extends({}, newProps, {\n    ref: ref\n  }), childSetter()));\n};\n\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(AccordionItem));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,SAASC,gBAAT,EAA2BC,oBAA3B,QAAuD,WAAvD;AAEA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,aAAa,GAAG,OAEpBC,GAFoB,KAGjB;EAAA,IAFH;IAAEC,QAAF;IAAYC,KAAK,EAAEC,MAAM,GAAG,CAA5B;IAA+BC,UAA/B;IAA2C,GAAGC;EAA9C,CAEG;EACH,MAAM;IACJH,KAAK,EAAEI,MADH;IAEJC;EAFI,IAGsBd,KAAK,CAACe,UAANf,CAAiBE,gBAAjBF,CAH5B;EAIA,MAAM,EAAE,GAAGgB;EAAL,IAAkBZ,aAAa,CAAC,eAAD,EAAkBQ,KAAlB,CAArC;EAEA,MAAMK,MAAM,GAAGJ,MAAH,SAAGA,UAAH,WAAGA,GAAH,MAAGA,SAAM,CAAEK,QAARL,CAAiBH,MAAjBG,CAAf;;EACA,MAAMM,OAAO,GAAIC,EAAD,IAAqB;IACnCN,aAAa,IAAIA,aAAa,CAAC,KAAD,EAAQJ,MAAR,CAA9BI;IACAM,EAAE,IAAIA,EAAE,EAARA;EAFF;;EAIA,MAAMC,MAAM,GAAID,EAAD,IAAqB;IAClCN,aAAa,IAAIA,aAAa,CAAC,IAAD,EAAOJ,MAAP,CAA9BI;IACAM,EAAE,IAAIA,EAAE,EAARA;EAFF;;EAIA,MAAME,WAAW,GAAG,MAAM;IACxB,IAAI,OAAOd,QAAP,KAAoB,UAAxB,EACE,OAAOA,QAAQ,CAAC;MAAEe,UAAU,EAAEN,MAAd;MAAsBN;IAAtB,CAAD,CAAf;IACF,OAAOH,QAAP;EAHF,EAhBG,CAqBH;;;EACA,IAAIH,qBAAqB,CAACO,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBACEZ,oBAACG,oBAAD,CAAsBqB,QAAtB;IACEC,KAAK,EAAE;MACLhB,KAAK,EAAEC,MADF;MAELO,MAFK;MAGLN,UAHK;MAILQ,OAJK;MAKLE;IALK;EADT,gBASErB,oBAACC,GAAD,eAASe,QAAT;IAAmBT,GAAG,EAAEA;EAAxB,IACGe,WAAW,EADd,CATF,CADF;AA5BF;;AA6CA,4BAAetB,KAAK,CAAC0B,IAAN1B,eAAWA,KAAK,CAAC2B,UAAN3B,CAAiBM,aAAjBN,CAAXA,CAAf","names":["React","Box","AccordionContext","AccordionItemContext","useThemeProps","useHasResponsiveProps","AccordionItem","ref","children","index","pIndex","isDisabled","props","cIndex","changeHandler","useContext","newProps","isOpen","includes","onClose","cb","onOpen","childSetter","isExpanded","Provider","value","memo","forwardRef"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Accordion/AccordionItem.tsx"],"sourcesContent":["import React from 'react';\nimport Box from '../../primitives/Box';\nimport { AccordionContext, AccordionItemContext } from './Context';\nimport type { IAccordionItemProps, IAccordionContextProps } from './types';\nimport { useThemeProps } from '../../../hooks';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AccordionItem = (\n  { children, index: pIndex = 0, isDisabled, ...props }: IAccordionItemProps,\n  ref?: any\n) => {\n  const {\n    index: cIndex,\n    changeHandler,\n  }: IAccordionContextProps = React.useContext(AccordionContext);\n  const { ...newProps } = useThemeProps('AccordionItem', props);\n\n  const isOpen = cIndex?.includes(pIndex);\n  const onClose = (cb?: () => void) => {\n    changeHandler && changeHandler(false, pIndex);\n    cb && cb();\n  };\n  const onOpen = (cb?: () => void) => {\n    changeHandler && changeHandler(true, pIndex);\n    cb && cb();\n  };\n  const childSetter = () => {\n    if (typeof children === 'function')\n      return children({ isExpanded: isOpen, isDisabled });\n    return children;\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <AccordionItemContext.Provider\n      value={{\n        index: pIndex,\n        isOpen,\n        isDisabled,\n        onClose,\n        onOpen,\n      }}\n    >\n      <Box {...newProps} ref={ref}>\n        {childSetter()}\n      </Box>\n    </AccordionItemContext.Provider>\n  );\n};\n\nexport default React.memo(React.forwardRef(AccordionItem));\n"]},"metadata":{},"sourceType":"module"}