{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Box } from '../../primitives';\nimport { WarningIcon, WarningTwoIcon, InfoIcon, CheckCircleIcon } from '../../primitives/Icon/Icons';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { AlertContext } from './Context';\nimport { omitUndefined } from '../../../theme/tools/utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertIcon = (_ref, ref) => {\n  let {\n    children,\n    ...props\n  } = _ref;\n  let newProps = usePropsResolution('AlertIcon', props);\n  newProps = omitUndefined(newProps);\n  const {\n    status,\n    _icon\n  } = React.useContext(AlertContext);\n\n  const getIcon = () => {\n    switch (status) {\n      case 'error':\n        return /*#__PURE__*/React.createElement(WarningTwoIcon, _extends({}, _icon, newProps, {\n          ref: ref\n        }));\n\n      case 'warning':\n        return /*#__PURE__*/React.createElement(WarningIcon, _extends({}, _icon, newProps, {\n          ref: ref\n        }));\n\n      case 'success':\n        return /*#__PURE__*/React.createElement(CheckCircleIcon, _extends({}, _icon, newProps, {\n          ref: ref\n        }));\n\n      default:\n        return /*#__PURE__*/React.createElement(InfoIcon, _extends({}, _icon, newProps, {\n          ref: ref\n        }));\n    }\n  }; //TODO: refactor for responsive prop\n\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, null, children || getIcon());\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(AlertIcon));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,GAAT,QAAoB,kBAApB;AACA,SACEC,WADF,EAEEC,cAFF,EAGEC,QAHF,EAIEC,eAJF,QAKO,6BALP;AAOA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,SAAS,GAAG,OAA0CC,GAA1C,KAAwD;EAAA,IAAvD;IAAEC,QAAF;IAAY,GAAGC;EAAf,CAAuD;EACxE,IAAIC,QAAQ,GAAGR,kBAAkB,CAAC,WAAD,EAAcO,KAAd,CAAjC;EACAC,QAAQ,GAAGN,aAAa,CAACM,QAAD,CAAxBA;EACA,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAAmClB,KAAK,CAACmB,UAANnB,CAAiBS,YAAjBT,CAAzC;;EACA,MAAMoB,OAAO,GAAG,MAAM;IACpB,QAAQH,MAAR;MACE,KAAK,OAAL;QACE,oBAAOjB,oBAACK,cAAD,eAAoBa,KAApB,EAA+BF,QAA/B;UAAyCH,GAAG,EAAEA;QAA9C,GAAP;;MACF,KAAK,SAAL;QACE,oBAAOb,oBAACI,WAAD,eAAiBc,KAAjB,EAA4BF,QAA5B;UAAsCH,GAAG,EAAEA;QAA3C,GAAP;;MACF,KAAK,SAAL;QACE,oBAAOb,oBAACO,eAAD,eAAqBW,KAArB,EAAgCF,QAAhC;UAA0CH,GAAG,EAAEA;QAA/C,GAAP;;MACF;QACE,oBAAOb,oBAACM,QAAD,eAAcY,KAAd,EAAyBF,QAAzB;UAAmCH,GAAG,EAAEA;QAAxC,GAAP;IARJ;EADF,EAJwE,CAgBxE;;;EACA,IAAIF,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBAAOf,oBAACG,GAAD,QAAMW,QAAQ,IAAIM,OAAO,EAAzB,CAAP;AApBF;;AAsBA,4BAAenB,IAAI,eAACC,UAAU,CAACU,SAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Box","WarningIcon","WarningTwoIcon","InfoIcon","CheckCircleIcon","usePropsResolution","AlertContext","omitUndefined","useHasResponsiveProps","AlertIcon","ref","children","props","newProps","status","_icon","useContext","getIcon"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Alert/AlertIcon.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box } from '../../primitives';\nimport {\n  WarningIcon,\n  WarningTwoIcon,\n  InfoIcon,\n  CheckCircleIcon,\n} from '../../primitives/Icon/Icons';\nimport type { IAlertContext, IAlertIconProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { AlertContext } from './Context';\nimport { omitUndefined } from '../../../theme/tools/utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertIcon = ({ children, ...props }: IAlertIconProps, ref?: any) => {\n  let newProps = usePropsResolution('AlertIcon', props);\n  newProps = omitUndefined(newProps);\n  const { status, _icon }: IAlertContext = React.useContext(AlertContext);\n  const getIcon = () => {\n    switch (status) {\n      case 'error':\n        return <WarningTwoIcon {..._icon} {...newProps} ref={ref} />;\n      case 'warning':\n        return <WarningIcon {..._icon} {...newProps} ref={ref} />;\n      case 'success':\n        return <CheckCircleIcon {..._icon} {...newProps} ref={ref} />;\n      default:\n        return <InfoIcon {..._icon} {...newProps} ref={ref} />;\n    }\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <Box>{children || getIcon()}</Box>;\n};\nexport default memo(forwardRef(AlertIcon));\n"]},"metadata":{},"sourceType":"module"}