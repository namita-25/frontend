{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { mergeRefs } from '../../../utils';\nimport { Pressable } from '../Pressable'; // import { useHover } from '@react-native-aria/interactions';\n\nimport { extractInObject } from '../../../theme/tools';\nimport { composeEventHandlers } from '../../../utils';\nimport { useHover, useFocus, useIsPressed } from '../../primitives/Pressable/Pressable';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst ListItem = (_ref2, ref) => {\n  let {\n    children,\n    ...props\n  } = _ref2;\n  const {\n    hoverProps,\n    isHovered\n  } = useHover();\n  const {\n    pressableProps,\n    isPressed\n  } = useIsPressed();\n  const {\n    focusProps,\n    isFocused\n  } = useFocus();\n  const {\n    index,\n    start,\n    unordered,\n    ul,\n    ordered,\n    ol,\n    _text,\n    borderTopWidth,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('ListItem', props, {\n    isHovered,\n    isPressed,\n    isFocused\n  });\n\n  const _ref = React.useRef(null); // const { isHovered } = useHover({}, _ref);\n  //TODO: refactor for responsive prop\n\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  } // Extracting Pressable Props from resolvedProps\n\n\n  const [pressableComponentProps, nonPressableProps] = extractInObject(resolvedProps, ['onPress', 'unstable_pressDelay', 'android_ripple', 'android_disableSound', 'delayLongPress', 'hitSlop', 'disabled', 'onLongPress', 'onPressIn', 'onPressOut', 'pressRetentionOffset', 'testOnly_pressed', 'onHoverIn', 'onHoverOut', 'onFocus', 'onBlur', '_pressed', '_focus']);\n  return Object.keys(pressableComponentProps).length !== 0 ?\n  /*#__PURE__*/\n  // Checking if any Pressable Props present\n  React.createElement(Pressable, _extends({\n    accessibilityRole: \"button\",\n    accessibilityLabel: \"List-Item-\".concat(index + start),\n    flexDirection: \"row\",\n    alignItems: \"center\"\n  }, resolvedProps, {\n    onPressIn: composeEventHandlers(onPressIn, pressableProps.onPressIn),\n    onPressOut: composeEventHandlers(onPressOut, pressableProps.onPressOut) // @ts-ignore - web only\n    ,\n    onHoverIn: composeEventHandlers(onHoverIn, hoverProps.onHoverIn) // @ts-ignore - web only\n    ,\n    onHoverOut: composeEventHandlers(onHoverOut, hoverProps.onHoverOut) // @ts-ignore - web only\n    ,\n    onFocus: composeEventHandlers(composeEventHandlers(onFocus, focusProps.onFocus) // focusRingProps.onFocu\n    ) // @ts-ignore - web only\n    ,\n    onBlur: composeEventHandlers(composeEventHandlers(onBlur, focusProps.onBlur) // focusRingProps.onBlur\n    ),\n    borderTopWidth: index ? borderTopWidth : 0,\n    ref: ref\n  }), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    pl: 2\n  }, ul || unordered ?\n  /*#__PURE__*/\n  //Adding disc in front of ListItem\n  React.createElement(Box, {\n    style: {\n      transform: [{\n        scale: 1.5\n      }]\n    },\n    mr: 2 // _text={{\n    //   fontWeight: 'bold',\n    //   ..._text,\n    //   ...hoverTextProps,\n    //   ...focusTextProps,\n    //   ...pressedTextProps,\n    // }}\n\n  }, \"\\u2022\") : null, ol || ordered ?\n  /*#__PURE__*/\n  //Adding index number in front of ListItem\n  React.createElement(Box, {\n    mr: 2 // _text={{\n    //   fontWeight: 'bold',\n    //   ..._text,\n    //   ...hoverTextProps,\n    //   ...focusTextProps,\n    //   ...pressedTextProps,\n    // }}\n\n  }, index + start + '.') : null), /*#__PURE__*/React.createElement(Box, {\n    flexDirection: \"row\",\n    alignItems: \"center\" // _text={{\n    //   ..._text,\n    //   ...hoverTextProps,\n    //   ...focusTextProps,\n    //   ...pressedTextProps,\n    // }}\n\n  }, children))) :\n  /*#__PURE__*/\n  // If no Pressable Props passed by user render Box instead of Pressable\n  React.createElement(Box, _extends({\n    accessibilityRole: \"text\",\n    accessibilityLabel: \"List-Item-\".concat(index + start),\n    flexDirection: \"row\",\n    alignItems: \"center\"\n  }, nonPressableProps, {\n    borderTopWidth: index ? borderTopWidth : 0,\n    ref: mergeRefs([ref, _ref])\n  }, isHovered && resolvedProps._hover, isPressed && resolvedProps._pressed, isFocused && resolvedProps._focus), /*#__PURE__*/React.createElement(Box, {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    pl: 2\n  }, ul || unordered ?\n  /*#__PURE__*/\n  //Adding disc in front of ListItem\n  React.createElement(Box, {\n    style: {\n      transform: [{\n        scale: 1.5\n      }]\n    },\n    mr: 2,\n    _text: {\n      fontWeight: 'bold',\n      ..._text\n    }\n  }, \"\\u2022\") : null, ol || ordered ?\n  /*#__PURE__*/\n  //Adding index number in front of ListItem\n  React.createElement(Box, {\n    mr: 2,\n    _text: {\n      fontWeight: 'bold',\n      ..._text\n    }\n  }, index + start + '.') : null), /*#__PURE__*/React.createElement(Box, {\n    flex: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    _text: _text // ...(isHovered && _hover?._text && { ..._hover._text }),\n\n  }, children));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(ListItem));","map":{"version":3,"mappings":"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","names":["React","memo","forwardRef","Box","usePropsResolution","mergeRefs","Pressable","extractInObject","composeEventHandlers","useHover","useFocus","useIsPressed","useHasResponsiveProps","ListItem","ref","children","props","hoverProps","isHovered","pressableProps","isPressed","focusProps","isFocused","index","start","unordered","ul","ordered","ol","_text","borderTopWidth","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","resolvedProps","_ref","useRef","pressableComponentProps","nonPressableProps","Object","keys","length","accessibilityRole","accessibilityLabel","flexDirection","alignItems","pl","style","transform","scale","mr","_hover","_pressed","_focus","fontWeight","flex"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/List/ListItem.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport type { IListItemProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { mergeRefs } from '../../../utils';\nimport { Pressable } from '../Pressable';\n// import { useHover } from '@react-native-aria/interactions';\nimport { extractInObject } from '../../../theme/tools';\nimport { composeEventHandlers } from '../../../utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst ListItem = ({ children, ...props }: IListItemProps, ref: any) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const {\n    index,\n    start,\n    unordered,\n    ul,\n    ordered,\n    ol,\n    _text,\n    borderTopWidth,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('ListItem', props, {\n    isHovered,\n    isPressed,\n    isFocused,\n  });\n  const _ref = React.useRef(null);\n  // const { isHovered } = useHover({}, _ref);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  // Extracting Pressable Props from resolvedProps\n  const [\n    pressableComponentProps,\n    nonPressableProps,\n  ] = extractInObject(resolvedProps, [\n    'onPress',\n    'unstable_pressDelay',\n    'android_ripple',\n    'android_disableSound',\n    'delayLongPress',\n    'hitSlop',\n    'disabled',\n    'onLongPress',\n    'onPressIn',\n    'onPressOut',\n    'pressRetentionOffset',\n    'testOnly_pressed',\n    'onHoverIn',\n    'onHoverOut',\n    'onFocus',\n    'onBlur',\n    '_pressed',\n    '_focus',\n  ]);\n\n  return Object.keys(pressableComponentProps).length !== 0 ? (\n    // Checking if any Pressable Props present\n    <Pressable\n      accessibilityRole=\"button\"\n      accessibilityLabel={`List-Item-${index + start}`}\n      flexDirection=\"row\"\n      alignItems=\"center\"\n      {...resolvedProps}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus)\n        // focusRingProps.onFocu\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur)\n        // focusRingProps.onBlur\n      )}\n      borderTopWidth={index ? borderTopWidth : 0}\n      ref={ref}\n    >\n      {/* {({ isPressed, isHovered, isFocusVisible }: any) => {\n        const focusTextProps = isFocusVisible &&\n          _focus?._text && { ..._focus._text };\n        const hoverTextProps = isHovered &&\n          _hover?._text && { ..._hover._text };\n        const pressedTextProps = isPressed &&\n          _pressed?._text && { ..._pressed._text };\n        return ( */}\n      <>\n        <Box flexDirection=\"row\" alignItems=\"center\" pl={2}>\n          {ul || unordered ? ( //Adding disc in front of ListItem\n            <Box\n              style={{ transform: [{ scale: 1.5 }] }}\n              mr={2}\n              // _text={{\n              //   fontWeight: 'bold',\n              //   ..._text,\n              //   ...hoverTextProps,\n              //   ...focusTextProps,\n              //   ...pressedTextProps,\n              // }}\n            >\n              •\n            </Box>\n          ) : null}\n          {ol || ordered ? ( //Adding index number in front of ListItem\n            <Box\n              mr={2}\n              // _text={{\n              //   fontWeight: 'bold',\n              //   ..._text,\n              //   ...hoverTextProps,\n              //   ...focusTextProps,\n              //   ...pressedTextProps,\n              // }}\n            >\n              {index + start + '.'}\n            </Box>\n          ) : null}\n        </Box>\n        <Box\n          flexDirection=\"row\"\n          alignItems=\"center\"\n          // _text={{\n          //   ..._text,\n          //   ...hoverTextProps,\n          //   ...focusTextProps,\n          //   ...pressedTextProps,\n          // }}\n        >\n          {children}\n        </Box>\n      </>\n      {/* ); */}\n      {/* }} */}\n    </Pressable>\n  ) : (\n    // If no Pressable Props passed by user render Box instead of Pressable\n    <Box\n      accessibilityRole=\"text\"\n      accessibilityLabel={`List-Item-${index + start}`}\n      flexDirection=\"row\"\n      alignItems=\"center\"\n      {...nonPressableProps}\n      borderTopWidth={index ? borderTopWidth : 0}\n      ref={mergeRefs([ref, _ref])}\n      {...(isHovered && resolvedProps._hover)}\n      {...(isPressed && resolvedProps._pressed)}\n      {...(isFocused && resolvedProps._focus)}\n    >\n      <Box flexDirection=\"row\" alignItems=\"center\" pl={2}>\n        {ul || unordered ? ( //Adding disc in front of ListItem\n          <Box\n            style={{ transform: [{ scale: 1.5 }] }}\n            mr={2}\n            _text={{ fontWeight: 'bold', ..._text }}\n          >\n            •\n          </Box>\n        ) : null}\n        {ol || ordered ? ( //Adding index number in front of ListItem\n          <Box mr={2} _text={{ fontWeight: 'bold', ..._text }}>\n            {index + start + '.'}\n          </Box>\n        ) : null}\n      </Box>\n      <Box\n        flex={1}\n        flexDirection=\"row\"\n        alignItems=\"center\"\n        _text={\n          _text\n          // ...(isHovered && _hover?._text && { ..._hover._text }),\n        }\n      >\n        {children}\n      </Box>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(ListItem));\n"]},"metadata":{},"sourceType":"module"}