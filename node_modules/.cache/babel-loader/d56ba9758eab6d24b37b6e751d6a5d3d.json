{"ast":null,"code":"import { memo } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useBreakpointValue, useTheme, useToken } from '../../../hooks';\nimport { useColorMode } from '../../../core/color-mode/hooks';\nimport { Platform } from 'react-native';\nexport function Hidden(_ref) {\n  let {\n    children,\n    ...props\n  } = _ref;\n  const {\n    from,\n    till,\n    only,\n    platform,\n    colorMode\n  } = usePropsResolution('Hidden', props, {}, {\n    ignoreProps: ['only', 'platform']\n  });\n  const {\n    breakpoints\n  } = useTheme();\n  const currentColorMode = useColorMode();\n  const breakpointValueObject = Object.keys(breakpoints).reduce((obj, val) => {\n    obj[val] = val;\n    return obj;\n  }, {});\n  const breakpointValue = useBreakpointValue(breakpointValueObject);\n  const [currentBreakpointValue] = useToken('breakpoints', [breakpointValue]);\n  const [fromBreakPointValue] = useToken('breakpoints', [from]);\n  const [tillBreakPointValue] = useToken('breakpoints', [till]); //if no prop is passed, it will hide the element wrapped with hidden\n\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  } //if from and till prop exists, it will hide the element wrapped accordingly\n  else if (from && till && currentBreakpointValue >= fromBreakPointValue && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  } //if from prop exists, it will hide the element wrapped starting from that breakpoint.\n  else if (from && !till && currentBreakpointValue >= fromBreakPointValue) {\n    return null;\n  } //if till prop exists, it will hide the element wrapped starting from  0 till that breakpoint.\n  else if (till && !from && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  } //if only prop exists and is array, check that array consists current breakpoint value, and if that exists, hide on that breakpoint to next breakpoint.\n  // if only prop is string, hide on that breakpoint to next breakpoint.\n  else if (Array.isArray(only) && only.includes(breakpointValue) || only === breakpointValue) {\n    return null;\n  } //if platform prop exists and is array, check that array consists current platform value, and if that exists, hide on that platform.\n  // if platform prop is string, hide on that platform.\n  else if (Array.isArray(platform) && platform.includes(Platform.OS) || platform === Platform.OS) {\n    return null;\n  } //if colormode prop is valid string, hide on that colormode.\n  else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n\n  return children;\n}\nexport default /*#__PURE__*/memo(Hidden);","map":{"version":3,"mappings":"AAAA,SAASA,IAAT,QAAqB,OAArB;AAEA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,kBAAT,EAA6BC,QAA7B,EAAuCC,QAAvC,QAAuD,gBAAvD;AACA,SAASC,YAAT,QAA6B,gCAA7B;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA,OAAO,SAASC,MAAT,OAAsD;EAAA,IAAtC;IAAEC,QAAF;IAAY,GAAGC;EAAf,CAAsC;EAC3D,MAAM;IAAEC,IAAF;IAAQC,IAAR;IAAcC,IAAd;IAAoBC,QAApB;IAA8BC;EAA9B,IAA4Cb,kBAAkB,CAClE,QADkE,EAElEQ,KAFkE,EAGlE,EAHkE,EAIlE;IACEM,WAAW,EAAE,CAAC,MAAD,EAAS,UAAT;EADf,CAJkE,CAApE;EAQA,MAAM;IAAEC;EAAF,IAAkBb,QAAQ,EAAhC;EACA,MAAMc,gBAAgB,GAAGZ,YAAY,EAArC;EAEA,MAAMa,qBAAqB,GAAGC,MAAM,CAACC,IAAPD,CAAYH,WAAZG,EAAyBE,MAAzBF,CAC5B,CAACG,GAAD,EAAWC,GAAX,KAA2B;IACzBD,GAAG,CAACC,GAAD,CAAHD,GAAWC,GAAXD;IACA,OAAOA,GAAP;EAH0B,GAK5B,EAL4BH,CAA9B;EAOA,MAAMK,eAAe,GAAGtB,kBAAkB,CAACgB,qBAAD,CAA1C;EACA,MAAM,CAACO,sBAAD,IAA2BrB,QAAQ,CAAC,aAAD,EAAgB,CAACoB,eAAD,CAAhB,CAAzC;EACA,MAAM,CAACE,mBAAD,IAAwBtB,QAAQ,CAAC,aAAD,EAAgB,CAACM,IAAD,CAAhB,CAAtC;EACA,MAAM,CAACiB,mBAAD,IAAwBvB,QAAQ,CAAC,aAAD,EAAgB,CAACO,IAAD,CAAhB,CAAtC,CAtB2D,CAwB3D;;EACA,IAAI,CAACD,IAAD,IAAS,CAACC,IAAV,IAAkB,CAACC,IAAnB,IAA2B,CAACE,SAA5B,IAAyC,CAACD,QAA9C,EAAwD;IACtD,OAAO,IAAP;EADF,EAIA;EAJA,KAKK,IACHH,IAAI,IACJC,IADAD,IAEAe,sBAAsB,IAAIC,mBAF1BhB,IAGAe,sBAAsB,GAAGE,mBAJtB,EAKH;IACA,OAAO,IAAP;EANG,EASL;EATK,KAUA,IAAIjB,IAAI,IAAI,CAACC,IAATD,IAAiBe,sBAAsB,IAAIC,mBAA/C,EAAoE;IACvE,OAAO,IAAP;EADG,EAIL;EAJK,KAKA,IAAIf,IAAI,IAAI,CAACD,IAATC,IAAiBc,sBAAsB,GAAGE,mBAA9C,EAAmE;IACtE,OAAO,IAAP;EADG,EAIL;EACA;EALK,KAMA,IACFC,KAAK,CAACC,OAAND,CAAchB,IAAdgB,KAAuBhB,IAAI,CAACkB,QAALlB,CAAcY,eAAdZ,CAAvBgB,IACDhB,IAAI,KAAKY,eAFN,EAGH;IACA,OAAO,IAAP;EAJG,EAML;EACA;EAPK,KAQA,IACFI,KAAK,CAACC,OAAND,CAAcf,QAAde,KAA2Bf,QAAQ,CAACiB,QAATjB,CAAkBP,QAAQ,CAACyB,EAA3BlB,CAA3Be,IACDf,QAAQ,KAAKP,QAAQ,CAACyB,EAFnB,EAGH;IACA,OAAO,IAAP;EAJG,EAML;EANK,KAOA,IAAIjB,SAAS,KAAKG,gBAAgB,CAACH,SAAnC,EAA8C;IACjD,OAAO,IAAP;EACD;;EACD,OAAON,QAAP;AACD;AAED,4BAAeR,IAAI,CAACO,MAAD,CAAnB","names":["memo","usePropsResolution","useBreakpointValue","useTheme","useToken","useColorMode","Platform","Hidden","children","props","from","till","only","platform","colorMode","ignoreProps","breakpoints","currentColorMode","breakpointValueObject","Object","keys","reduce","obj","val","breakpointValue","currentBreakpointValue","fromBreakPointValue","tillBreakPointValue","Array","isArray","includes","OS"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Hidden/index.tsx"],"sourcesContent":["import { memo } from 'react';\nimport type { IHiddenProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useBreakpointValue, useTheme, useToken } from '../../../hooks';\nimport { useColorMode } from '../../../core/color-mode/hooks';\nimport { Platform } from 'react-native';\n\nexport function Hidden({ children, ...props }: IHiddenProps) {\n  const { from, till, only, platform, colorMode } = usePropsResolution(\n    'Hidden',\n    props,\n    {},\n    {\n      ignoreProps: ['only', 'platform'],\n    }\n  );\n  const { breakpoints } = useTheme();\n  const currentColorMode = useColorMode();\n\n  const breakpointValueObject = Object.keys(breakpoints).reduce(\n    (obj: any, val: string) => {\n      obj[val] = val;\n      return obj;\n    },\n    {}\n  );\n  const breakpointValue = useBreakpointValue(breakpointValueObject);\n  const [currentBreakpointValue] = useToken('breakpoints', [breakpointValue]);\n  const [fromBreakPointValue] = useToken('breakpoints', [from]);\n  const [tillBreakPointValue] = useToken('breakpoints', [till]);\n\n  //if no prop is passed, it will hide the element wrapped with hidden\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  }\n\n  //if from and till prop exists, it will hide the element wrapped accordingly\n  else if (\n    from &&\n    till &&\n    currentBreakpointValue >= fromBreakPointValue &&\n    currentBreakpointValue < tillBreakPointValue\n  ) {\n    return null;\n  }\n\n  //if from prop exists, it will hide the element wrapped starting from that breakpoint.\n  else if (from && !till && currentBreakpointValue >= fromBreakPointValue) {\n    return null;\n  }\n\n  //if till prop exists, it will hide the element wrapped starting from  0 till that breakpoint.\n  else if (till && !from && currentBreakpointValue < tillBreakPointValue) {\n    return null;\n  }\n\n  //if only prop exists and is array, check that array consists current breakpoint value, and if that exists, hide on that breakpoint to next breakpoint.\n  // if only prop is string, hide on that breakpoint to next breakpoint.\n  else if (\n    (Array.isArray(only) && only.includes(breakpointValue)) ||\n    only === breakpointValue\n  ) {\n    return null;\n  }\n  //if platform prop exists and is array, check that array consists current platform value, and if that exists, hide on that platform.\n  // if platform prop is string, hide on that platform.\n  else if (\n    (Array.isArray(platform) && platform.includes(Platform.OS)) ||\n    platform === Platform.OS\n  ) {\n    return null;\n  }\n  //if colormode prop is valid string, hide on that colormode.\n  else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n  return children;\n}\n\nexport default memo(Hidden);\nexport type { IHiddenProps };\n"]},"metadata":{},"sourceType":"module"}