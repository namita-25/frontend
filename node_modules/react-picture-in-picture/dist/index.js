'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var propTypes = _interopDefault(require('prop-types'));
var React = require('react');
var React__default = _interopDefault(React);

var ReactPictureInPicture = function ReactPictureInPicture(_ref) {
  var _ref$id = _ref.id,
      id = _ref$id === undefined ? 'videopip' : _ref$id,
      callBackSuccessOnEnable = _ref.callBackSuccessOnEnable,
      callBackSuccessOnDisable = _ref.callBackSuccessOnDisable,
      _ref$isActive = _ref.isActive,
      isActive = _ref$isActive === undefined ? false : _ref$isActive,
      style = _ref.style,
      className = _ref.className,
      _ref$autoplay = _ref.autoplay,
      autoplay = _ref$autoplay === undefined ? false : _ref$autoplay,
      _ref$controls = _ref.controls,
      controls = _ref$controls === undefined ? true : _ref$controls,
      _ref$loop = _ref.loop,
      loop = _ref$loop === undefined ? false : _ref$loop,
      children = _ref.children,
      _ref$muted = _ref.muted,
      muted = _ref$muted === undefined ? false : _ref$muted,
      classOnEnable = _ref.classOnEnable;

  ReactPictureInPicture.propTypes = {
    /** set a custom id to the video player (#videopip by default) (not required) */
    id: propTypes.string,
    /** state that allow to turn on or of the pip mode */
    isActive: propTypes.bool,
    /** function that would be called if the media where successfully go to pip mode (not required) */
    callBackSuccessOnEnable: propTypes.func,
    /** function called when the pip mode is successfully disabled */
    callBackSuccessOnDisable: propTypes.func,
    /** style that would be apply to the video element (not required) */
    style: propTypes.object,
    /** className that would be apply to the video element (not required)  */
    className: propTypes.string,
    /** enable autoplay on the video player (not required) */
    autoplay: propTypes.bool,
    /** enable or not video controls  */
    controls: propTypes.bool,
    /** children element that can be include between the <video></video> element */
    children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node]),
    /** enable loop play on the video */
    loop: propTypes.bool,
    /** mute the video player sound */
    muted: propTypes.bool,
    /** css class that would be activate on the video player when pip mode is enable */
    classOnEnable: propTypes.string
    /**
     * toggle the video player in pip mode 
     */
  };var togglePIP = function togglePIP() {
    var player = document.getElementById(id);
    if (player.readyState === 4) {
      // if video is ready to play
      if (document.pictureInPictureElement && !isActive) {
        // if document is already on pip mod
        document.exitPictureInPicture() // disable pip
        .then(function () {
          if (callBackSuccessOnDisable) {
            // call the success disable callback if set
            callBackSuccessOnDisable();
          }
        });
      } else {
        player.requestPictureInPicture().then(function () {
          // pip enabled successfully
          if (callBackSuccessOnEnable) {
            // call the success enable callbakc if set
            callBackSuccessOnEnable();
          }
        });
      }
    }
  };
  /**
   * Handle pip status when isActive is updated
   */
  React.useEffect(function () {
    togglePIP();
  }, [isActive]);

  return React__default.createElement(
    'video',
    { id: id, className: className + ' ' + (isActive ? classOnEnable : '') + ' ', style: style, controls: controls, autoPlay: autoplay, loop: loop, muted: muted },
    children
  );
};

module.exports = ReactPictureInPicture;
//# sourceMappingURL=index.js.map
