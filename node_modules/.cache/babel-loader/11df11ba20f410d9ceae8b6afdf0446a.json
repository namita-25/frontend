{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport get from 'lodash.get';\nimport React from 'react';\nimport { Animated, Easing, StyleSheet } from 'react-native';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useTheme, useThemeProps } from '../../../hooks';\nimport { canUseDom } from '../../../utils';\nimport { default as Box } from '../../primitives/Box';\nimport { themeTools } from '../../../theme';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst StyleAnimatedView = makeStyledComponent(Animated.View);\n\nconst CircularProgress = (_ref, ref) => {\n  let {\n    value,\n    isIndeterminate,\n    max,\n    min,\n    ...props\n  } = _ref;\n  const theme = useTheme();\n  const isDomUsable = canUseDom();\n\n  if (min) {\n    value = value - min;\n  }\n\n  let sizeProps;\n  let newProps = useThemeProps('CircularProgress', props);\n  let [, remainingProps] = themeTools.extractInObject(props, ['size']); // removing size from props so that Box don't accept size passed for CircularProgress\n\n  if (!newProps.size) {\n    sizeProps = {\n      height: newProps.height,\n      width: newProps.width\n    };\n  } else {\n    sizeProps = {\n      height: newProps.size,\n      width: newProps.size\n    };\n  } // fetching size from theme for passing into style prop\n\n\n  const themeHeight = get(theme, 'space.' + sizeProps.height);\n  const themeWidth = get(theme, 'space.' + sizeProps.width);\n  const styleSize = {\n    height: themeHeight ? parseInt(themeHeight.slice(themeHeight.Length, -2), 10) : sizeProps.height,\n    width: themeWidth ? parseInt(themeWidth.slice(themeWidth.Length, -2), 10) : sizeProps.width\n  };\n  const defaultThickness = newProps.thickness;\n  const degree = new Animated.Value(0);\n\n  if (isIndeterminate) {\n    if (isDomUsable) {\n      Animated.loop(Animated.timing(degree, {\n        toValue: 1,\n        duration: 600,\n        easing: Easing.linear,\n        useNativeDriver: false\n      })).start();\n    }\n  }\n\n  const [viewHeight, setViewHeight] = React.useState(0);\n\n  const layout = e => {\n    let height = e.nativeEvent.layout.height;\n    setViewHeight(height);\n  };\n\n  const defaultStyling = {\n    borderBottomLeftRadius: viewHeight / 2,\n    borderBottomRightRadius: viewHeight / 2,\n    borderTopLeftRadius: viewHeight / 2,\n    borderTopRightRadius: viewHeight / 2,\n    borderLeftWidth: defaultThickness,\n    borderBottomWidth: defaultThickness,\n    position: 'absolute',\n    borderLeftColor: 'transparent',\n    borderBottomColor: 'transparent',\n    ...styleSize\n  };\n  const styles = StyleSheet.create({\n    firstProgressLayer: {\n      borderTopWidth: defaultThickness,\n      borderRightWidth: defaultThickness,\n      ...defaultStyling,\n      transform: [{\n        rotateZ: '-135deg'\n      }]\n    },\n    secondProgressLayer: {\n      borderTopWidth: defaultThickness,\n      borderRightWidth: defaultThickness,\n      ...defaultStyling,\n      transform: [{\n        rotateZ: '45deg'\n      }]\n    },\n    offsetLayer: {\n      borderTopWidth: defaultThickness,\n      borderRightWidth: defaultThickness,\n      ...defaultStyling,\n      borderRadius: viewHeight / 2,\n      transform: [{\n        rotateZ: '-135deg'\n      }]\n    },\n    animateStyle: {\n      borderTopWidth: defaultThickness,\n      borderRightWidth: defaultThickness,\n      ...defaultStyling,\n      transform: [{\n        rotateZ: degree.interpolate({\n          inputRange: [0, 1],\n          outputRange: ['0deg', '360deg']\n        })\n      }]\n    }\n  });\n  let halfSide = (max ? min ? max - min : max : 100) / 2; // calculating the halfvalue of the progress according to min and max\n\n  const propStyle = (percent, base_degrees) => {\n    const rotateBy = base_degrees + percent * 180 / halfSide;\n    return {\n      transform: [{\n        rotateZ: rotateBy + 'deg'\n      }]\n    };\n  };\n\n  const renderThirdLayer = percent => {\n    if (percent > halfSide) {\n      return /*#__PURE__*/React.createElement(Box, {\n        borderTopColor: newProps.color,\n        borderRightColor: newProps.color,\n        style: [styles.secondProgressLayer, propStyle(percent - halfSide, 45)]\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(Box, {\n        borderTopColor: newProps.trackColor,\n        borderRightColor: newProps.trackColor,\n        style: styles.offsetLayer\n      });\n    }\n  };\n\n  let firstProgressLayerStyle;\n\n  if (value > halfSide) {\n    firstProgressLayerStyle = propStyle(halfSide, -135);\n  } else {\n    firstProgressLayerStyle = propStyle(value, -135);\n  } //TODO: refactor for responsive prop\n\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, _extends({}, sizeProps, {\n    rounded: viewHeight / 2,\n    borderWidth: defaultThickness,\n    borderColor: newProps.trackColor,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }, remainingProps, {\n    ref: ref,\n    accessible: true,\n    accessibilityRole: \"progressbar\",\n    accessibilityValue: {\n      min,\n      max,\n      now: value\n    }\n  }), !isIndeterminate ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, {\n    onLayout: layout,\n    borderTopColor: newProps.color,\n    borderRightColor: newProps.color,\n    style: [styles.firstProgressLayer, firstProgressLayerStyle]\n  }), renderThirdLayer(value), /*#__PURE__*/React.createElement(Box, {\n    _text: newProps._text\n  }, remainingProps.children)) : /*#__PURE__*/React.createElement(StyleAnimatedView, {\n    onLayout: layout,\n    borderTopColor: newProps.color,\n    borderRightColor: newProps.color,\n    style: styles.animateStyle\n  }));\n};\n\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(CircularProgress));","map":{"version":3,"mappings":"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","names":["get","React","Animated","Easing","StyleSheet","makeStyledComponent","useTheme","useThemeProps","canUseDom","default","Box","themeTools","useHasResponsiveProps","StyleAnimatedView","View","CircularProgress","ref","value","isIndeterminate","max","min","props","theme","isDomUsable","sizeProps","newProps","remainingProps","extractInObject","size","height","width","themeHeight","themeWidth","styleSize","parseInt","slice","Length","defaultThickness","thickness","degree","Value","loop","timing","toValue","duration","easing","linear","useNativeDriver","start","viewHeight","setViewHeight","useState","layout","e","nativeEvent","defaultStyling","borderBottomLeftRadius","borderBottomRightRadius","borderTopLeftRadius","borderTopRightRadius","borderLeftWidth","borderBottomWidth","position","borderLeftColor","borderBottomColor","styles","create","firstProgressLayer","borderTopWidth","borderRightWidth","transform","rotateZ","secondProgressLayer","offsetLayer","borderRadius","animateStyle","interpolate","inputRange","outputRange","halfSide","propStyle","percent","base_degrees","rotateBy","renderThirdLayer","borderTopColor","color","borderRightColor","style","trackColor","firstProgressLayerStyle","rounded","borderWidth","borderColor","justifyContent","alignItems","accessible","accessibilityRole","accessibilityValue","now","onLayout","_text","children","memo","forwardRef"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/CircularProgress/CircularProgress.tsx"],"sourcesContent":["import get from 'lodash.get';\nimport React from 'react';\nimport { Animated, Easing, StyleSheet } from 'react-native';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useTheme, useThemeProps } from '../../../hooks';\nimport { canUseDom } from '../../../utils';\nimport { default as Box } from '../../primitives/Box';\nimport type { ICircularProgressProps } from './types';\nimport { themeTools } from '../../../theme';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyleAnimatedView = makeStyledComponent(Animated.View);\n\nconst CircularProgress = (\n  { value, isIndeterminate, max, min, ...props }: ICircularProgressProps,\n  ref: any\n) => {\n  const theme = useTheme();\n\n  const isDomUsable = canUseDom();\n  if (min) {\n    value = value - min;\n  }\n\n  let sizeProps;\n  let newProps = useThemeProps('CircularProgress', props);\n  let [, remainingProps] = themeTools.extractInObject(props, ['size']); // removing size from props so that Box don't accept size passed for CircularProgress\n\n  if (!newProps.size) {\n    sizeProps = {\n      height: newProps.height,\n      width: newProps.width,\n    };\n  } else {\n    sizeProps = { height: newProps.size, width: newProps.size };\n  }\n  // fetching size from theme for passing into style prop\n  const themeHeight = get(theme, 'space.' + sizeProps.height);\n  const themeWidth = get(theme, 'space.' + sizeProps.width);\n\n  const styleSize = {\n    height: themeHeight\n      ? parseInt(themeHeight.slice(themeHeight.Length, -2), 10)\n      : sizeProps.height,\n    width: themeWidth\n      ? parseInt(themeWidth.slice(themeWidth.Length, -2), 10)\n      : sizeProps.width,\n  };\n\n  const defaultThickness = newProps.thickness;\n  const degree: any = new Animated.Value(0);\n  if (isIndeterminate) {\n    if (isDomUsable) {\n      Animated.loop(\n        Animated.timing(degree, {\n          toValue: 1,\n          duration: 600,\n          easing: Easing.linear,\n          useNativeDriver: false,\n        })\n      ).start();\n    }\n  }\n  const [viewHeight, setViewHeight] = React.useState(0);\n  const layout = (e: any) => {\n    let height = e.nativeEvent.layout.height;\n    setViewHeight(height);\n  };\n\n  const defaultStyling: any = {\n    borderBottomLeftRadius: viewHeight / 2,\n    borderBottomRightRadius: viewHeight / 2,\n    borderTopLeftRadius: viewHeight / 2,\n    borderTopRightRadius: viewHeight / 2,\n    borderLeftWidth: defaultThickness,\n    borderBottomWidth: defaultThickness,\n    position: 'absolute',\n    borderLeftColor: 'transparent',\n    borderBottomColor: 'transparent',\n    ...styleSize,\n  };\n  const styles = StyleSheet.create({\n    firstProgressLayer: {\n      borderTopWidth: defaultThickness,\n      borderRightWidth: defaultThickness,\n      ...defaultStyling,\n      transform: [{ rotateZ: '-135deg' }],\n    },\n    secondProgressLayer: {\n      borderTopWidth: defaultThickness,\n      borderRightWidth: defaultThickness,\n      ...defaultStyling,\n      transform: [{ rotateZ: '45deg' }],\n    },\n    offsetLayer: {\n      borderTopWidth: defaultThickness,\n      borderRightWidth: defaultThickness,\n      ...defaultStyling,\n      borderRadius: viewHeight / 2,\n      transform: [{ rotateZ: '-135deg' }],\n    },\n    animateStyle: {\n      borderTopWidth: defaultThickness,\n      borderRightWidth: defaultThickness,\n      ...defaultStyling,\n      transform: [\n        {\n          rotateZ: degree.interpolate({\n            inputRange: [0, 1],\n            outputRange: ['0deg', '360deg'],\n          }),\n        },\n      ],\n    },\n  });\n  let halfSide = (max ? (min ? max - min : max) : 100) / 2; // calculating the halfvalue of the progress according to min and max\n\n  const propStyle = (percent: number, base_degrees: number) => {\n    const rotateBy = base_degrees + (percent * 180) / halfSide;\n    return {\n      transform: [{ rotateZ: rotateBy + 'deg' }],\n    };\n  };\n\n  const renderThirdLayer = (percent: number) => {\n    if (percent > halfSide) {\n      return (\n        <Box\n          borderTopColor={newProps.color}\n          borderRightColor={newProps.color}\n          style={[\n            styles.secondProgressLayer,\n            propStyle(percent - halfSide, 45),\n          ]}\n        />\n      );\n    } else {\n      return (\n        <Box\n          borderTopColor={newProps.trackColor}\n          borderRightColor={newProps.trackColor}\n          style={styles.offsetLayer}\n        />\n      );\n    }\n  };\n  let firstProgressLayerStyle;\n  if (value > halfSide) {\n    firstProgressLayerStyle = propStyle(halfSide, -135);\n  } else {\n    firstProgressLayerStyle = propStyle(value, -135);\n  }\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...sizeProps}\n      rounded={viewHeight / 2}\n      borderWidth={defaultThickness}\n      borderColor={newProps.trackColor}\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      {...remainingProps}\n      ref={ref}\n      accessible\n      accessibilityRole=\"progressbar\"\n      accessibilityValue={{\n        min,\n        max,\n        now: value,\n      }}\n    >\n      {!isIndeterminate ? (\n        <>\n          <Box\n            onLayout={layout}\n            borderTopColor={newProps.color}\n            borderRightColor={newProps.color}\n            style={[styles.firstProgressLayer, firstProgressLayerStyle]}\n          />\n          {renderThirdLayer(value)}\n          <Box _text={newProps._text}>{remainingProps.children}</Box>\n        </>\n      ) : (\n        <StyleAnimatedView\n          onLayout={layout}\n          borderTopColor={newProps.color}\n          borderRightColor={newProps.color}\n          style={styles.animateStyle}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default React.memo(React.forwardRef(CircularProgress));\n"]},"metadata":{},"sourceType":"module"}