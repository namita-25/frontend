{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport Box from '../Box';\nimport Text from '../Text';\nimport { usePropsResolution } from '../../../hooks';\nimport { useLink } from './useLink';\nimport { mergeRefs } from '../../../utils';\nimport { Pressable } from '../Pressable';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Link = (_ref2, ref) => {\n  let {\n    isHovered: isHoveredProp,\n    ...props\n  } = _ref2;\n\n  const _ref = React.useRef(null);\n\n  const {\n    isHovered\n  } = useHover({}, _ref);\n  const {\n    isUnderlined,\n    children,\n    _text,\n    href,\n    onPress,\n    isExternal,\n    ...resolvedProps\n  } = usePropsResolution('Link', props, {\n    isHovered: isHoveredProp || isHovered\n  });\n  const {\n    linkProps\n  } = useLink({\n    href,\n    onPress,\n    isExternal,\n    _ref\n  });\n  const linkTextProps = {\n    textDecorationLine: isUnderlined ? 'underline' : 'none',\n    ..._text\n  }; // function getHoverProps() {\n  //   let hoverTextProps = {\n  //     ...linkTextProps,\n  //     ..._hover?._text,\n  //   };\n  //   return {\n  //     ...hoverTextProps,\n  //   };\n  // }\n  //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, Platform.OS === 'web' ? /*#__PURE__*/React.createElement(Box, _extends({}, linkProps, resolvedProps, {\n    _text: linkTextProps,\n    ref: mergeRefs([ref, _ref]),\n    flexDirection: \"row\"\n  }), children) : /*#__PURE__*/React.createElement(Pressable, _extends({}, linkProps, resolvedProps, {\n    ref: ref,\n    flexDirection: \"row\"\n  }), React.Children.map(children, child => typeof child === 'string' || typeof child === 'number' ? /*#__PURE__*/React.createElement(Text, _extends({}, resolvedProps._text, linkTextProps), child) : child)));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Link));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,IAAI,GAAG,QAAqDC,GAArD,KAAkE;EAAA,IAAjE;IAAEC,SAAS,EAAEC,aAAb;IAA4B,GAAGC;EAA/B,CAAiE;;EAC7E,MAAMC,IAAI,GAAGjB,KAAK,CAACkB,MAANlB,CAAa,IAAbA,CAAb;;EACA,MAAM;IAAEc;EAAF,IAAgBJ,QAAQ,CAAC,EAAD,EAAKO,IAAL,CAA9B;EACA,MAAM;IACJE,YADI;IAEJC,QAFI;IAGJC,KAHI;IAIJC,IAJI;IAKJC,OALI;IAMJC,UANI;IAOJ,GAAGC;EAPC,IAQFnB,kBAAkB,CAAC,MAAD,EAASU,KAAT,EAAgB;IACpCF,SAAS,EAAEC,aAAa,IAAID;EADQ,CAAhB,CARtB;EAWA,MAAM;IAAEY;EAAF,IAAgBnB,OAAO,CAAC;IAAEe,IAAF;IAAQC,OAAR;IAAiBC,UAAjB;IAA6BP;EAA7B,CAAD,CAA7B;EAEA,MAAMU,aAAa,GAAG;IACpBC,kBAAkB,EAAET,YAAY,GAAG,WAAH,GAAiB,MAD7B;IAEpB,GAAGE;EAFiB,CAAtB,CAhB6E,CAoB7E;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,IAAIV,qBAAqB,CAACK,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBACEhB,0CAEGG,QAAQ,CAAC0B,EAAT1B,KAAgB,KAAhBA,gBACCH,oBAACI,GAAD,eACMsB,SADN,EAEMD,aAFN;IAGEJ,KAAK,EAAEM,aAHT;IAIEd,GAAG,EAAEL,SAAS,CAAC,CAACK,GAAD,EAAMI,IAAN,CAAD,CAJhB;IAKEa,aAAa,EAAC;EALhB,IAOGV,QAPH,CADDjB,gBAWCH,oBAACS,SAAD,eACMiB,SADN,EAEMD,aAFN;IAGEZ,GAAG,EAAEA,GAHP;IAIEiB,aAAa,EAAC;EAJhB,IAMG9B,KAAK,CAAC+B,QAAN/B,CAAegC,GAAfhC,CAAmBoB,QAAnBpB,EAA8BiC,KAAD,IAC5B,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAA9C,gBACEjC,oBAACK,IAAD,eAAUoB,aAAa,CAACJ,KAAxB,EAAmCM,aAAnC,GACGM,KADH,CADF,GAKEA,KANHjC,CANH,CAbJ,CADF;AAjCF;;AAoEA,4BAAeC,IAAI,eAACC,UAAU,CAACU,IAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Platform","Box","Text","usePropsResolution","useLink","mergeRefs","Pressable","useHover","useHasResponsiveProps","Link","ref","isHovered","isHoveredProp","props","_ref","useRef","isUnderlined","children","_text","href","onPress","isExternal","resolvedProps","linkProps","linkTextProps","textDecorationLine","OS","flexDirection","Children","map","child"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Link/index.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport type { ILinkProps } from './types';\nimport Box from '../Box';\nimport Text from '../Text';\nimport { usePropsResolution } from '../../../hooks';\nimport { useLink } from './useLink';\nimport { mergeRefs } from '../../../utils';\nimport { Pressable } from '../Pressable';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Link = ({ isHovered: isHoveredProp, ...props }: ILinkProps, ref: any) => {\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n  const {\n    isUnderlined,\n    children,\n    _text,\n    href,\n    onPress,\n    isExternal,\n    ...resolvedProps\n  } = usePropsResolution('Link', props, {\n    isHovered: isHoveredProp || isHovered,\n  });\n  const { linkProps } = useLink({ href, onPress, isExternal, _ref });\n\n  const linkTextProps = {\n    textDecorationLine: isUnderlined ? 'underline' : 'none',\n    ..._text,\n  };\n  // function getHoverProps() {\n  //   let hoverTextProps = {\n  //     ...linkTextProps,\n  //     ..._hover?._text,\n  //   };\n  //   return {\n  //     ...hoverTextProps,\n  //   };\n  // }\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <>\n      {/* On web we render Link in anchor tag */}\n      {Platform.OS === 'web' ? (\n        <Box\n          {...linkProps}\n          {...resolvedProps}\n          _text={linkTextProps}\n          ref={mergeRefs([ref, _ref])}\n          flexDirection=\"row\"\n        >\n          {children}\n        </Box>\n      ) : (\n        <Pressable\n          {...linkProps}\n          {...resolvedProps}\n          ref={ref}\n          flexDirection=\"row\"\n        >\n          {React.Children.map(children, (child) =>\n            typeof child === 'string' || typeof child === 'number' ? (\n              <Text {...resolvedProps._text} {...linkTextProps}>\n                {child}\n              </Text>\n            ) : (\n              child\n            )\n          )}\n        </Pressable>\n      )}\n    </>\n  );\n};\n\nexport default memo(forwardRef(Link));\nexport type { ILinkProps };\n"]},"metadata":{},"sourceType":"module"}