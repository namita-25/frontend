{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { default as Box } from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps/usePropsResolution';\nexport const InputLeftAddon = /*#__PURE__*/memo(\n/*#__PURE__*/\n//@r\nforwardRef((props, ref) => {\n  const resolvedProps = usePropsResolution('InputLeftAddon', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, _extends({}, resolvedProps, {\n    ref: ref\n  }), props.children);\n}));\nexport const InputRightAddon = /*#__PURE__*/memo( /*#__PURE__*/forwardRef((props, ref) => {\n  const resolvedProps = usePropsResolution('InputRightAddon', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, _extends({}, resolvedProps, {\n    ref: ref\n  }), props.children);\n}));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,OAAO,IAAIC,GAApB,QAA0C,QAA1C;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,kBAAT,QAAmC,iDAAnC;AAEA,OAAO,MAAMC,cAAc,gBAAGN,IAAI;AAAA;AAChC;AACAC,UAAU,CAAC,CAACM,KAAD,EAAmBC,GAAnB,KAAiC;EAC1C,MAAMC,aAAa,GAAGJ,kBAAkB,CAAC,gBAAD,EAAmBE,KAAnB,CAAxC,CAD0C,CAE1C;;EACA,IAAIH,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBACER,oBAACI,GAAD,eAASM,aAAT;IAAwBD,GAAG,EAAEA;EAA7B,IACGD,KAAK,CAACG,QADT,CADF;AANQ,EAFsB,CAA3B;AAeP,OAAO,MAAMC,eAAe,gBAAGX,IAAI,eACjCC,UAAU,CAAC,CAACM,KAAD,EAAmBC,GAAnB,KAAiC;EAC1C,MAAMC,aAAa,GAAGJ,kBAAkB,CAAC,iBAAD,EAAoBE,KAApB,CAAxC,CAD0C,CAE1C;;EACA,IAAIH,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBACER,oBAACI,GAAD,eAASM,aAAT;IAAwBD,GAAG,EAAEA;EAA7B,IACGD,KAAK,CAACG,QADT,CADF;AANQ,EADuB,CAA5B","names":["React","memo","forwardRef","default","Box","useHasResponsiveProps","usePropsResolution","InputLeftAddon","props","ref","resolvedProps","children","InputRightAddon"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Input/InputAddons.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { default as Box, IBoxProps } from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps/usePropsResolution';\n\nexport const InputLeftAddon = memo(\n  //@r\n  forwardRef((props: IBoxProps, ref?: any) => {\n    const resolvedProps = usePropsResolution('InputLeftAddon', props);\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n    return (\n      <Box {...resolvedProps} ref={ref}>\n        {props.children}\n      </Box>\n    );\n  })\n);\nexport const InputRightAddon = memo(\n  forwardRef((props: IBoxProps, ref?: any) => {\n    const resolvedProps = usePropsResolution('InputRightAddon', props);\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n    return (\n      <Box {...resolvedProps} ref={ref}>\n        {props.children}\n      </Box>\n    );\n  })\n);\n"]},"metadata":{},"sourceType":"module"}