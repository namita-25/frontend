{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useTheme } from '../hooks/useTheme';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\nimport { isResponsiveAnyProp } from '../theme/tools';\nexport function useResponsiveSSRProps(incomingProps) {\n  const [modified, setModified] = useState(false);\n  const theme = useTheme();\n  const responsivePropsExists = isResponsiveAnyProp(incomingProps, theme);\n  const isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n  let modifiedProps = incomingProps;\n\n  if (responsivePropsExists && isSSR && !modified) {\n    modifiedProps = { ...modifiedProps,\n      key: Math.random()\n    };\n  }\n\n  useEffect(() => {\n    if (responsivePropsExists && isSSR) {\n      setModified(true);\n    }\n  }, [responsivePropsExists, isSSR]);\n  return modifiedProps;\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,mBAAT,QAAoC,2BAApC;AACA,SAASC,mBAAT,QAAoC,gBAApC;AAEA,OAAO,SAASC,qBAAT,CAA+BC,aAA/B,EAAmD;EACxD,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;EACA,MAAMQ,KAAK,GAAGP,QAAQ,EAAtB;EAEA,MAAMQ,qBAAqB,GAAGN,mBAAmB,CAACE,aAAD,EAAgBG,KAAhB,CAAjD;EACA,MAAME,KAAK,GAAGR,mBAAmB,CAAC,4BAAD,CAAnBA,CAAkDQ,KAAhE;EAEA,IAAIC,aAAa,GAAGN,aAApB;;EACA,IAAII,qBAAqB,IAAIC,KAAzBD,IAAkC,CAACH,QAAvC,EAAiD;IAC/CK,aAAa,GAAG,EAAE,GAAGA,aAAL;MAAoBC,GAAG,EAAEC,IAAI,CAACC,MAALD;IAAzB,CAAhBF;EACD;;EACDZ,SAAS,CAAC,MAAW;IACnB,IAAIU,qBAAqB,IAAIC,KAA7B,EAAoC;MAClCH,WAAW,CAAC,IAAD,CAAXA;IACD;EAHM,GAIN,CAACE,qBAAD,EAAwBC,KAAxB,CAJM,CAATX;EAMA,OAAOY,aAAP;AACD","names":["useEffect","useState","useTheme","useNativeBaseConfig","isResponsiveAnyProp","useResponsiveSSRProps","incomingProps","modified","setModified","theme","responsivePropsExists","isSSR","modifiedProps","key","Math","random"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/hooks/useResponsiveSSRProps.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useTheme } from '../hooks/useTheme';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\nimport { isResponsiveAnyProp } from '../theme/tools';\n\nexport function useResponsiveSSRProps(incomingProps: any) {\n  const [modified, setModified] = useState(false);\n  const theme = useTheme();\n\n  const responsivePropsExists = isResponsiveAnyProp(incomingProps, theme);\n  const isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n\n  let modifiedProps = incomingProps;\n  if (responsivePropsExists && isSSR && !modified) {\n    modifiedProps = { ...modifiedProps, key: Math.random() };\n  }\n  useEffect((): any => {\n    if (responsivePropsExists && isSSR) {\n      setModified(true);\n    }\n  }, [responsivePropsExists, isSSR]);\n\n  return modifiedProps;\n}\n"]},"metadata":{},"sourceType":"module"}