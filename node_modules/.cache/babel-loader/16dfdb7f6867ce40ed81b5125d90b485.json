{"ast":null,"code":"import React, { memo, forwardRef } from 'react';\nimport { ActivityIndicator } from 'react-native';\nimport { usePropsResolution, useStyledSystemPropsResolver } from '../../../hooks';\nimport { getColor } from '../../../theme';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useTheme } from '../../../hooks';\n\nconst Spinner = (props, ref) => {\n  const {\n    color,\n    size,\n    style,\n    testID,\n    ...resolvedProps\n  } = usePropsResolution('Spinner', props);\n  const resolvedColor = getColor(color, useTheme().colors, useTheme());\n  const resolvedStyle = useStyledSystemPropsResolver(resolvedProps); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(ActivityIndicator, {\n    testID: testID,\n    accessible: true,\n    accessibilityLabel: \"loading\",\n    color: resolvedColor,\n    ref: ref,\n    size: size,\n    style: [resolvedStyle, style]\n  });\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Spinner));","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,iBAAT,QAAkC,cAAlC;AACA,SACEC,kBADF,EAEEC,4BAFF,QAGO,gBAHP;AAIA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,QAAT,QAAyB,gBAAzB;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAuBC,GAAvB,KAAoC;EAClD,MAAM;IAAEC,KAAF;IAASC,IAAT;IAAeC,KAAf;IAAsBC,MAAtB;IAA8B,GAAGC;EAAjC,IAAmDZ,kBAAkB,CACzE,SADyE,EAEzEM,KAFyE,CAA3E;EAIA,MAAMO,aAAa,GAAGX,QAAQ,CAACM,KAAD,EAAQJ,QAAQ,GAAGU,MAAnB,EAA2BV,QAAQ,EAAnC,CAA9B;EACA,MAAMW,aAAa,GAAGd,4BAA4B,CAACW,aAAD,CAAlD,CANkD,CAOlD;;EACA,IAAIT,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EAED,oBACEV,oBAACG,iBAAD;IACEY,MAAM,EAAEA,MADV;IAEEK,UAAU,MAFZ;IAGEC,kBAAkB,EAAC,SAHrB;IAIET,KAAK,EAAEK,aAJT;IAKEN,GAAG,EAAEA,GALP;IAMEE,IAAI,EAAEA,IANR;IAOEC,KAAK,EAAE,CAACK,aAAD,EAAgBL,KAAhB;EAPT,EADF;AAZF;;AAyBA,4BAAeb,IAAI,eAACC,UAAU,CAACO,OAAD,CAAX,CAAnB","names":["React","memo","forwardRef","ActivityIndicator","usePropsResolution","useStyledSystemPropsResolver","getColor","useHasResponsiveProps","useTheme","Spinner","props","ref","color","size","style","testID","resolvedProps","resolvedColor","colors","resolvedStyle","accessible","accessibilityLabel"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Spinner/index.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ActivityIndicator } from 'react-native';\nimport {\n  usePropsResolution,\n  useStyledSystemPropsResolver,\n} from '../../../hooks';\nimport { getColor } from '../../../theme';\nimport type { ISpinnerProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useTheme } from '../../../hooks';\n\nconst Spinner = (props: ISpinnerProps, ref: any) => {\n  const { color, size, style, testID, ...resolvedProps } = usePropsResolution(\n    'Spinner',\n    props\n  );\n  const resolvedColor = getColor(color, useTheme().colors, useTheme());\n  const resolvedStyle = useStyledSystemPropsResolver(resolvedProps);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <ActivityIndicator\n      testID={testID}\n      accessible\n      accessibilityLabel=\"loading\"\n      color={resolvedColor}\n      ref={ref}\n      size={size}\n      style={[resolvedStyle, style]}\n    />\n  );\n};\n\nexport default memo(forwardRef(Spinner));\nexport type { ISpinnerProps };\n"]},"metadata":{},"sourceType":"module"}