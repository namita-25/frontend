{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Modal } from '../../composites/Modal';\nimport { usePropsResolution } from '../../../hooks';\nimport { ActionSheetContext } from './ActionSheetContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { Platform } from 'react-native';\n\nconst Actionsheet = (_ref, ref) => {\n  let {\n    children,\n    hideDragIndicator = false,\n    ...props\n  } = _ref;\n  const {\n    isOpen,\n    disableOverlay,\n    onClose,\n    ...resolvedProps\n  } = usePropsResolution('Actionsheet', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  } //Fixing overlay position for Web due to scrollView issue\n\n\n  let overlayStyle = Platform.OS === 'web' ? {\n    position: 'fixed'\n  } : {};\n  return /*#__PURE__*/React.createElement(Modal, _extends({\n    isOpen: isOpen,\n    onClose: onClose\n  }, resolvedProps, {\n    overlayVisible: disableOverlay ? false : true,\n    closeOnOverlayClick: disableOverlay ? false : true,\n    ref: ref,\n    _overlay: {\n      style: overlayStyle\n    }\n  }), /*#__PURE__*/React.createElement(ActionSheetContext.Provider, {\n    value: {\n      hideDragIndicator\n    }\n  }, children));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Actionsheet));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,KAAT,QAAsB,wBAAtB;AAEA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,QAAT,QAAyB,cAAzB;;AAEA,MAAMC,WAAW,GAAG,OAElBC,GAFkB,KAGf;EAAA,IAFH;IAAEC,QAAF;IAAYC,iBAAiB,GAAG,KAAhC;IAAuC,GAAGC;EAA1C,CAEG;EACH,MAAM;IACJC,MADI;IAEJC,cAFI;IAGJC,OAHI;IAIJ,GAAGC;EAJC,IAKFZ,kBAAkB,CAAC,aAAD,EAAgBQ,KAAhB,CALtB,CADG,CAQH;;EACA,IAAIN,qBAAqB,CAACM,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EAVC,EAYH;;;EACA,IAAIK,YAAY,GAAGV,QAAQ,CAACW,EAATX,KAAgB,KAAhBA,GAAwB;IAAEY,QAAQ,EAAE;EAAZ,CAAxBZ,GAAgD,EAAnE;EAEA,oBACEP,oBAACG,KAAD;IACEU,MAAM,EAAEA,MADV;IAEEE,OAAO,EAAEA;EAFX,GAGMC,aAHN;IAIEI,cAAc,EAAEN,cAAc,GAAG,KAAH,GAAW,IAJ3C;IAKEO,mBAAmB,EAAEP,cAAc,GAAG,KAAH,GAAW,IALhD;IAMEL,GAAG,EAAEA,GANP;IAOEa,QAAQ,EAAE;MAAEC,KAAK,EAAEN;IAAT;EAPZ,iBASEjB,oBAACK,kBAAD,CAAoBmB,QAApB;IAA6BC,KAAK,EAAE;MAAEd;IAAF;EAApC,GACGD,QADH,CATF,CADF;AAlBF;;AAmCA,4BAAeT,IAAI,eAACC,UAAU,CAACM,WAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Modal","usePropsResolution","ActionSheetContext","useHasResponsiveProps","Platform","Actionsheet","ref","children","hideDragIndicator","props","isOpen","disableOverlay","onClose","resolvedProps","overlayStyle","OS","position","overlayVisible","closeOnOverlayClick","_overlay","style","Provider","value"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Actionsheet/Actionsheet.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Modal } from '../../composites/Modal';\nimport type { IActionsheetProps } from './types';\nimport { usePropsResolution } from '../../../hooks';\nimport { ActionSheetContext } from './ActionSheetContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { Platform } from 'react-native';\n\nconst Actionsheet = (\n  { children, hideDragIndicator = false, ...props }: IActionsheetProps,\n  ref: any\n) => {\n  const {\n    isOpen,\n    disableOverlay,\n    onClose,\n    ...resolvedProps\n  } = usePropsResolution('Actionsheet', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  //Fixing overlay position for Web due to scrollView issue\n  let overlayStyle = Platform.OS === 'web' ? { position: 'fixed' } : {};\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      {...resolvedProps}\n      overlayVisible={disableOverlay ? false : true}\n      closeOnOverlayClick={disableOverlay ? false : true}\n      ref={ref}\n      _overlay={{ style: overlayStyle }}\n    >\n      <ActionSheetContext.Provider value={{ hideDragIndicator }}>\n        {children}\n      </ActionSheetContext.Provider>\n    </Modal>\n  );\n};\n\nexport default memo(forwardRef(Actionsheet));\n"]},"metadata":{},"sourceType":"module"}