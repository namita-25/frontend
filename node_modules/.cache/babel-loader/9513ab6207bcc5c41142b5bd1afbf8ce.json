{"ast":null,"code":"import { useControlledState } from \"@react-stately/utils\";\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\n\nexport function useCheckboxGroupState(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n  const state = {\n    value: selectedValues,\n\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(values => {\n        if (!values.includes(value)) {\n          return values.concat(value);\n        }\n\n        return values;\n      });\n    },\n\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(values => {\n        if (values.includes(value)) {\n          return values.filter(existingValue => existingValue !== value);\n        }\n\n        return values;\n      });\n    },\n\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(values => {\n        if (values.includes(value)) {\n          return values.filter(existingValue => existingValue !== value);\n        }\n\n        return values.concat(value);\n      });\n    }\n\n  };\n  return state;\n}","map":{"version":3,"mappings":";AAyCA;;;;;OAIO,SAASA,qBAAT,CAA+BC,KAA/B,EAAmF;EAAA,IAApDA,KAAoD;IAApDA,KAAoD,GAAxB,EAA5BA;EAAoD;;EACxF,IAAI,CAACC,cAAD,EAAiBC,QAAjB,IAA6BC,kBAAkB,CAACH,KAAK,CAACI,KAAP,EAAcJ,KAAK,CAACK,YAANL,IAAsB,EAApC,EAAwCA,KAAK,CAACM,QAA9C,CAAnD;EAEA,MAAMC,KAAyB,GAAG;IAChCH,KAAK,EAAEH,cADyB;;IAEhCC,QAAQ,CAACE,KAAD,EAAQ;MACd,IAAIJ,KAAK,CAACQ,UAANR,IAAoBA,KAAK,CAACS,UAA9B,EAA0C;QACxC;MACD;;MAEDP,QAAQ,CAACE,KAAD,CAARF;IAP8B;;IAShCO,UAAU,EAAET,KAAK,CAACS,UAANT,IAAoB,KATA;IAUhCQ,UAAU,EAAER,KAAK,CAACQ,UAANR,IAAoB,KAVA;;IAWhCU,UAAU,CAACN,KAAD,EAAQ;MAChB,OAAOH,cAAc,CAACU,QAAfV,CAAwBG,KAAxBH,CAAP;IAZ8B;;IAchCW,QAAQ,CAACR,KAAD,EAAQ;MACd,IAAIJ,KAAK,CAACQ,UAANR,IAAoBA,KAAK,CAACS,UAA9B,EAA0C;QACxC;MACD;;MACDP,QAAQ,CAACW,MAAM,IAAI;QACjB,IAAI,CAACA,MAAM,CAACF,QAAPE,CAAgBT,KAAhBS,CAAL,EAA6B;UAC3B,OAAOA,MAAM,CAACC,MAAPD,CAAcT,KAAdS,CAAP;QACD;;QACD,OAAOA,MAAP;MAJM,EAARX;IAlB8B;;IAyBhCa,WAAW,CAACX,KAAD,EAAQ;MACjB,IAAIJ,KAAK,CAACQ,UAANR,IAAoBA,KAAK,CAACS,UAA9B,EAA0C;QACxC;MACD;;MACDP,QAAQ,CAACW,MAAM,IAAI;QACjB,IAAIA,MAAM,CAACF,QAAPE,CAAgBT,KAAhBS,CAAJ,EAA4B;UAC1B,OAAOA,MAAM,CAACG,MAAPH,CAAcI,aAAa,IAAIA,aAAa,KAAKb,KAAjDS,CAAP;QACD;;QACD,OAAOA,MAAP;MAJM,EAARX;IA7B8B;;IAoChCgB,WAAW,CAACd,KAAD,EAAQ;MACjB,IAAIJ,KAAK,CAACQ,UAANR,IAAoBA,KAAK,CAACS,UAA9B,EAA0C;QACxC;MACD;;MACDP,QAAQ,CAACW,MAAM,IAAI;QACjB,IAAIA,MAAM,CAACF,QAAPE,CAAgBT,KAAhBS,CAAJ,EAA4B;UAC1B,OAAOA,MAAM,CAACG,MAAPH,CAAcI,aAAa,IAAIA,aAAa,KAAKb,KAAjDS,CAAP;QACD;;QACD,OAAOA,MAAM,CAACC,MAAPD,CAAcT,KAAdS,CAAP;MAJM,EAARX;IAMD;;EA9C+B,CAAlC;EAiDA,OAAOK,KAAP;AACD","names":["useCheckboxGroupState","props","selectedValues","setValue","useControlledState","value","defaultValue","onChange","state","isReadOnly","isDisabled","isSelected","includes","addValue","values","concat","removeValue","filter","existingValue","toggleValue"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/@react-stately/checkbox/dist/packages/@react-stately/checkbox/src/useCheckboxGroupState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface CheckboxGroupState {\n  /** Current selected values. */\n  readonly value: readonly string[],\n\n  /** Whether the checkbox group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the checkbox group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** Returns whether the given value is selected. */\n  isSelected(value: string): boolean,\n\n  /** Sets the selected values. */\n  setValue(value: string[]): void,\n\n  /** Adds a value to the set of selected values. */\n  addValue(value: string): void,\n\n  /** Removes a value from the set of selected values. */\n  removeValue(value: string): void,\n\n  /** Toggles a value in the set of selected values. */\n  toggleValue(value: string): void\n}\n\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useCheckboxGroupState(props: CheckboxGroupProps = {}): CheckboxGroupState {\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n\n  const state: CheckboxGroupState = {\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (!values.includes(value)) {\n          return values.concat(value);\n        }\n        return values;\n      });\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (values.includes(value)) {\n          return values.filter(existingValue => existingValue !== value);\n        }\n        return values;\n      });\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (values.includes(value)) {\n          return values.filter(existingValue => existingValue !== value);\n        }\n        return values.concat(value);\n      });\n    }\n  };\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}