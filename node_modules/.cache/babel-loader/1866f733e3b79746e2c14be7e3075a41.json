{"ast":null,"code":"import propTypes from 'prop-types';\nimport React, { useEffect } from 'react';\n\nvar ReactPictureInPicture = function ReactPictureInPicture(_ref) {\n  var _ref$id = _ref.id,\n      id = _ref$id === undefined ? 'videopip' : _ref$id,\n      callBackSuccessOnEnable = _ref.callBackSuccessOnEnable,\n      callBackSuccessOnDisable = _ref.callBackSuccessOnDisable,\n      _ref$isActive = _ref.isActive,\n      isActive = _ref$isActive === undefined ? false : _ref$isActive,\n      style = _ref.style,\n      className = _ref.className,\n      _ref$autoplay = _ref.autoplay,\n      autoplay = _ref$autoplay === undefined ? false : _ref$autoplay,\n      _ref$controls = _ref.controls,\n      controls = _ref$controls === undefined ? true : _ref$controls,\n      _ref$loop = _ref.loop,\n      loop = _ref$loop === undefined ? false : _ref$loop,\n      children = _ref.children,\n      _ref$muted = _ref.muted,\n      muted = _ref$muted === undefined ? false : _ref$muted,\n      classOnEnable = _ref.classOnEnable;\n  ReactPictureInPicture.propTypes = {\n    /** set a custom id to the video player (#videopip by default) (not required) */\n    id: propTypes.string,\n\n    /** state that allow to turn on or of the pip mode */\n    isActive: propTypes.bool,\n\n    /** function that would be called if the media where successfully go to pip mode (not required) */\n    callBackSuccessOnEnable: propTypes.func,\n\n    /** function called when the pip mode is successfully disabled */\n    callBackSuccessOnDisable: propTypes.func,\n\n    /** style that would be apply to the video element (not required) */\n    style: propTypes.object,\n\n    /** className that would be apply to the video element (not required)  */\n    className: propTypes.string,\n\n    /** enable autoplay on the video player (not required) */\n    autoplay: propTypes.bool,\n\n    /** enable or not video controls  */\n    controls: propTypes.bool,\n\n    /** children element that can be include between the <video></video> element */\n    children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node]),\n\n    /** enable loop play on the video */\n    loop: propTypes.bool,\n\n    /** mute the video player sound */\n    muted: propTypes.bool,\n\n    /** css class that would be activate on the video player when pip mode is enable */\n    classOnEnable: propTypes.string\n    /**\n     * toggle the video player in pip mode \n     */\n\n  };\n\n  var togglePIP = function togglePIP() {\n    var player = document.getElementById(id);\n\n    if (player.readyState === 4) {\n      // if video is ready to play\n      if (document.pictureInPictureElement && !isActive) {\n        // if document is already on pip mod\n        document.exitPictureInPicture() // disable pip\n        .then(function () {\n          if (callBackSuccessOnDisable) {\n            // call the success disable callback if set\n            callBackSuccessOnDisable();\n          }\n        });\n      } else {\n        player.requestPictureInPicture().then(function () {\n          // pip enabled successfully\n          if (callBackSuccessOnEnable) {\n            // call the success enable callbakc if set\n            callBackSuccessOnEnable();\n          }\n        });\n      }\n    }\n  };\n  /**\n   * Handle pip status when isActive is updated\n   */\n\n\n  useEffect(function () {\n    togglePIP();\n  }, [isActive]);\n  return React.createElement('video', {\n    id: id,\n    className: className + ' ' + (isActive ? classOnEnable : '') + ' ',\n    style: style,\n    controls: controls,\n    autoPlay: autoplay,\n    loop: loop,\n    muted: muted\n  }, children);\n};\n\nexport default ReactPictureInPicture;","map":{"version":3,"mappings":";;;AAEA,IAAMA,wBAAwB,SAAxBA,qBAAwB,OAAyM;qBAAtMC;MAAAA,EAAsM,2BAAjM,UAAiM;MAArLC,uBAAqL,QAArLA;MAAyBC,wBAA4J,QAA5JA;2BAA0BC;MAAAA,QAAkI,iCAAvH,KAAuH;MAAhHC,KAAgH,QAAhHA;MAAOC,SAAyG,QAAzGA;2BAAWC;MAAAA,QAA8F,iCAAnF,KAAmF;2BAA5EC;MAAAA,QAA4E,iCAAjE,IAAiE;uBAA3DC;MAAAA,IAA2D,6BAApD,KAAoD;MAA7CC,QAA6C,QAA7CA;wBAAUC;MAAAA,KAAmC,8BAA3B,KAA2B;MAApBC,aAAoB,QAApBA;wBAC3LC,YAAY;;QAE5BA,UAAUC,MAFkB;;;cAItBD,UAAUE,IAJY;;;6BAMPF,UAAUG,IANH;;;8BAQNH,UAAUG,IARJ;;;WAUzBH,UAAUI,MAVe;;;eAYrBJ,UAAUC,MAZW;;;cActBD,UAAUE,IAdY;;;cAgBtBF,UAAUE,IAhBY;;;cAkBtBF,UAAUK,SAAVL,CAAoB,CAACA,UAAUM,OAAVN,CAAkBA,UAAUO,IAA5BP,CAAD,EAAoCA,UAAUO,IAA9C,CAApBP,CAlBsB;;;UAoB1BA,UAAUE,IApBgB;;;WAsBzBF,UAAUE,IAtBe;;;mBAwBjBF,UAAUC;;;;;EAxBO;;EA6BlC,IAAMO,YAAY,SAAZA,SAAY,GAAM;QAClBC,SAASC,SAASC,cAATD,CAAwBtB,EAAxBsB;;QACTD,OAAOG,UAAPH,KAAsB,GAAG;;UACvBC,SAASG,uBAATH,IAAoC,CAACnB,UAAU;;iBACxCuB,uBAAT;SACGC,KAAK,YAAM;cACNzB,0BAA0B;;;;QAFlC;MADF,OAOO;eACE0B,0BACJD,KAAK,YAAM;;cACN1B,yBAAyB;;;;QAFjC;;;EAXN;;;;;;YAuBU,YAAM;;EAAhB,GAEG,CAACE,QAAD;SAEK0B;IAAO7B,IAAIA;IAAIK,WAAcA,SAAd,MAAcA,IAAaF,WAAWQ,aAAXR,GAA2B,EAAxCE,IAAd;IAA6DD,OAAOA;IAAQG,UAAUA;IAAUuB,UAAUxB;IAAUE,MAAMA;IAAME,OAAOA;GAAtJ;AAzDV","names":["ReactPictureInPicture","id","callBackSuccessOnEnable","callBackSuccessOnDisable","isActive","style","className","autoplay","controls","loop","children","muted","classOnEnable","propTypes","string","bool","func","object","oneOfType","arrayOf","node","togglePIP","player","document","getElementById","readyState","pictureInPictureElement","exitPictureInPicture","then","requestPictureInPicture","React","autoPlay"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/react-picture-in-picture/src/index.js"],"sourcesContent":["import propTypes from 'prop-types'\nimport React, { useEffect } from 'react'\nconst ReactPictureInPicture = ({ id = 'videopip', callBackSuccessOnEnable, callBackSuccessOnDisable, isActive = false, style, className, autoplay = false, controls = true, loop = false, children, muted = false, classOnEnable }) => {\n  ReactPictureInPicture.propTypes = {\n    /** set a custom id to the video player (#videopip by default) (not required) */\n    id: propTypes.string,\n    /** state that allow to turn on or of the pip mode */\n    isActive: propTypes.bool,\n    /** function that would be called if the media where successfully go to pip mode (not required) */\n    callBackSuccessOnEnable: propTypes.func,\n    /** function called when the pip mode is successfully disabled */\n    callBackSuccessOnDisable: propTypes.func,\n    /** style that would be apply to the video element (not required) */\n    style: propTypes.object,\n    /** className that would be apply to the video element (not required)  */\n    className: propTypes.string,\n    /** enable autoplay on the video player (not required) */\n    autoplay: propTypes.bool,\n    /** enable or not video controls  */\n    controls: propTypes.bool,\n    /** children element that can be include between the <video></video> element */\n    children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node]),\n    /** enable loop play on the video */\n    loop: propTypes.bool,\n    /** mute the video player sound */\n    muted: propTypes.bool,\n    /** css class that would be activate on the video player when pip mode is enable */\n    classOnEnable: propTypes.string\n  }\n  /**\n   * toggle the video player in pip mode \n   */\n  const togglePIP = () => {\n    let player = document.getElementById(id)\n    if (player.readyState === 4) { // if video is ready to play\n      if (document.pictureInPictureElement && !isActive) { // if document is already on pip mod\n        document.exitPictureInPicture() // disable pip\n          .then(() => {\n            if (callBackSuccessOnDisable) { // call the success disable callback if set\n              callBackSuccessOnDisable()\n            }\n          })\n      } else {\n        player.requestPictureInPicture()\n          .then(() => { // pip enabled successfully\n            if (callBackSuccessOnEnable) { // call the success enable callbakc if set\n              callBackSuccessOnEnable()\n            }\n          })\n      }\n    }\n  }\n  /**\n   * Handle pip status when isActive is updated\n   */\n  useEffect(() => {\n    togglePIP()\n  }, [isActive])\n\n  return (<video id={id} className={`${className} ${isActive ? classOnEnable : ''} `} style={style}  controls={controls} autoPlay={autoplay} loop={loop} muted={muted}>\n    {children}\n  </video>\n  )\n}\n\nexport default ReactPictureInPicture\n"]},"metadata":{},"sourceType":"module"}