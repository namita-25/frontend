{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { Svg, G } from './nbSvg';\nimport { questionOutlineIconPath } from './Icons/questionIconPath';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst SVG = makeStyledComponent(Svg);\n\nconst SVGIcon = (_ref, ref) => {\n  let {\n    children,\n    ...props\n  } = _ref;\n  const {\n    focusable,\n    stroke,\n    color,\n    size,\n    ...resolvedProps\n  } = usePropsResolution('Icon', props);\n  const strokeHex = useToken('colors', stroke || '');\n  const colorHex = useToken('colors', color || ''); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(SVG, _extends({}, resolvedProps, {\n    // height={\n    //   newProps.size\n    //     ? parseInt(newProps.size, 10)\n    //     : parseInt(newProps.height, 10)\n    // }\n    // width={\n    //   newProps.size\n    //     ? parseInt(newProps.size, 10)\n    //     : parseInt(newProps.width, 10)\n    // }\n    size: size,\n    color: colorHex,\n    stroke: strokeHex,\n    focusable: focusable,\n    accessibilityRole: \"image\" // style={style}\n    ,\n    ref: ref\n  }), React.Children.count(children) > 0 ? /*#__PURE__*/React.createElement(G, null, React.Children.map(children, (child, i) => {\n    var _child$key;\n\n    return /*#__PURE__*/React.createElement(ChildPath, _extends({\n      key: (_child$key = child === null || child === void 0 ? void 0 : child.key) !== null && _child$key !== void 0 ? _child$key : i,\n      element: child\n    }, child === null || child === void 0 ? void 0 : child.props));\n  })) : questionOutlineIconPath);\n};\n\nconst ChildPath = _ref2 => {\n  let {\n    element,\n    fill,\n    stroke: pathStroke\n  } = _ref2;\n  const pathStrokeColor = useToken('colors', pathStroke || '');\n  const fillColor = useToken('colors', fill || '');\n\n  if (!element) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.cloneElement(element, {\n    fill: fillColor ? fillColor : 'currentColor',\n    stroke: pathStrokeColor\n  });\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(SVGIcon));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,QAAT,EAAmBC,kBAAnB,QAA6C,gBAA7C;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,GAAT,EAAcC,CAAd,QAAuB,SAAvB;AAEA,SAASC,uBAAT,QAAwC,0BAAxC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,MAAMC,GAAG,GAAGL,mBAAmB,CAACC,GAAD,CAA/B;;AAEA,MAAMK,OAAO,GAAG,OAAqCC,GAArC,KAAkD;EAAA,IAAjD;IAAEC,QAAF;IAAY,GAAGC;EAAf,CAAiD;EAChE,MAAM;IACJC,SADI;IAEJC,MAFI;IAGJC,KAHI;IAIJC,IAJI;IAKJ,GAAGC;EALC,IAMFf,kBAAkB,CAAC,MAAD,EAASU,KAAT,CANtB;EAOA,MAAMM,SAAS,GAAGjB,QAAQ,CAAC,QAAD,EAAWa,MAAM,IAAI,EAArB,CAA1B;EACA,MAAMK,QAAQ,GAAGlB,QAAQ,CAAC,QAAD,EAAWc,KAAK,IAAI,EAApB,CAAzB,CATgE,CAUhE;;EACA,IAAIR,qBAAqB,CAACK,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBACEd,oBAACU,GAAD,eACMS,aADN;IAEE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAD,IAAI,EAAEA,IAZR;IAaED,KAAK,EAAEI,QAbT;IAcEL,MAAM,EAAEI,SAdV;IAeEL,SAAS,EAAEA,SAfb;IAgBEO,iBAAiB,EAAC,OAhBpB,CAiBE;IAjBF;IAkBEV,GAAG,EAAEA;EAlBP,IAoBGZ,KAAK,CAACuB,QAANvB,CAAewB,KAAfxB,CAAqBa,QAArBb,IAAiC,CAAjCA,gBACCA,oBAACO,CAAD,QACGP,KAAK,CAACuB,QAANvB,CAAeyB,GAAfzB,CAAmBa,QAAnBb,EAA6B,CAAC0B,KAAD,EAAQC,CAAR;IAAA;;IAAA,oBAC5B3B,oBAAC4B,SAAD;MACEC,GAAG,gBAAEH,KAAF,SAAEA,SAAF,WAAEA,GAAF,MAAEA,QAAK,CAAEG,GAAT,mDAAgBF,CADrB;MAEEG,OAAO,EAAEJ;IAFX,GAGMA,KAHN,SAGMA,SAHN,WAGMA,GAHN,MAGMA,QAAK,CAAEZ,KAHb,EAD4B;EAA7B,EADH,CADDd,GAWCQ,uBA/BJ,CADF;AAdF;;AAmDA,MAAMoB,SAAS,GAAG,SAAgD;EAAA,IAA/C;IAAEE,OAAF;IAAWC,IAAX;IAAiBf,MAAM,EAAEgB;EAAzB,CAA+C;EAChE,MAAMC,eAAe,GAAG9B,QAAQ,CAAC,QAAD,EAAW6B,UAAU,IAAI,EAAzB,CAAhC;EACA,MAAME,SAAS,GAAG/B,QAAQ,CAAC,QAAD,EAAW4B,IAAI,IAAI,EAAnB,CAA1B;;EAEA,IAAI,CAACD,OAAL,EAAc;IACZ,OAAO,IAAP;EACD;;EAED,oBAAO9B,KAAK,CAACmC,YAANnC,CAAmB8B,OAAnB9B,EAA4B;IACjC+B,IAAI,EAAEG,SAAS,GAAGA,SAAH,GAAe,cADG;IAEjClB,MAAM,EAAEiB;EAFyB,CAA5BjC,CAAP;AARF;;AAaA,4BAAeC,IAAI,eAACC,UAAU,CAACS,OAAD,CAAX,CAAnB","names":["React","memo","forwardRef","useToken","usePropsResolution","makeStyledComponent","Svg","G","questionOutlineIconPath","useHasResponsiveProps","SVG","SVGIcon","ref","children","props","focusable","stroke","color","size","resolvedProps","strokeHex","colorHex","accessibilityRole","Children","count","map","child","i","ChildPath","key","element","fill","pathStroke","pathStrokeColor","fillColor","cloneElement"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Icon/SVGIcon.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { Svg, G } from './nbSvg';\nimport type { IIconProps } from './types';\nimport { questionOutlineIconPath } from './Icons/questionIconPath';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst SVG = makeStyledComponent(Svg);\n\nconst SVGIcon = ({ children, ...props }: IIconProps, ref: any) => {\n  const {\n    focusable,\n    stroke,\n    color,\n    size,\n    ...resolvedProps\n  } = usePropsResolution('Icon', props);\n  const strokeHex = useToken('colors', stroke || '');\n  const colorHex = useToken('colors', color || '');\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <SVG\n      {...resolvedProps}\n      // height={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.height, 10)\n      // }\n      // width={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.width, 10)\n      // }\n      size={size}\n      color={colorHex}\n      stroke={strokeHex}\n      focusable={focusable}\n      accessibilityRole=\"image\"\n      // style={style}\n      ref={ref}\n    >\n      {React.Children.count(children) > 0 ? (\n        <G>\n          {React.Children.map(children, (child, i) => (\n            <ChildPath\n              key={child?.key ?? i}\n              element={child}\n              {...child?.props}\n            />\n          ))}\n        </G>\n      ) : (\n        questionOutlineIconPath\n      )}\n    </SVG>\n  );\n};\nconst ChildPath = ({ element, fill, stroke: pathStroke }: any) => {\n  const pathStrokeColor = useToken('colors', pathStroke || '');\n  const fillColor = useToken('colors', fill || '');\n\n  if (!element) {\n    return null;\n  }\n\n  return React.cloneElement(element, {\n    fill: fillColor ? fillColor : 'currentColor',\n    stroke: pathStrokeColor,\n  });\n};\nexport default memo(forwardRef(SVGIcon));\n"]},"metadata":{},"sourceType":"module"}