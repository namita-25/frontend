{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Input } from '../Input';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\n\nconst TextArea = (_ref2, ref) => {\n  let {\n    wrapperRef,\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    isFocused: isFocusedProp,\n    isHovered: isHoveredProp,\n    ...props\n  } = _ref2;\n\n  const _ref = React.useRef(null);\n\n  const {\n    isHovered\n  } = useHover({}, _ref);\n  const [isFocused, setIsFocused] = React.useState(isFocusedProp);\n\n  const handleFocus = (focusState, callback) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  const {\n    totalLines,\n    onFocus,\n    onBlur,\n    ...newProps\n  } = usePropsResolution('TextArea', props, {\n    isHovered: isHoveredProp || isHovered,\n    isDisabled,\n    isFocused,\n    isInvalid,\n    isReadOnly\n  }, {\n    extendTheme: ['Input']\n  }); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Input, _extends({}, newProps, {\n    INTERNAL_notResolveThemeAndPseudoProps: true,\n    numberOfLines: totalLines,\n    wrapperRef: wrapperRef,\n    ref: mergeRefs([_ref, ref]),\n    onFocus: e => {\n      handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n    },\n    onBlur: e => {\n      handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n    },\n    isDisabled: isDisabled,\n    isInvalid: isInvalid,\n    isReadOnly: isReadOnly\n  }));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(TextArea));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,KAAT,QAAsB,UAAtB;AAEA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SAASC,SAAT,QAA0B,gBAA1B;;AAcA,MAAMC,QAAQ,GAAG,QAUfC,GAVe,KAWZ;EAAA,IAVH;IACEC,UADF;IAEEC,UAFF;IAGEC,SAHF;IAIEC,UAJF;IAKEC,SAAS,EAAEC,aALb;IAMEC,SAAS,EAAEC,aANb;IAOE,GAAGC;EAPL,CAUG;;EACH,MAAMC,IAAI,GAAGnB,KAAK,CAACoB,MAANpB,CAAa,IAAbA,CAAb;;EACA,MAAM;IAAEgB;EAAF,IAAgBV,QAAQ,CAAC,EAAD,EAAKa,IAAL,CAA9B;EACA,MAAM,CAACL,SAAD,EAAYO,YAAZ,IAA4BrB,KAAK,CAACsB,QAANtB,CAAee,aAAff,CAAlC;;EACA,MAAMuB,WAAW,GAAG,CAACC,UAAD,EAAsBC,QAAtB,KAAwC;IAC1DJ,YAAY,CAACG,UAAD,CAAZH;IACAI,QAAQ;EAFV;;EAIA,MAAM;IAAEC,UAAF;IAAcC,OAAd;IAAuBC,MAAvB;IAA+B,GAAGC;EAAlC,IAA+CzB,kBAAkB,CACrE,UADqE,EAErEc,KAFqE,EAGrE;IACEF,SAAS,EAAEC,aAAa,IAAID,SAD9B;IAEEL,UAFF;IAGEG,SAHF;IAIEF,SAJF;IAKEC;EALF,CAHqE,EAUrE;IAAEiB,WAAW,EAAE,CAAC,OAAD;EAAf,CAVqE,CAAvE,CARG,CAoBH;;EACA,IAAIzB,qBAAqB,CAACa,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBACElB,oBAACG,KAAD,eACM0B,QADN;IAEEE,sCAAsC,MAFxC;IAGEC,aAAa,EAAEN,UAHjB;IAIEhB,UAAU,EAAEA,UAJd;IAKED,GAAG,EAAEF,SAAS,CAAC,CAACY,IAAD,EAAOV,GAAP,CAAD,CALhB;IAMEkB,OAAO,EAAGM,CAAD,IAAO;MACdV,WAAW,CAAC,IAAD,EAAOI,OAAO,GAAG,MAAMA,OAAO,CAACM,CAAD,CAAhB,GAAsB,MAAM,CAA1C,EAAXV;IAPJ;IASEK,MAAM,EAAGK,CAAD,IAAO;MACbV,WAAW,CAAC,KAAD,EAAQK,MAAM,GAAG,MAAMA,MAAM,CAACK,CAAD,CAAf,GAAqB,MAAM,CAAzC,EAAXV;IAVJ;IAYEZ,UAAU,EAAEA,UAZd;IAaEC,SAAS,EAAEA,SAbb;IAcEC,UAAU,EAAEA;EAdd,GADF;AAnCF;;AAuDA,4BAAeZ,IAAI,eAACC,UAAU,CAACM,QAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Input","usePropsResolution","useHasResponsiveProps","useHover","mergeRefs","TextArea","ref","wrapperRef","isDisabled","isInvalid","isReadOnly","isFocused","isFocusedProp","isHovered","isHoveredProp","props","_ref","useRef","setIsFocused","useState","handleFocus","focusState","callback","totalLines","onFocus","onBlur","newProps","extendTheme","INTERNAL_notResolveThemeAndPseudoProps","numberOfLines","e"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/TextArea/index.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Input } from '../Input';\nimport type { InterfaceInputProps } from '../Input/types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport type { PlatformProps } from '../../../components/types';\nexport interface ITextAreaProps\n  extends Omit<\n      InterfaceInputProps,\n      '_web' | '_android' | '_ios' | '_light' | '_dark' | '_important'\n    >,\n    PlatformProps<ITextAreaProps> {\n  /**\n   * Maps to react-native TextInput's numberOfLines.\n   */\n  totalLines?: number;\n}\n\nconst TextArea = (\n  {\n    wrapperRef,\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    isFocused: isFocusedProp,\n    isHovered: isHoveredProp,\n    ...props\n  }: ITextAreaProps,\n  ref: any\n) => {\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n  const [isFocused, setIsFocused] = React.useState(isFocusedProp);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n  const { totalLines, onFocus, onBlur, ...newProps } = usePropsResolution(\n    'TextArea',\n    props,\n    {\n      isHovered: isHoveredProp || isHovered,\n      isDisabled,\n      isFocused,\n      isInvalid,\n      isReadOnly,\n    },\n    { extendTheme: ['Input'] }\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Input\n      {...newProps}\n      INTERNAL_notResolveThemeAndPseudoProps\n      numberOfLines={totalLines}\n      wrapperRef={wrapperRef}\n      ref={mergeRefs([_ref, ref])}\n      onFocus={(e) => {\n        handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n      }}\n      onBlur={(e) => {\n        handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n      }}\n      isDisabled={isDisabled}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n    />\n  );\n};\n\nexport default memo(forwardRef(TextArea));\n"]},"metadata":{},"sourceType":"module"}