{"ast":null,"code":"import React from 'react';\nimport { useThemeProps } from '../../../hooks';\nimport { useFormControlContext } from '../FormControl';\nimport { NumberInputContext } from './Context';\nimport Box from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst NumberInput = (_ref, ref) => {\n  let {\n    children,\n    ...props\n  } = _ref;\n  const {\n    defaultValue,\n    keepWithinRange,\n    value,\n    min,\n    max,\n    onChange,\n    ...newProps\n  } = useThemeProps('NumberInput', props);\n  const formControlContext = useFormControlContext();\n  const [numberInputValue, setNumberInputValue] = React.useState(parseInt(value || defaultValue, 10));\n  const [numberInputStepper, setNumberInputStepper] = React.useState(null);\n\n  const handleChange = newValue => {\n    const temp = newValue;\n    setNumberInputValue(temp);\n\n    if (keepWithinRange) {\n      if (newValue < min) setNumberInputValue(min);else if (newValue > max) setNumberInputValue(max);\n    } //NOTE: only calling onChange on stepper click or blur event of input.\n\n\n    onChange && onChange(temp);\n  };\n\n  const handleChangeWithoutCheck = newValue => {\n    const temp = newValue;\n    setNumberInputValue(temp);\n  };\n\n  React.useEffect(() => {\n    if (value !== undefined && value != numberInputValue) setNumberInputValue(value);\n  }, [value, numberInputValue, setNumberInputValue]); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(NumberInputContext.Provider, {\n    value: { ...formControlContext,\n      ...newProps,\n      min,\n      max,\n      handleChange,\n      handleChangeWithoutCheck,\n      numberInputValue,\n      numberInputStepper,\n      setNumberInputStepper,\n      isControlled: value !== undefined\n    }\n  }, children));\n};\n\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(NumberInput));","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,qBAAT,QAAsC,gBAAtC;AAEA,SAASC,kBAAT,QAAmC,WAAnC;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,WAAW,GAAG,OAA4CC,GAA5C,KAA0D;EAAA,IAAzD;IAAEC,QAAF;IAAY,GAAGC;EAAf,CAAyD;EAC5E,MAAM;IACJC,YADI;IAEJC,eAFI;IAGJC,KAHI;IAIJC,GAJI;IAKJC,GALI;IAMJC,QANI;IAOJ,GAAGC;EAPC,IAQFf,aAAa,CAAC,aAAD,EAAgBQ,KAAhB,CARjB;EASA,MAAMQ,kBAAkB,GAAGf,qBAAqB,EAAhD;EAEA,MAAM,CAACgB,gBAAD,EAAmBC,mBAAnB,IAA0CnB,KAAK,CAACoB,QAANpB,CAC9CqB,QAAQ,CAACT,KAAK,IAAIF,YAAV,EAAwB,EAAxB,CADsCV,CAAhD;EAGA,MAAM,CAACsB,kBAAD,EAAqBC,qBAArB,IAA8CvB,KAAK,CAACoB,QAANpB,CAAe,IAAfA,CAApD;;EACA,MAAMwB,YAAY,GAAIC,QAAD,IAAsB;IACzC,MAAMC,IAAI,GAAGD,QAAb;IACAN,mBAAmB,CAACO,IAAD,CAAnBP;;IACA,IAAIR,eAAJ,EAAqB;MACnB,IAAIc,QAAQ,GAAGZ,GAAf,EAAoBM,mBAAmB,CAACN,GAAD,CAAnBM,CAApB,KACK,IAAIM,QAAQ,GAAGX,GAAf,EAAoBK,mBAAmB,CAACL,GAAD,CAAnBK;IALc,EAOzC;;;IACAJ,QAAQ,IAAIA,QAAQ,CAACW,IAAD,CAApBX;EARF;;EAUA,MAAMY,wBAAwB,GAAIF,QAAD,IAAsB;IACrD,MAAMC,IAAI,GAAGD,QAAb;IACAN,mBAAmB,CAACO,IAAD,CAAnBP;EAFF;;EAKAnB,KAAK,CAAC4B,SAAN5B,CAAgB,MAAM;IACpB,IAAIY,KAAK,KAAKiB,SAAVjB,IAAuBA,KAAK,IAAIM,gBAApC,EACEC,mBAAmB,CAACP,KAAD,CAAnBO;EAFJ,GAGG,CAACP,KAAD,EAAQM,gBAAR,EAA0BC,mBAA1B,CAHHnB,EA/B4E,CAmC5E;;EACA,IAAIK,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBACET,oBAACI,GAAD;IAAKG,GAAG,EAAEA;EAAV,gBACEP,oBAACG,kBAAD,CAAoB2B,QAApB;IACElB,KAAK,EAAE,EACL,GAAGK,kBADE;MAEL,GAAGD,QAFE;MAGLH,GAHK;MAILC,GAJK;MAKLU,YALK;MAMLG,wBANK;MAOLT,gBAPK;MAQLI,kBARK;MASLC,qBATK;MAULQ,YAAY,EAAEnB,KAAK,KAAKiB;IAVnB;EADT,GAcGrB,QAdH,CADF,CADF;AAvCF;;AA6DA,4BAAeR,KAAK,CAACgC,IAANhC,eAAWA,KAAK,CAACiC,UAANjC,CAAiBM,WAAjBN,CAAXA,CAAf","names":["React","useThemeProps","useFormControlContext","NumberInputContext","Box","useHasResponsiveProps","NumberInput","ref","children","props","defaultValue","keepWithinRange","value","min","max","onChange","newProps","formControlContext","numberInputValue","setNumberInputValue","useState","parseInt","numberInputStepper","setNumberInputStepper","handleChange","newValue","temp","handleChangeWithoutCheck","useEffect","undefined","Provider","isControlled","memo","forwardRef"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/NumberInput/NumberInput.tsx"],"sourcesContent":["import React from 'react';\nimport { useThemeProps } from '../../../hooks';\nimport { useFormControlContext } from '../FormControl';\nimport type { INumberInputProps } from './types';\nimport { NumberInputContext } from './Context';\nimport Box from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst NumberInput = ({ children, ...props }: INumberInputProps, ref?: any) => {\n  const {\n    defaultValue,\n    keepWithinRange,\n    value,\n    min,\n    max,\n    onChange,\n    ...newProps\n  } = useThemeProps('NumberInput', props);\n  const formControlContext = useFormControlContext();\n\n  const [numberInputValue, setNumberInputValue] = React.useState(\n    parseInt(value || defaultValue, 10)\n  );\n  const [numberInputStepper, setNumberInputStepper] = React.useState(null);\n  const handleChange = (newValue: number) => {\n    const temp = newValue;\n    setNumberInputValue(temp);\n    if (keepWithinRange) {\n      if (newValue < min) setNumberInputValue(min);\n      else if (newValue > max) setNumberInputValue(max);\n    }\n    //NOTE: only calling onChange on stepper click or blur event of input.\n    onChange && onChange(temp);\n  };\n  const handleChangeWithoutCheck = (newValue: number) => {\n    const temp = newValue;\n    setNumberInputValue(temp);\n  };\n\n  React.useEffect(() => {\n    if (value !== undefined && value != numberInputValue)\n      setNumberInputValue(value);\n  }, [value, numberInputValue, setNumberInputValue]);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box ref={ref}>\n      <NumberInputContext.Provider\n        value={{\n          ...formControlContext,\n          ...newProps,\n          min,\n          max,\n          handleChange,\n          handleChangeWithoutCheck,\n          numberInputValue,\n          numberInputStepper,\n          setNumberInputStepper,\n          isControlled: value !== undefined,\n        }}\n      >\n        {children}\n      </NumberInputContext.Provider>\n    </Box>\n  );\n};\n\nexport default React.memo(React.forwardRef(NumberInput));\n"]},"metadata":{},"sourceType":"module"}