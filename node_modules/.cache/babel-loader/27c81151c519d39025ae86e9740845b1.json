{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Popper } from '../Popper';\nimport { AccessibilityInfo, ScrollView } from 'react-native';\nimport { useControllableState } from '../../../hooks';\nimport { useMenuTrigger, useMenu, useMenuTypeahead } from './useMenu';\nimport Backdrop from '../Backdrop';\nimport { PresenceTransition } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { MenuContext } from './MenuContext';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Menu = (_ref, ref) => {\n  let {\n    trigger,\n    closeOnSelect = true,\n    children,\n    onOpen,\n    onClose,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    placement = 'bottom left',\n    ...props\n  } = _ref;\n  const triggerRef = React.useRef(null);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: value => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    }\n  });\n  const {\n    _overlay,\n    _presenceTransition,\n    _backdrop,\n    useRNModal,\n    ...resolvedProps\n  } = usePropsResolution('Menu', props);\n  const handleOpen = React.useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n  const handleClose = React.useCallback(() => {\n    setIsOpen(false);\n  }, [setIsOpen]);\n  const triggerProps = useMenuTrigger({\n    handleOpen,\n    isOpen\n  });\n\n  const updatedTrigger = () => {\n    return trigger({ ...triggerProps,\n      ref: triggerRef,\n      onPress: handleOpen\n    }, {\n      open: isOpen\n    });\n  };\n\n  React.useEffect(() => {\n    if (isOpen) {\n      AccessibilityInfo.announceForAccessibility('Popup window');\n    }\n  }, [isOpen]); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, updatedTrigger(), /*#__PURE__*/React.createElement(Overlay, _extends({\n    isOpen: isOpen,\n    onRequestClose: handleClose,\n    useRNModalOnAndroid: true,\n    useRNModal: useRNModal\n  }, _overlay, {\n    unmountOnExit: true\n  }), /*#__PURE__*/React.createElement(PresenceTransition, _extends({\n    visible: isOpen\n  }, _presenceTransition), /*#__PURE__*/React.createElement(Popper, _extends({\n    triggerRef: triggerRef,\n    onClose: handleClose,\n    placement: placement\n  }, resolvedProps), /*#__PURE__*/React.createElement(Backdrop, _extends({\n    onPress: handleClose\n  }, _backdrop)), /*#__PURE__*/React.createElement(Popper.Content, {\n    isOpen: isOpen\n  }, /*#__PURE__*/React.createElement(MenuContext.Provider, {\n    value: {\n      closeOnSelect,\n      onClose: handleClose\n    }\n  }, /*#__PURE__*/React.createElement(FocusScope, {\n    contain: true,\n    restoreFocus: true,\n    autoFocus: true\n  }, /*#__PURE__*/React.createElement(MenuContent, _extends({\n    menuRef: ref\n  }, resolvedProps), children))))))));\n};\n\nconst MenuContent = _ref2 => {\n  let {\n    menuRef,\n    children,\n    ...props\n  } = _ref2;\n  const menuProps = useMenu();\n  const typeaheadProps = useMenuTypeahead(menuProps);\n  return /*#__PURE__*/React.createElement(Box, _extends({}, props, menuProps, typeaheadProps, {\n    ref: menuRef\n  }), /*#__PURE__*/React.createElement(ScrollView, null, children));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Menu));","map":{"version":3,"mappings":"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","names":["React","memo","forwardRef","Box","usePropsResolution","Popper","AccessibilityInfo","ScrollView","useControllableState","useMenuTrigger","useMenu","useMenuTypeahead","Backdrop","PresenceTransition","FocusScope","MenuContext","Overlay","useHasResponsiveProps","Menu","ref","trigger","closeOnSelect","children","onOpen","onClose","isOpen","isOpenProp","defaultIsOpen","placement","props","triggerRef","useRef","setIsOpen","value","defaultValue","onChange","_overlay","_presenceTransition","_backdrop","useRNModal","resolvedProps","handleOpen","useCallback","handleClose","triggerProps","updatedTrigger","onPress","open","useEffect","announceForAccessibility","onRequestClose","useRNModalOnAndroid","unmountOnExit","visible","Content","Provider","contain","restoreFocus","autoFocus","MenuContent","menuRef","menuProps","typeaheadProps"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Menu/Menu.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IMenuProps } from './types';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Popper } from '../Popper';\nimport { AccessibilityInfo, ScrollView } from 'react-native';\nimport { useControllableState } from '../../../hooks';\nimport { useMenuTrigger, useMenu, useMenuTypeahead } from './useMenu';\nimport Backdrop from '../Backdrop';\nimport { PresenceTransition } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { MenuContext } from './MenuContext';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Menu = (\n  {\n    trigger,\n    closeOnSelect = true,\n    children,\n    onOpen,\n    onClose,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    placement = 'bottom left',\n    ...props\n  }: IMenuProps,\n  ref?: any\n) => {\n  const triggerRef = React.useRef(null);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: (value) => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    },\n  });\n\n  const {\n    _overlay,\n    _presenceTransition,\n    _backdrop,\n    useRNModal,\n    ...resolvedProps\n  } = usePropsResolution('Menu', props);\n  const handleOpen = React.useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  const handleClose = React.useCallback(() => {\n    setIsOpen(false);\n  }, [setIsOpen]);\n\n  const triggerProps = useMenuTrigger({\n    handleOpen,\n    isOpen,\n  });\n\n  const updatedTrigger = () => {\n    return trigger(\n      {\n        ...triggerProps,\n        ref: triggerRef,\n        onPress: handleOpen,\n      },\n      { open: isOpen }\n    );\n  };\n\n  React.useEffect(() => {\n    if (isOpen) {\n      AccessibilityInfo.announceForAccessibility('Popup window');\n    }\n  }, [isOpen]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n  return (\n    <>\n      {updatedTrigger()}\n      <Overlay\n        isOpen={isOpen}\n        onRequestClose={handleClose}\n        useRNModalOnAndroid\n        useRNModal={useRNModal}\n        {..._overlay}\n        unmountOnExit\n      >\n        <PresenceTransition visible={isOpen} {..._presenceTransition}>\n          <Popper\n            triggerRef={triggerRef}\n            onClose={handleClose}\n            placement={placement}\n            {...resolvedProps}\n          >\n            <Backdrop onPress={handleClose} {..._backdrop} />\n            <Popper.Content isOpen={isOpen}>\n              <MenuContext.Provider\n                value={{ closeOnSelect, onClose: handleClose }}\n              >\n                <FocusScope contain restoreFocus autoFocus>\n                  <MenuContent menuRef={ref} {...resolvedProps}>\n                    {children}\n                  </MenuContent>\n                </FocusScope>\n              </MenuContext.Provider>\n            </Popper.Content>\n          </Popper>\n        </PresenceTransition>\n      </Overlay>\n    </>\n  );\n};\n\nconst MenuContent = ({\n  menuRef,\n  children,\n  ...props\n}: Omit<IMenuProps, 'trigger'> & { menuRef: any }) => {\n  const menuProps = useMenu();\n  const typeaheadProps = useMenuTypeahead(menuProps);\n\n  return (\n    <Box {...props} {...menuProps} {...typeaheadProps} ref={menuRef}>\n      <ScrollView>{children}</ScrollView>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Menu));\n"]},"metadata":{},"sourceType":"module"}