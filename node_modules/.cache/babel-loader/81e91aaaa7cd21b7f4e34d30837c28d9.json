{"ast":null,"code":"import { getStyleAndFilteredProps, propConfig } from '../theme/styled-system';\nimport { useTheme } from './useTheme';\nimport React from 'react';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\nimport { useResponsiveQuery } from '../utils/useResponsiveQuery'; //@ts-ignore\n\nimport stableHash from 'stable-hash';\n\nconst getStyledSystemPropsAndRestProps = props => {\n  const styledSystemProps = {};\n  const restProps = {};\n\n  for (let key in props) {\n    if (key in propConfig) {\n      styledSystemProps[key] = props[key];\n    } else {\n      restProps[key] = props[key];\n    }\n  }\n\n  return {\n    styledSystemProps,\n    restProps\n  };\n};\n\nexport const useStyledSystemPropsResolver = _ref => {\n  let {\n    style: propStyle,\n    debug,\n    ...props\n  } = _ref;\n  const theme = useTheme();\n  const {\n    currentBreakpoint,\n    config\n  } = useNativeBaseConfig('makeStyledComponent');\n  const strictMode = config.strictMode;\n  const {\n    getResponsiveStyles\n  } = useResponsiveQuery();\n  const {\n    styledSystemProps,\n    restProps\n  } = getStyledSystemPropsAndRestProps(props);\n  const {\n    style,\n    dataSet\n  } = React.useMemo(() => {\n    const {\n      styleSheet,\n      dataSet\n    } = getStyleAndFilteredProps({\n      styledSystemProps,\n      theme,\n      debug,\n      currentBreakpoint,\n      strictMode,\n      getResponsiveStyles\n    });\n\n    if (propStyle) {\n      return {\n        style: [styleSheet.box, propStyle],\n        dataSet\n      };\n    } else {\n      return {\n        style: styleSheet.box,\n        dataSet\n      };\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [// eslint-disable-next-line react-hooks/exhaustive-deps\n  stableHash(styledSystemProps), theme, debug, currentBreakpoint, strictMode, propStyle, getResponsiveStyles, props]);\n\n  if (process.env.NODE_ENV === 'development' && debug) {\n    /* eslint-disable-next-line */\n    console.log('style,resprops', currentBreakpoint);\n  }\n\n  restProps.dataSet = { ...restProps.dataSet,\n    ...dataSet\n  };\n  return [style, restProps];\n};","map":{"version":3,"mappings":"AAAA,SAASA,wBAAT,EAAmCC,UAAnC,QAAqD,wBAArD;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,QAAoC,2BAApC;AACA,SAASC,kBAAT,QAAmC,6BAAnC,C,CACA;;AACA,OAAOC,UAAP,MAAuB,aAAvB;;AAEA,MAAMC,gCAAgC,GAAIC,KAAD,IAAgB;EACvD,MAAMC,iBAAsB,GAAG,EAA/B;EACA,MAAMC,SAAc,GAAG,EAAvB;;EAEA,KAAK,IAAIC,GAAT,IAAgBH,KAAhB,EAAuB;IACrB,IAAIG,GAAG,IAAIV,UAAX,EAAuB;MACrBQ,iBAAiB,CAACE,GAAD,CAAjBF,GAAyBD,KAAK,CAACG,GAAD,CAA9BF;IADF,OAEO;MACLC,SAAS,CAACC,GAAD,CAATD,GAAiBF,KAAK,CAACG,GAAD,CAAtBD;IACD;EACF;;EAED,OAAO;IAAED,iBAAF;IAAqBC;EAArB,CAAP;AAZF;;AAeA,OAAO,MAAME,4BAA4B,GAAG,QAIjC;EAAA,IAJkC;IAC3CC,KAAK,EAAEC,SADoC;IAE3CC,KAF2C;IAG3C,GAAGP;EAHwC,CAIlC;EACT,MAAMQ,KAAK,GAAGd,QAAQ,EAAtB;EACA,MAAM;IAAEe,iBAAF;IAAqBC;EAArB,IAAgCd,mBAAmB,CACvD,qBADuD,CAAzD;EAGA,MAAMe,UAAU,GAAGD,MAAM,CAACC,UAA1B;EAEA,MAAM;IAAEC;EAAF,IAA0Bf,kBAAkB,EAAlD;EAEA,MAAM;IAAEI,iBAAF;IAAqBC;EAArB,IAAmCH,gCAAgC,CACvEC,KADuE,CAAzE;EAIA,MAAM;IAAEK,KAAF;IAASQ;EAAT,IAAqBlB,KAAK,CAACmB,OAANnB,CAAc,MAAM;IAC7C,MAAM;MAAEoB,UAAF;MAAcF;IAAd,IAA0BrB,wBAAwB,CAAC;MACvDS,iBADuD;MAEvDO,KAFuD;MAGvDD,KAHuD;MAIvDE,iBAJuD;MAKvDE,UALuD;MAMvDC;IANuD,CAAD,CAAxD;;IAQA,IAAIN,SAAJ,EAAe;MACb,OAAO;QAAED,KAAK,EAAE,CAACU,UAAU,CAACC,GAAZ,EAAiBV,SAAjB,CAAT;QAAsCO;MAAtC,CAAP;IADF,OAEO;MACL,OAAO;QAAER,KAAK,EAAEU,UAAU,CAACC,GAApB;QAAyBH;MAAzB,CAAP;IAZ2C,EAc7C;;EAdyB,GAexB,CACD;EACAf,UAAU,CAACG,iBAAD,CAFT,EAGDO,KAHC,EAIDD,KAJC,EAKDE,iBALC,EAMDE,UANC,EAODL,SAPC,EAQDM,mBARC,EASDZ,KATC,CAfwBL,CAA3B;;EA0BA,IAAIsB,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,aAAzBA,IAA0CV,KAA9C,EAAqD;IACnD;IACAa,OAAO,CAACC,GAARD,CAAY,gBAAZA,EAA8BX,iBAA9BW;EACD;;EAEDlB,SAAS,CAACW,OAAVX,GAAoB,EAAE,GAAGA,SAAS,CAACW,OAAf;IAAwB,GAAGA;EAA3B,CAApBX;EAEA,OAAO,CAACG,KAAD,EAAQH,SAAR,CAAP;AAlDK","names":["getStyleAndFilteredProps","propConfig","useTheme","React","useNativeBaseConfig","useResponsiveQuery","stableHash","getStyledSystemPropsAndRestProps","props","styledSystemProps","restProps","key","useStyledSystemPropsResolver","style","propStyle","debug","theme","currentBreakpoint","config","strictMode","getResponsiveStyles","dataSet","useMemo","styleSheet","box","process","env","NODE_ENV","console","log"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/hooks/useStyledSystemPropsResolver.ts"],"sourcesContent":["import { getStyleAndFilteredProps, propConfig } from '../theme/styled-system';\nimport { useTheme } from './useTheme';\nimport React from 'react';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\nimport { useResponsiveQuery } from '../utils/useResponsiveQuery';\n//@ts-ignore\nimport stableHash from 'stable-hash';\n\nconst getStyledSystemPropsAndRestProps = (props: any) => {\n  const styledSystemProps: any = {};\n  const restProps: any = {};\n\n  for (let key in props) {\n    if (key in propConfig) {\n      styledSystemProps[key] = props[key];\n    } else {\n      restProps[key] = props[key];\n    }\n  }\n\n  return { styledSystemProps, restProps };\n};\n\nexport const useStyledSystemPropsResolver = ({\n  style: propStyle,\n  debug,\n  ...props\n}: any) => {\n  const theme = useTheme();\n  const { currentBreakpoint, config } = useNativeBaseConfig(\n    'makeStyledComponent'\n  );\n  const strictMode = config.strictMode;\n\n  const { getResponsiveStyles } = useResponsiveQuery();\n\n  const { styledSystemProps, restProps } = getStyledSystemPropsAndRestProps(\n    props\n  );\n\n  const { style, dataSet } = React.useMemo(() => {\n    const { styleSheet, dataSet } = getStyleAndFilteredProps({\n      styledSystemProps,\n      theme,\n      debug,\n      currentBreakpoint,\n      strictMode,\n      getResponsiveStyles,\n    });\n    if (propStyle) {\n      return { style: [styleSheet.box, propStyle], dataSet };\n    } else {\n      return { style: styleSheet.box, dataSet };\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    stableHash(styledSystemProps),\n    theme,\n    debug,\n    currentBreakpoint,\n    strictMode,\n    propStyle,\n    getResponsiveStyles,\n    props,\n  ]);\n  if (process.env.NODE_ENV === 'development' && debug) {\n    /* eslint-disable-next-line */\n    console.log('style,resprops', currentBreakpoint);\n  }\n\n  restProps.dataSet = { ...restProps.dataSet, ...dataSet };\n\n  return [style, restProps];\n};\n"]},"metadata":{},"sourceType":"module"}