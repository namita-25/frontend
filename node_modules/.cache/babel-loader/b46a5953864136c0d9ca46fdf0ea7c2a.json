{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Animated, Platform } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport { canUseDom } from '../../../utils';\nimport Box from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useToken } from '../../../hooks/useToken';\n\nconst Skeleton = (props, ref) => {\n  const isDomUsable = canUseDom();\n  const {\n    children,\n    startColor,\n    endColor,\n    ...resolvedProps\n  } = usePropsResolution('Skeleton', props); // Setting blink Animation\n\n  const blinkAnim = React.useRef(new Animated.Value(0)).current;\n  const tokenisedStartColor = useToken('colors', startColor); // Generating blink animation in a sequence\n\n  React.useEffect(() => {\n    //Check if window is loaded\n    if (isDomUsable) {\n      const blink = Animated.sequence([Animated.timing(blinkAnim, {\n        toValue: 1,\n        duration: resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n        useNativeDriver: Platform.OS !== 'web'\n      }), Animated.timing(blinkAnim, {\n        toValue: 0,\n        duration: resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n        useNativeDriver: Platform.OS !== 'web'\n      })]);\n      Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable, resolvedProps]);\n  const skeletonStyle = {\n    skeleton: {\n      height: '100%',\n      width: '100%',\n      backgroundColor: tokenisedStartColor,\n      opacity: blinkAnim // Bind opacity to animated value\n\n    }\n  }; //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return resolvedProps.isLoaded ? children : /*#__PURE__*/React.createElement(Box, _extends({\n    bg: endColor\n  }, resolvedProps, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(Animated.View, {\n    style: skeletonStyle.skeleton\n  }));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Skeleton));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,cAAnC;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AAEA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,QAAT,QAAyB,yBAAzB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAwBC,GAAxB,KAAqC;EACpD,MAAMC,WAAW,GAAGP,SAAS,EAA7B;EACA,MAAM;IACJQ,QADI;IAEJC,UAFI;IAGJC,QAHI;IAIJ,GAAGC;EAJC,IAKFZ,kBAAkB,CAAC,UAAD,EAAaM,KAAb,CALtB,CAFoD,CAQpD;;EACA,MAAMO,SAAS,GAAGlB,KAAK,CAACmB,MAANnB,CAAa,IAAIG,QAAQ,CAACiB,KAAb,CAAmB,CAAnB,CAAbpB,EAAoCqB,OAAtD;EACA,MAAMC,mBAAmB,GAAGb,QAAQ,CAAC,QAAD,EAAWM,UAAX,CAApC,CAVoD,CAYpD;;EACAf,KAAK,CAACuB,SAANvB,CAAgB,MAAM;IACpB;IACA,IAAIa,WAAJ,EAAiB;MACf,MAAMW,KAAK,GAAGrB,QAAQ,CAACsB,QAATtB,CAAkB,CAC9BA,QAAQ,CAACuB,MAATvB,CAAgBe,SAAhBf,EAA2B;QACzBwB,OAAO,EAAE,CADgB;QAEzBC,QAAQ,EACNX,aAAa,CAACY,YAAdZ,GAA6B,KAA7BA,IAAsC,IAAIA,aAAa,CAACa,KAAxDb,CAHuB;QAIzBc,eAAe,EAAE3B,QAAQ,CAAC4B,EAAT5B,KAAgB;MAJR,CAA3BD,CAD8B,EAO9BA,QAAQ,CAACuB,MAATvB,CAAgBe,SAAhBf,EAA2B;QACzBwB,OAAO,EAAE,CADgB;QAEzBC,QAAQ,EACNX,aAAa,CAACY,YAAdZ,GAA6B,KAA7BA,IAAsC,IAAIA,aAAa,CAACa,KAAxDb,CAHuB;QAIzBc,eAAe,EAAE3B,QAAQ,CAAC4B,EAAT5B,KAAgB;MAJR,CAA3BD,CAP8B,CAAlBA,CAAd;MAcAA,QAAQ,CAAC8B,IAAT9B,CAAcqB,KAAdrB,EAAqB+B,KAArB/B;IACD;EAlBH,GAmBG,CAACe,SAAD,EAAYL,WAAZ,EAAyBI,aAAzB,CAnBHjB;EAqBA,MAAMmC,aAAkB,GAAG;IACzBC,QAAQ,EAAE;MACRC,MAAM,EAAE,MADA;MAERC,KAAK,EAAE,MAFC;MAGRC,eAAe,EAAEjB,mBAHT;MAIRkB,OAAO,EAAEtB,SAJD,CAIY;;IAJZ;EADe,CAA3B,CAlCoD,CA2CpD;;EACA,IAAIV,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EAED,OAAOM,aAAa,CAACwB,QAAdxB,GACLH,QADKG,gBAGLjB,oBAACO,GAAD;IAAKmC,EAAE,EAAE1B;EAAT,GAAuBC,aAAvB;IAAsCL,GAAG,EAAEA;EAA3C,iBACEZ,oBAACG,QAAD,CAAUwC,IAAV;IAAeC,KAAK,EAAET,aAAa,CAACC;EAApC,EADF,CAHF;AAhDF;;AAyDA,4BAAenC,IAAI,eAACC,UAAU,CAACQ,QAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Animated","Platform","usePropsResolution","canUseDom","Box","useHasResponsiveProps","useToken","Skeleton","props","ref","isDomUsable","children","startColor","endColor","resolvedProps","blinkAnim","useRef","Value","current","tokenisedStartColor","useEffect","blink","sequence","timing","toValue","duration","fadeDuration","speed","useNativeDriver","OS","loop","start","skeletonStyle","skeleton","height","width","backgroundColor","opacity","isLoaded","bg","View","style"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Skeleton/Skeleton.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Animated, Platform } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport { canUseDom } from '../../../utils';\nimport Box from '../../primitives/Box';\nimport type { ISkeletonProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useToken } from '../../../hooks/useToken';\n\nconst Skeleton = (props: ISkeletonProps, ref: any) => {\n  const isDomUsable = canUseDom();\n  const {\n    children,\n    startColor,\n    endColor,\n    ...resolvedProps\n  } = usePropsResolution('Skeleton', props);\n  // Setting blink Animation\n  const blinkAnim = React.useRef(new Animated.Value(0)).current;\n  const tokenisedStartColor = useToken('colors', startColor);\n\n  // Generating blink animation in a sequence\n  React.useEffect(() => {\n    //Check if window is loaded\n    if (isDomUsable) {\n      const blink = Animated.sequence([\n        Animated.timing(blinkAnim, {\n          toValue: 1,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n        Animated.timing(blinkAnim, {\n          toValue: 0,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n      ]);\n      Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable, resolvedProps]);\n\n  const skeletonStyle: any = {\n    skeleton: {\n      height: '100%',\n      width: '100%',\n      backgroundColor: tokenisedStartColor,\n      opacity: blinkAnim, // Bind opacity to animated value\n    },\n  };\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return resolvedProps.isLoaded ? (\n    children\n  ) : (\n    <Box bg={endColor} {...resolvedProps} ref={ref}>\n      <Animated.View style={skeletonStyle.skeleton} />\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Skeleton));\n"]},"metadata":{},"sourceType":"module"}