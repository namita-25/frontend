{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Circle = (props, ref) => {\n  const resolvedProps = usePropsResolution('Circle', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, _extends({}, resolvedProps, {\n    ref: ref\n  }));\n};\n\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Circle));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AAEA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAsBC,GAAtB,KAAmC;EAChD,MAAMC,aAAa,GAAGL,kBAAkB,CAAC,QAAD,EAAWG,KAAX,CAAxC,CADgD,CAGhD;;EACA,IAAIF,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBAAOL,oBAACC,GAAD,eAASM,aAAT;IAAwBD,GAAG,EAAEA;EAA7B,GAAP;AAPF;;AAUA,4BAAeN,KAAK,CAACQ,IAANR,eAAWA,KAAK,CAACS,UAANT,CAAiBI,MAAjBJ,CAAXA,CAAf","names":["React","Box","usePropsResolution","useHasResponsiveProps","Circle","props","ref","resolvedProps","memo","forwardRef"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Center/Circle.tsx"],"sourcesContent":["import React from 'react';\nimport Box from '../../primitives/Box';\nimport type { ICircleProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Circle = (props: ICircleProps, ref: any) => {\n  const resolvedProps = usePropsResolution('Circle', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <Box {...resolvedProps} ref={ref} />;\n};\n\nexport default React.memo(React.forwardRef(Circle));\n"]},"metadata":{},"sourceType":"module"}