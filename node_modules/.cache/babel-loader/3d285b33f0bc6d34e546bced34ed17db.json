{"ast":null,"code":"import React from 'react';\nimport { mergeProps } from '@react-aria/utils';\nexport function usePress(_ref) {\n  let {\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    // No onPressUp on RN.\n    onPressChange,\n    isPressed: isPressedProp,\n    ...restProps\n  } = _ref;\n  let [isPressed, setPressed] = React.useState(false);\n  let pressProps = {\n    onPress: e => {\n      if (isDisabled) return;\n      onPress && onPress(e);\n    },\n    onPressIn: e => {\n      if (isDisabled) return;\n      onPressStart && onPressStart(e);\n      setPressed(true);\n      onPressChange && onPressChange(true);\n    },\n    onPressOut: e => {\n      if (isDisabled) return;\n      onPressEnd && onPressEnd(e);\n      setPressed(false);\n      onPressChange && onPressChange(false);\n      onPressUp && onPressUp(e);\n    }\n  };\n  pressProps = mergeProps(pressProps, restProps);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,mBAA3B;AA0CA,OAAO,SAASC,QAAT,OASyB;EAAA,IATP;IACvBC,UADuB;IAEvBC,OAFuB;IAGvBC,YAHuB;IAIvBC,UAJuB;IAKvBC,SALuB;IAKZ;IACXC,aANuB;IAOvBC,SAAS,EAAEC,aAPY;IAQvB,GAAGC;EARoB,CASO;EAC9B,IAAI,CAACF,SAAD,EAAYG,UAAZ,IAA0BZ,KAAK,CAACa,QAANb,CAAe,KAAfA,CAA9B;EAEA,IAAIc,UAAU,GAAG;IACfV,OAAO,EAAGW,CAAD,IAAY;MACnB,IAAIZ,UAAJ,EAAgB;MAChBC,OAAO,IAAIA,OAAO,CAACW,CAAD,CAAlBX;IAHa;IAKfY,SAAS,EAAGD,CAAD,IAAY;MACrB,IAAIZ,UAAJ,EAAgB;MAChBE,YAAY,IAAIA,YAAY,CAACU,CAAD,CAA5BV;MACAO,UAAU,CAAC,IAAD,CAAVA;MACAJ,aAAa,IAAIA,aAAa,CAAC,IAAD,CAA9BA;IATa;IAWfS,UAAU,EAAGF,CAAD,IAAY;MACtB,IAAIZ,UAAJ,EAAgB;MAChBG,UAAU,IAAIA,UAAU,CAACS,CAAD,CAAxBT;MACAM,UAAU,CAAC,KAAD,CAAVA;MACAJ,aAAa,IAAIA,aAAa,CAAC,KAAD,CAA9BA;MACAD,SAAS,IAAIA,SAAS,CAACQ,CAAD,CAAtBR;IACD;EAjBc,CAAjB;EAoBAO,UAAU,GAAGb,UAAU,CAACa,UAAD,EAAaH,SAAb,CAAvBG;EAEA,OAAO;IACLL,SAAS,EAAEC,aAAa,IAAID,SADvB;IAELK;EAFK,CAAP;AAID","names":["React","mergeProps","usePress","isDisabled","onPress","onPressStart","onPressEnd","onPressUp","onPressChange","isPressed","isPressedProp","restProps","setPressed","useState","pressProps","e","onPressIn","onPressOut"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/@react-native-aria/interactions/lib/module/usePress.ts"],"sourcesContent":["import React, { RefObject } from 'react';\nimport { mergeProps } from '@react-aria/utils';\n\nexport interface PressEvents {\n  /** Handler that is called when the press is released over the target. */\n  onPress?: (e: any) => void;\n  /** Handler that is called when a press interaction starts. */\n  onPressStart?: (e: any) => void;\n  /**\n   * Handler that is called when a press interaction ends, either\n   * over the target or when the pointer leaves the target.\n   */\n  onPressEnd?: (e: any) => void;\n  /** Handler that is called when the press state changes. */\n  onPressChange?: (isPressed: boolean) => void;\n  /**\n   * Handler that is called when a press is released over the target, regardless of\n   * whether it started on the target or not.\n   */\n  onPressUp?: (e: any) => void;\n}\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean;\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean;\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean;\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<any>;\n}\n\nexport type PressResult = {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean;\n  /** Props to spread on the target element. */\n  pressProps: any;\n};\n\nexport function usePress({\n  isDisabled,\n  onPress,\n  onPressStart,\n  onPressEnd,\n  onPressUp, // No onPressUp on RN.\n  onPressChange,\n  isPressed: isPressedProp,\n  ...restProps\n}: PressHookProps): PressResult {\n  let [isPressed, setPressed] = React.useState(false);\n\n  let pressProps = {\n    onPress: (e: any) => {\n      if (isDisabled) return;\n      onPress && onPress(e);\n    },\n    onPressIn: (e: any) => {\n      if (isDisabled) return;\n      onPressStart && onPressStart(e);\n      setPressed(true);\n      onPressChange && onPressChange(true);\n    },\n    onPressOut: (e: any) => {\n      if (isDisabled) return;\n      onPressEnd && onPressEnd(e);\n      setPressed(false);\n      onPressChange && onPressChange(false);\n      onPressUp && onPressUp(e);\n    },\n  };\n\n  pressProps = mergeProps(pressProps, restProps);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}