{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { TouchableOpacity, Platform } from 'react-native';\nimport Box from '../../primitives/Box';\nimport { AccordionItemContext } from './Context';\nimport { useThemeProps } from '../../../hooks';\nimport { mergeRefs } from '../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AccordionSummary = (_ref2, ref) => {\n  let {\n    children,\n    ...props\n  } = _ref2;\n  const {\n    index,\n    isOpen,\n    isDisabled,\n    onOpen,\n    onClose\n  } = React.useContext(AccordionItemContext);\n  const {\n    _hover,\n    _expanded,\n    _disabled,\n    ...themedProps\n  } = useThemeProps('AccordionSummary', props);\n\n  const pressHandler = () => {\n    isOpen ? onClose && onClose() : onOpen && onOpen();\n  };\n\n  const _ref = React.useRef(null);\n\n  const {\n    isHovered\n  } = useHover({}, _ref); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(TouchableOpacity, {\n    activeOpacity: 0.2,\n    disabled: isDisabled,\n    onPress: pressHandler,\n    accessible: true,\n    accessibilityRole: \"checkbox\",\n    ref: mergeRefs([ref, _ref])\n  }, /*#__PURE__*/React.createElement(Box, _extends({\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n  }, themedProps, isHovered && _hover, isOpen && _expanded, isDisabled && _disabled, !index && {\n    borderTopColor: 'transparent'\n  }, Platform.OS === 'web' ? {\n    disabled: isDisabled,\n    cursor: isDisabled ? 'not-allowed' : 'auto'\n  } : {}), children));\n};\n\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(AccordionSummary));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,QAA3B,QAA2C,cAA3C;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AAKA,SAASC,oBAAT,QAAqC,WAArC;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,gBAAgB,GAAG,QAEvBC,GAFuB,KAGpB;EAAA,IAFH;IAAEC,QAAF;IAAY,GAAGC;EAAf,CAEG;EACH,MAAM;IACJC,KADI;IAEJC,MAFI;IAGJC,UAHI;IAIJC,MAJI;IAKJC;EALI,IAM0BjB,KAAK,CAACkB,UAANlB,CAAiBI,oBAAjBJ,CANhC;EAQA,MAAM;IAAEmB,MAAF;IAAUC,SAAV;IAAqBC,SAArB;IAAgC,GAAGC;EAAnC,IAAmDjB,aAAa,CACpE,kBADoE,EAEpEO,KAFoE,CAAtE;;EAIA,MAAMW,YAAY,GAAG,MAAM;IACzBT,MAAM,GAAGG,OAAO,IAAIA,OAAO,EAArB,GAA0BD,MAAM,IAAIA,MAAM,EAAhDF;EADF;;EAIA,MAAMU,IAAI,GAAGxB,KAAK,CAACyB,MAANzB,CAAa,IAAbA,CAAb;;EACA,MAAM;IAAE0B;EAAF,IAAgBnB,QAAQ,CAAC,EAAD,EAAKiB,IAAL,CAA9B,CAlBG,CAmBH;;EACA,IAAIhB,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBACEZ,oBAACC,gBAAD;IACE0B,aAAa,EAAE,GADjB;IAEEC,QAAQ,EAAEb,UAFZ;IAGEc,OAAO,EAAEN,YAHX;IAIEO,UAAU,MAJZ;IAKEC,iBAAiB,EAAC,UALpB;IAMErB,GAAG,EAAEJ,SAAS,CAAC,CAACI,GAAD,EAAMc,IAAN,CAAD;EANhB,gBAQExB,oBAACG,GAAD;IACE6B,OAAO,EAAC,MADV;IAEEC,aAAa,EAAC,KAFhB;IAGEC,cAAc,EAAC,eAHjB;IAIEC,UAAU,EAAC;EAJb,GAKMb,WALN,EAMOI,SAAS,IAAIP,MANpB,EAOOL,MAAM,IAAIM,SAPjB,EAQOL,UAAU,IAAIM,SARrB,EASO,CAACR,KAAD,IAAU;IAAEuB,cAAc,EAAE;EAAlB,CATjB,EAUOlC,QAAQ,CAACmC,EAATnC,KAAgB,KAAhBA,GACD;IACE0B,QAAQ,EAAEb,UADZ;IAEEuB,MAAM,EAAEvB,UAAU,GAAG,aAAH,GAAmB;EAFvC,CADCb,GAKD,EAfN,GAiBGS,QAjBH,CARF,CADF;AA1BF;;AA0DA,4BAAeX,KAAK,CAACuC,IAANvC,eAAWA,KAAK,CAACwC,UAANxC,CAAiBS,gBAAjBT,CAAXA,CAAf","names":["React","TouchableOpacity","Platform","Box","AccordionItemContext","useThemeProps","mergeRefs","useHover","useHasResponsiveProps","AccordionSummary","ref","children","props","index","isOpen","isDisabled","onOpen","onClose","useContext","_hover","_expanded","_disabled","themedProps","pressHandler","_ref","useRef","isHovered","activeOpacity","disabled","onPress","accessible","accessibilityRole","display","flexDirection","justifyContent","alignItems","borderTopColor","OS","cursor","memo","forwardRef"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Accordion/AccordionSummary.tsx"],"sourcesContent":["import React from 'react';\nimport { TouchableOpacity, Platform } from 'react-native';\nimport Box from '../../primitives/Box';\nimport type {\n  IAccordionSummaryProps,\n  IAccordionItemContextProps,\n} from './types';\nimport { AccordionItemContext } from './Context';\nimport { useThemeProps } from '../../../hooks';\nimport { mergeRefs } from '../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AccordionSummary = (\n  { children, ...props }: IAccordionSummaryProps,\n  ref: any\n) => {\n  const {\n    index,\n    isOpen,\n    isDisabled,\n    onOpen,\n    onClose,\n  }: IAccordionItemContextProps = React.useContext(AccordionItemContext);\n\n  const { _hover, _expanded, _disabled, ...themedProps } = useThemeProps(\n    'AccordionSummary',\n    props\n  );\n  const pressHandler = () => {\n    isOpen ? onClose && onClose() : onOpen && onOpen();\n  };\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <TouchableOpacity\n      activeOpacity={0.2}\n      disabled={isDisabled}\n      onPress={pressHandler}\n      accessible\n      accessibilityRole=\"checkbox\"\n      ref={mergeRefs([ref, _ref])}\n    >\n      <Box\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        {...themedProps}\n        {...(isHovered && _hover)}\n        {...(isOpen && _expanded)}\n        {...(isDisabled && _disabled)}\n        {...(!index && { borderTopColor: 'transparent' })}\n        {...(Platform.OS === 'web'\n          ? {\n              disabled: isDisabled,\n              cursor: isDisabled ? 'not-allowed' : 'auto',\n            }\n          : {})}\n      >\n        {children}\n      </Box>\n    </TouchableOpacity>\n  );\n};\n\nexport default React.memo(React.forwardRef(AccordionSummary));\n"]},"metadata":{},"sourceType":"module"}