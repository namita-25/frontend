{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useEffect } from 'react';\nimport { StyleSheet, View } from 'react-native';\nconst PortalContext = /*#__PURE__*/React.createContext(null);\nlet globalOverlayCounter = 0;\nexport function PortalProvider(props) {\n  const [items, setItems] = React.useState([]);\n\n  const setOverlayItem = item => {\n    const overlayId = ++globalOverlayCounter;\n    setItems(prev => prev.concat([{\n      id: overlayId,\n      node: item\n    }]));\n    return overlayId;\n  };\n\n  const updateOverlayItem = (id, node) => {\n    setItems(prev => prev.map(item => {\n      if (item.id === id) {\n        return {\n          id,\n          node\n        };\n      }\n\n      return item;\n    }));\n  };\n\n  const removeOverlayItem = id => {\n    setItems(prev => {\n      const newItems = prev.filter(item => item.id !== id);\n      return newItems;\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(PortalContext.Provider, {\n    value: {\n      items,\n      setOverlayItem,\n      removeOverlayItem,\n      updateOverlayItem\n    }\n  }, props.children, items.map(item => {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: item.id\n    }, item.node);\n  }));\n}\n\nfunction OverlayView(_ref) {\n  let {\n    style,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(View, _extends({\n    pointerEvents: \"box-none\",\n    style: [StyleSheet.absoluteFill, style],\n    collapsable: false\n  }, props));\n}\n\nexport const OverlayProvider = PortalProvider;\nexport function OverlayContainer(props) {\n  const context = usePortalProvider();\n  const overlayId = React.useRef(undefined);\n  let contents = /*#__PURE__*/React.createElement(OverlayView, props);\n  useEffect(() => {\n    // Mount\n    if (overlayId.current === undefined) {\n      overlayId.current = context === null || context === void 0 ? void 0 : context.setOverlayItem(contents);\n    } // Update\n    else {\n      if (overlayId.current) {\n        context === null || context === void 0 ? void 0 : context.updateOverlayItem(overlayId.current, contents);\n      }\n    }\n  }, // To re-render the child\n  [props]); // Unmount\n\n  useEffect(() => {\n    return () => {\n      if (overlayId.current) {\n        context === null || context === void 0 ? void 0 : context.removeOverlayItem(overlayId.current);\n      }\n    };\n  }, []);\n  return null;\n}\n\nfunction usePortalProvider() {\n  const context = React.useContext(PortalContext);\n  return context;\n}","map":{"version":3,"mappings":"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","names":["React","useEffect","StyleSheet","View","PortalContext","createContext","globalOverlayCounter","PortalProvider","props","items","setItems","useState","setOverlayItem","item","overlayId","prev","concat","id","node","updateOverlayItem","map","removeOverlayItem","newItems","filter","Provider","value","children","Fragment","key","OverlayView","style","pointerEvents","absoluteFill","collapsable","OverlayProvider","OverlayContainer","context","usePortalProvider","useRef","undefined","contents","current","useContext"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/@react-native-aria/overlays/lib/module/Portal.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport type { ReactNode } from 'react';\nimport { StyleSheet, View, ViewProps } from 'react-native';\n\ntype OverlayItem = {\n  id: number;\n  node: ReactNode;\n};\n\ninterface PortalContext {\n  items: Array<OverlayItem>;\n  setOverlayItem: (node: ReactNode) => number;\n  removeOverlayItem: (id: number) => void;\n  updateOverlayItem: (id: number, node: ReactNode) => void;\n}\n\ninterface ModalProviderProps extends ViewProps {\n  children: ReactNode;\n  provider?: boolean;\n}\n\nconst PortalContext = React.createContext<PortalContext | null>(null);\n\nlet globalOverlayCounter = 0;\n\nexport function PortalProvider(props: { children: ReactNode }) {\n  const [items, setItems] = React.useState<Array<OverlayItem>>([]);\n\n  const setOverlayItem = (item: ReactNode) => {\n    const overlayId = ++globalOverlayCounter;\n    setItems((prev) => prev.concat([{ id: overlayId, node: item }]));\n    return overlayId;\n  };\n\n  const updateOverlayItem = (id: number, node: ReactNode) => {\n    setItems((prev) =>\n      prev.map((item) => {\n        if (item.id === id) {\n          return { id, node };\n        }\n        return item;\n      })\n    );\n  };\n\n  const removeOverlayItem = (id: number) => {\n    setItems((prev) => {\n      const newItems = prev.filter((item) => item.id !== id);\n      return newItems;\n    });\n  };\n\n  return (\n    <PortalContext.Provider\n      value={{ items, setOverlayItem, removeOverlayItem, updateOverlayItem }}\n    >\n      {props.children}\n\n      {/* Render Overlays */}\n      {items.map((item) => {\n        return <React.Fragment key={item.id}>{item.node}</React.Fragment>;\n      })}\n    </PortalContext.Provider>\n  );\n}\n\nfunction OverlayView({style, ...props}: ModalProviderProps) {\n  return (\n    <View\n      pointerEvents=\"box-none\"\n      style={[StyleSheet.absoluteFill, style]}\n      collapsable={false}\n      {...props}\n    />\n  );\n}\n\nexport const OverlayProvider = PortalProvider;\n\nexport function OverlayContainer(props: ModalProviderProps) {\n  const context = usePortalProvider();\n  const overlayId = React.useRef<number | undefined>(undefined);\n  let contents = <OverlayView {...props} />;\n\n  useEffect(\n    () => {\n      // Mount\n      if (overlayId.current === undefined) {\n        overlayId.current = context?.setOverlayItem(contents);\n      }\n      // Update\n      else {\n        if (overlayId.current) {\n          context?.updateOverlayItem(overlayId.current, contents);\n        }\n      }\n    },\n    // To re-render the child\n    [props]\n  );\n\n  // Unmount\n  useEffect(() => {\n    return () => {\n      if (overlayId.current) {\n        context?.removeOverlayItem(overlayId.current);\n      }\n    };\n  }, []);\n\n  return null;\n}\n\nfunction usePortalProvider() {\n  const context = React.useContext(PortalContext);\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}