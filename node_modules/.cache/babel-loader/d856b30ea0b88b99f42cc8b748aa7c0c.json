{"ast":null,"code":"//@ts-nocheck\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport { calculatePosition } from './calculatePosition';\nimport { useCallback, useRef, useState } from 'react';\nimport { useCloseOnScroll } from './useCloseOnScroll';\nimport { isRTL, useLayoutEffect } from '@react-native-aria/utils'; // @ts-ignore\n\nlet visualViewport = typeof window !== 'undefined' && window.visualViewport;\n/**\n * Handles positioning overlays like popovers and menus relative to a trigger\n * element, and updating the position when the window resizes.\n */\n\nexport function useOverlayPosition(props) {\n  const direction = isRTL() ? 'rtl' : undefined;\n  let {\n    targetRef,\n    overlayRef,\n    scrollRef = overlayRef,\n    placement = 'bottom',\n    containerPadding = 12,\n    shouldFlip = true,\n    boundaryElement = typeof document !== 'undefined' ? document.body : null,\n    offset = 0,\n    crossOffset = 0,\n    shouldUpdatePosition = true,\n    isOpen = true,\n    shouldOverlapWithTrigger = false,\n    onClose\n  } = props;\n  let [position, setPosition] = useState({\n    position: {},\n    arrowOffsetLeft: undefined,\n    arrowOffsetTop: undefined,\n    maxHeight: undefined,\n    placement: undefined\n  });\n  let deps = [shouldUpdatePosition, placement, overlayRef.current, targetRef.current, scrollRef.current, containerPadding, shouldFlip, boundaryElement, offset, crossOffset, isOpen, direction, shouldOverlapWithTrigger];\n  let updatePosition = useCallback(() => {\n    if (shouldUpdatePosition === false || !isOpen || !overlayRef.current || !targetRef.current || !scrollRef.current || !boundaryElement) {\n      return;\n    }\n\n    setPosition(calculatePosition({\n      placement: translateRTL(placement, direction),\n      overlayNode: overlayRef.current,\n      targetNode: targetRef.current,\n      scrollNode: scrollRef.current,\n      padding: containerPadding,\n      shouldFlip,\n      boundaryElement,\n      offset,\n      crossOffset,\n      shouldOverlapWithTrigger\n    }));\n  }, deps); // Update position when anything changes\n\n  useLayoutEffect(updatePosition, deps); // Update position on window resize\n\n  useResize(updatePosition); // Reposition the overlay and do not close on scroll while the visual viewport is resizing.\n  // This will ensure that overlays adjust their positioning when the iOS virtual keyboard appears.\n\n  let isResizing = useRef(false);\n  useLayoutEffect(() => {\n    let timeout;\n\n    let onResize = () => {\n      isResizing.current = true;\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        isResizing.current = false;\n      }, 500);\n      updatePosition();\n    };\n\n    visualViewport === null || visualViewport === void 0 ? void 0 : visualViewport.addEventListener('resize', onResize);\n    return () => {\n      visualViewport === null || visualViewport === void 0 ? void 0 : visualViewport.removeEventListener('resize', onResize);\n    };\n  }, [updatePosition]);\n  let close = useCallback(() => {\n    if (!isResizing.current) {\n      onClose();\n    }\n  }, [onClose, isResizing]); // When scrolling a parent scrollable region of the trigger (other than the body),\n  // we hide the popover. Otherwise, its position would be incorrect.\n\n  useCloseOnScroll({\n    triggerRef: targetRef,\n    isOpen,\n    onClose: onClose ? close : undefined\n  });\n  return {\n    rendered: true,\n    overlayProps: {\n      style: {\n        position: 'absolute',\n        zIndex: 100000,\n        // should match the z-index in ModalTrigger\n        ...position.position,\n        maxHeight: position.maxHeight\n      }\n    },\n    placement: position.placement,\n    arrowProps: {\n      style: {\n        left: position.arrowOffsetLeft,\n        top: position.arrowOffsetTop\n      }\n    },\n    updatePosition\n  };\n}\n\nfunction useResize(onResize) {\n  useLayoutEffect(() => {\n    window.addEventListener('resize', onResize, false);\n    return () => {\n      window.removeEventListener('resize', onResize, false);\n    };\n  }, [onResize]);\n}\n\nfunction translateRTL(position, direction) {\n  if (direction === 'rtl') {\n    return position.replace('start', 'right').replace('end', 'left');\n  }\n\n  return position.replace('start', 'left').replace('end', 'right');\n}","map":{"version":3,"mappings":"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","names":["calculatePosition","useCallback","useRef","useState","useCloseOnScroll","isRTL","useLayoutEffect","visualViewport","window","useOverlayPosition","props","direction","undefined","targetRef","overlayRef","scrollRef","placement","containerPadding","shouldFlip","boundaryElement","document","body","offset","crossOffset","shouldUpdatePosition","isOpen","shouldOverlapWithTrigger","onClose","position","setPosition","arrowOffsetLeft","arrowOffsetTop","maxHeight","deps","current","updatePosition","translateRTL","overlayNode","targetNode","scrollNode","padding","useResize","isResizing","timeout","onResize","clearTimeout","setTimeout","addEventListener","removeEventListener","close","triggerRef","rendered","overlayProps","style","zIndex","arrowProps","left","top","replace"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/@react-native-aria/overlays/lib/module/web/overlays/src/useOverlayPosition.ts"],"sourcesContent":["//@ts-nocheck\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { calculatePosition, PositionResult } from './calculatePosition';\nimport {\n  HTMLAttributes,\n  RefObject,\n  useCallback,\n  useRef,\n  useState,\n} from 'react';\nimport { Placement, PlacementAxis, PositionProps } from '@react-types/overlays';\nimport { useCloseOnScroll } from './useCloseOnScroll';\nimport { isRTL, useLayoutEffect } from '@react-native-aria/utils';\n\ninterface AriaPositionProps extends PositionProps {\n  /**\n   * Element that that serves as the positioning boundary.\n   * @default document.body\n   */\n  boundaryElement?: HTMLElement;\n  /**\n   * The ref for the element which the overlay positions itself with respect to.\n   */\n  targetRef: RefObject<HTMLElement>;\n  /**\n   * The ref for the overlay element.\n   */\n  overlayRef: RefObject<HTMLElement>;\n  /**\n   * A ref for the scrollable region within the overlay.\n   * @default overlayRef\n   */\n  scrollRef?: RefObject<HTMLElement>;\n  /**\n   * Whether the overlay should update its position automatically.\n   * @default true\n   */\n  shouldUpdatePosition?: boolean;\n  /** Handler that is called when the overlay should close. */\n  onClose?: () => void;\n  /** Determines whether the overlay should overlap with the trigger */\n  shouldOverlapWithTrigger?: boolean;\n}\n\ninterface PositionAria {\n  /** Props for the overlay container element. */\n  overlayProps: HTMLAttributes<Element>;\n  /** Props for the overlay tip arrow if any. */\n  arrowProps: HTMLAttributes<Element>;\n  /** Placement of the overlay with respect to the overlay trigger. */\n  placement: PlacementAxis;\n  /** Updates the position of the overlay. */\n  updatePosition(): void;\n}\n\n// @ts-ignore\nlet visualViewport = typeof window !== 'undefined' && window.visualViewport;\n\n/**\n * Handles positioning overlays like popovers and menus relative to a trigger\n * element, and updating the position when the window resizes.\n */\nexport function useOverlayPosition(props: AriaPositionProps): PositionAria {\n  const direction = isRTL() ? 'rtl' : undefined;\n  let {\n    targetRef,\n    overlayRef,\n    scrollRef = overlayRef,\n    placement = 'bottom' as Placement,\n    containerPadding = 12,\n    shouldFlip = true,\n    boundaryElement = typeof document !== 'undefined' ? document.body : null,\n    offset = 0,\n    crossOffset = 0,\n    shouldUpdatePosition = true,\n    isOpen = true,\n    shouldOverlapWithTrigger = false,\n    onClose,\n  } = props;\n  let [position, setPosition] = useState<PositionResult>({\n    position: {},\n    arrowOffsetLeft: undefined,\n    arrowOffsetTop: undefined,\n    maxHeight: undefined,\n    placement: undefined,\n  });\n\n  let deps = [\n    shouldUpdatePosition,\n    placement,\n    overlayRef.current,\n    targetRef.current,\n    scrollRef.current,\n    containerPadding,\n    shouldFlip,\n    boundaryElement,\n    offset,\n    crossOffset,\n    isOpen,\n    direction,\n    shouldOverlapWithTrigger\n  ];\n\n  let updatePosition = useCallback(() => {\n    if (\n      shouldUpdatePosition === false ||\n      !isOpen ||\n      !overlayRef.current ||\n      !targetRef.current ||\n      !scrollRef.current ||\n      !boundaryElement\n    ) {\n      return;\n    }\n\n    setPosition(\n      calculatePosition({\n        placement: translateRTL(placement, direction),\n        overlayNode: overlayRef.current,\n        targetNode: targetRef.current,\n        scrollNode: scrollRef.current,\n        padding: containerPadding,\n        shouldFlip,\n        boundaryElement,\n        offset,\n        crossOffset,\n        shouldOverlapWithTrigger,\n      })\n    );\n  }, deps);\n\n  // Update position when anything changes\n  useLayoutEffect(updatePosition, deps);\n\n  // Update position on window resize\n  useResize(updatePosition);\n\n  // Reposition the overlay and do not close on scroll while the visual viewport is resizing.\n  // This will ensure that overlays adjust their positioning when the iOS virtual keyboard appears.\n  let isResizing = useRef(false);\n  useLayoutEffect(() => {\n    let timeout: NodeJS.Timeout;\n    let onResize = () => {\n      isResizing.current = true;\n      clearTimeout(timeout);\n\n      timeout = setTimeout(() => {\n        isResizing.current = false;\n      }, 500);\n\n      updatePosition();\n    };\n\n    visualViewport?.addEventListener('resize', onResize);\n\n    return () => {\n      visualViewport?.removeEventListener('resize', onResize);\n    };\n  }, [updatePosition]);\n\n  let close = useCallback(() => {\n    if (!isResizing.current) {\n      onClose();\n    }\n  }, [onClose, isResizing]);\n\n  // When scrolling a parent scrollable region of the trigger (other than the body),\n  // we hide the popover. Otherwise, its position would be incorrect.\n  useCloseOnScroll({\n    triggerRef: targetRef,\n    isOpen,\n    onClose: onClose ? close : undefined,\n  });\n\n  return {\n    rendered: true,\n    overlayProps: {\n      style: {\n        position: 'absolute',\n        zIndex: 100000, // should match the z-index in ModalTrigger\n        ...position.position,\n        maxHeight: position.maxHeight,\n      },\n    },\n    placement: position.placement,\n    arrowProps: {\n      style: {\n        left: position.arrowOffsetLeft,\n        top: position.arrowOffsetTop,\n      },\n    },\n    updatePosition,\n  };\n}\n\nfunction useResize(onResize) {\n  useLayoutEffect(() => {\n    window.addEventListener('resize', onResize, false);\n    return () => {\n      window.removeEventListener('resize', onResize, false);\n    };\n  }, [onResize]);\n}\n\nfunction translateRTL(position, direction) {\n  if (direction === 'rtl') {\n    return position.replace('start', 'right').replace('end', 'left');\n  }\n  return position.replace('start', 'left').replace('end', 'right');\n}\n"]},"metadata":{},"sourceType":"module"}