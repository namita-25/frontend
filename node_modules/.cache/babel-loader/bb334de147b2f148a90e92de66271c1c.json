{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport Text from '../../primitives/Text';\nimport { useFormControlContext } from './useFormControl';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { mergeRefs } from '../../../utils';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlLabel = (_ref2, ref) => {\n  let {\n    children,\n    ...props\n  } = _ref2;\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n\n  const _ref = React.useRef(null);\n\n  const {\n    _astrick,\n    ...resolvedProps\n  } = usePropsResolution('FormControlLabel', combinedProps, {\n    isDisabled: combinedProps.isDisabled,\n    isReadOnly: combinedProps.isReadOnly,\n    isInvalid: combinedProps.isInvalid // isRequired: combinedProps.isRequired,\n\n  });\n\n  const requiredAsterisk = () => /*#__PURE__*/React.createElement(Text, _extends({\n    _web: {\n      accessibilityHidden: true,\n      //@ts-ignore\n      accessibilityRole: 'presentation'\n    }\n  }, _astrick), \"*\");\n\n  const mergedRef = mergeRefs([_ref, ref]);\n  React.useEffect(() => {\n    if (_ref.current) {\n      // RN web doesn't support htmlFor for Label element yet\n      if (props.htmlFor) {\n        _ref.current.htmlFor = props.htmlFor;\n      } else if (resolvedProps !== null && resolvedProps !== void 0 && resolvedProps.nativeID) {\n        _ref.current.htmlFor = resolvedProps.nativeID;\n      }\n    }\n  }, [resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.nativeID, props.htmlFor]);\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    _web: {\n      //@ts-ignore\n      accessibilityRole: 'label'\n    }\n  }, resolvedProps, {\n    nativeID: resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.labelId,\n    ref: mergedRef\n  }), children, (resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.isRequired) && requiredAsterisk());\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(FormControlLabel));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAASC,qBAAT,QAAsC,kBAAtC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AAEA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,sBAAT,QAAuC,gBAAvC;;AAEA,MAAMC,gBAAgB,GAAG,QAEvBC,GAFuB,KAGpB;EAAA,IAFH;IAAEC,QAAF;IAAY,GAAGC;EAAf,CAEG;EACH,MAAMC,kBAAkB,GAAGR,qBAAqB,EAAhD;EACA,MAAMS,aAAa,GAAGN,sBAAsB,CAACK,kBAAD,EAAqBD,KAArB,CAA5C;;EACA,MAAMG,IAAI,GAAGf,KAAK,CAACgB,MAANhB,CAA+B,IAA/BA,CAAb;;EACA,MAAM;IAAEiB,QAAF;IAAY,GAAGC;EAAf,IAAiCZ,kBAAkB,CACvD,kBADuD,EAEvDQ,aAFuD,EAGvD;IACEK,UAAU,EAAEL,aAAa,CAACK,UAD5B;IAEEC,UAAU,EAAEN,aAAa,CAACM,UAF5B;IAGEC,SAAS,EAAEP,aAAa,CAACO,SAH3B,CAIE;;EAJF,CAHuD,CAAzD;;EAWA,MAAMC,gBAAgB,GAAG,mBACvBtB,oBAACI,IAAD;IACEmB,IAAI,EAAE;MACJC,mBAAmB,EAAE,IADjB;MAEJ;MACAC,iBAAiB,EAAE;IAHf;EADR,GAMMR,QANN,OADF;;EAYA,MAAMS,SAAS,GAAGnB,SAAS,CAAC,CAACQ,IAAD,EAAOL,GAAP,CAAD,CAA3B;EACAV,KAAK,CAAC2B,SAAN3B,CAAgB,MAAM;IACpB,IAAIe,IAAI,CAACa,OAAT,EAAkB;MAChB;MACA,IAAIhB,KAAK,CAACiB,OAAV,EAAmB;QACjBd,IAAI,CAACa,OAALb,CAAac,OAAbd,GAAuBH,KAAK,CAACiB,OAA7Bd;MADF,OAEO,IAAIG,aAAJ,SAAIA,iBAAJ,WAAIA,iBAAa,CAAEY,QAAnB,EAA6B;QAClCf,IAAI,CAACa,OAALb,CAAac,OAAbd,GAAuBG,aAAa,CAACY,QAArCf;MACD;IACF;EARH,GASG,CAACG,aAAD,SAACA,iBAAD,WAACA,GAAD,MAACA,gBAAa,CAAEY,QAAhB,EAA0BlB,KAAK,CAACiB,OAAhC,CATH7B;EAWA,oBACEA,oBAACG,GAAD;IACEoB,IAAI,EAAE;MACJ;MACAE,iBAAiB,EAAE;IAFf;EADR,GAKMP,aALN;IAMEY,QAAQ,EAAEZ,aAAF,SAAEA,iBAAF,WAAEA,GAAF,MAAEA,gBAAa,CAAEa,OAN3B;IAOErB,GAAG,EAAEgB;EAPP,IASGf,QATH,EAUG,cAAa,SAAbO,iBAAa,WAAbA,yBAAa,CAAEc,UAAf,KAA6BV,gBAAgB,EAVhD,CADF;AA1CF;;AAyDA,4BAAerB,IAAI,eAACC,UAAU,CAACO,gBAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Box","Text","useFormControlContext","usePropsResolution","mergeRefs","combineContextAndProps","FormControlLabel","ref","children","props","formControlContext","combinedProps","_ref","useRef","_astrick","resolvedProps","isDisabled","isReadOnly","isInvalid","requiredAsterisk","_web","accessibilityHidden","accessibilityRole","mergedRef","useEffect","current","htmlFor","nativeID","labelId","isRequired"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/FormControl/FormControlLabel.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport Text from '../../primitives/Text';\nimport { useFormControlContext } from './useFormControl';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IFormControlLabelProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlLabel = (\n  { children, ...props }: IFormControlLabelProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const _ref = React.useRef<HTMLLabelElement>(null);\n  const { _astrick, ...resolvedProps } = usePropsResolution(\n    'FormControlLabel',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  const requiredAsterisk = () => (\n    <Text\n      _web={{\n        accessibilityHidden: true,\n        //@ts-ignore\n        accessibilityRole: 'presentation',\n      }}\n      {..._astrick}\n    >\n      *\n    </Text>\n  );\n  const mergedRef = mergeRefs([_ref, ref]);\n  React.useEffect(() => {\n    if (_ref.current) {\n      // RN web doesn't support htmlFor for Label element yet\n      if (props.htmlFor) {\n        _ref.current.htmlFor = props.htmlFor;\n      } else if (resolvedProps?.nativeID) {\n        _ref.current.htmlFor = resolvedProps.nativeID;\n      }\n    }\n  }, [resolvedProps?.nativeID, props.htmlFor]);\n\n  return (\n    <Box\n      _web={{\n        //@ts-ignore\n        accessibilityRole: 'label',\n      }}\n      {...resolvedProps}\n      nativeID={resolvedProps?.labelId}\n      ref={mergedRef}\n    >\n      {children}\n      {resolvedProps?.isRequired && requiredAsterisk()}\n    </Box>\n  );\n};\nexport default memo(forwardRef(FormControlLabel));\n"]},"metadata":{},"sourceType":"module"}