{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { TouchableOpacity, Platform } from 'react-native';\nimport { VStack, Box } from '../../primitives';\nimport { useThemeProps } from '../../../hooks';\nimport { NumberInputContext } from './Context';\nimport { ChevronUpIcon, ChevronDownIcon } from '../../primitives/Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nexport const NBStepper = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    children,\n    ...props\n  } = _ref;\n  const {\n    style,\n    isIncrement,\n    disablitityCheck,\n    _active,\n    _disabled,\n    isDisabled,\n    accessibilityLabel,\n    pressHandler,\n    iconColor,\n    ...newProps\n  } = useThemeProps('NumberInputStepper', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(TouchableOpacity, {\n    activeOpacity: 0.2,\n    disabled: disablitityCheck || isDisabled,\n    onPress: pressHandler,\n    accessible: true,\n    accessibilityLabel: accessibilityLabel,\n    ref: ref\n  }, /*#__PURE__*/React.createElement(Box, _extends({}, newProps, _active, disablitityCheck || isDisabled ? _disabled : {}, {\n    borderColor: \"transparent\",\n    style: style,\n    opacity: disablitityCheck || isDisabled ? 0.4 : 1\n  }, Platform.OS === 'web' ? {\n    disabled: disablitityCheck || isDisabled,\n    cursor: disablitityCheck || isDisabled ? 'not-allowed' : 'auto'\n  } : {}), children || isIncrement ? /*#__PURE__*/React.createElement(ChevronUpIcon, {\n    color: iconColor\n  }) : /*#__PURE__*/React.createElement(ChevronDownIcon, {\n    color: iconColor\n  })));\n});\n\nconst NumberInputStepper = (_ref2, ref) => {\n  let {\n    children,\n    ...props\n  } = _ref2;\n  const {\n    //@ts-ignore\n    numberInputStepper,\n    setNumberInputStepper\n  } = React.useContext(NumberInputContext);\n  React.useEffect(() => {\n    !numberInputStepper && setNumberInputStepper( /*#__PURE__*/React.createElement(VStack, _extends({}, props, {\n      ref: ref\n    }), children));\n  }, [numberInputStepper, setNumberInputStepper, props, children, ref]);\n  return null;\n};\n\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(NumberInputStepper));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,QAA3B,QAA2C,cAA3C;AACA,SAASC,MAAT,EAAiBC,GAAjB,QAA4B,kBAA5B;AACA,SAASC,aAAT,QAA8B,gBAA9B;AAEA,SAASC,kBAAT,QAAmC,WAAnC;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,6BAA/C;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,OAAO,MAAMC,SAAS,gBAAGV,KAAK,CAACW,UAANX,CACvB,OAA8BY,GAA9B,KAA4C;EAAA,IAA3C;IAAEC,QAAF;IAAY,GAAGC;EAAf,CAA2C;EAC1C,MAAM;IACJC,KADI;IAEJC,WAFI;IAGJC,gBAHI;IAIJC,OAJI;IAKJC,SALI;IAMJC,UANI;IAOJC,kBAPI;IAQJC,YARI;IASJC,SATI;IAUJ,GAAGC;EAVC,IAWFnB,aAAa,CAAC,oBAAD,EAAuBS,KAAvB,CAXjB,CAD0C,CAa1C;;EACA,IAAIL,qBAAqB,CAACK,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBACEd,oBAACC,gBAAD;IACEwB,aAAa,EAAE,GADjB;IAEEC,QAAQ,EAAET,gBAAgB,IAAIG,UAFhC;IAGEO,OAAO,EAAEL,YAHX;IAIEM,UAAU,MAJZ;IAKEP,kBAAkB,EAAEA,kBALtB;IAMET,GAAG,EAAEA;EANP,gBAQEZ,oBAACI,GAAD,eACMoB,QADN,EAEMN,OAFN,EAGOD,gBAAgB,IAAIG,UAApBH,GAAiCE,SAAjCF,GAA6C,EAHpD;IAIEY,WAAW,EAAC,aAJd;IAKEd,KAAK,EAAEA,KALT;IAMEe,OAAO,EAAEb,gBAAgB,IAAIG,UAApBH,GAAiC,GAAjCA,GAAuC;EANlD,GAOOf,QAAQ,CAAC6B,EAAT7B,KAAgB,KAAhBA,GACD;IACEwB,QAAQ,EAAET,gBAAgB,IAAIG,UADhC;IAEEY,MAAM,EAAEf,gBAAgB,IAAIG,UAApBH,GAAiC,aAAjCA,GAAiD;EAF3D,CADCf,GAKD,EAZN,GAcGW,QAAQ,IAAIG,WAAZH,gBACCb,oBAACO,aAAD;IAAe0B,KAAK,EAAEV;EAAtB,EADDV,gBAGCb,oBAACQ,eAAD;IAAiByB,KAAK,EAAEV;EAAxB,EAjBJ,CARF,CADF;AAlBqB,EAAlB;;AAoDP,MAAMW,kBAAkB,GAAG,QAEzBtB,GAFyB,KAGtB;EAAA,IAFH;IAAEC,QAAF;IAAY,GAAGC;EAAf,CAEG;EACH,MAAM;IACJ;IACAqB,kBAFI;IAGJC;EAHI,IAImBpC,KAAK,CAACqC,UAANrC,CAAiBM,kBAAjBN,CAJzB;EAMAA,KAAK,CAACsC,SAANtC,CAAgB,MAAM;IACpB,CAACmC,kBAAD,IACEC,qBAAqB,eACnBpC,oBAACG,MAAD,eAAYW,KAAZ;MAAmBF,GAAG,EAAEA;IAAxB,IACGC,QADH,CADmB,CADvB;EADF,GAOG,CAACsB,kBAAD,EAAqBC,qBAArB,EAA4CtB,KAA5C,EAAmDD,QAAnD,EAA6DD,GAA7D,CAPHZ;EAQA,OAAO,IAAP;AAlBF;;AAqBA,4BAAeA,KAAK,CAACuC,IAANvC,eAAWA,KAAK,CAACW,UAANX,CAAiBkC,kBAAjBlC,CAAXA,CAAf","names":["React","TouchableOpacity","Platform","VStack","Box","useThemeProps","NumberInputContext","ChevronUpIcon","ChevronDownIcon","useHasResponsiveProps","NBStepper","forwardRef","ref","children","props","style","isIncrement","disablitityCheck","_active","_disabled","isDisabled","accessibilityLabel","pressHandler","iconColor","newProps","activeOpacity","disabled","onPress","accessible","borderColor","opacity","OS","cursor","color","NumberInputStepper","numberInputStepper","setNumberInputStepper","useContext","useEffect","memo"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/NumberInput/NumberInputStepper.tsx"],"sourcesContent":["import React from 'react';\nimport { TouchableOpacity, Platform } from 'react-native';\nimport { VStack, Box } from '../../primitives';\nimport { useThemeProps } from '../../../hooks';\nimport type { INumberInputSteppersProps, INumberInputContext } from './types';\nimport { NumberInputContext } from './Context';\nimport { ChevronUpIcon, ChevronDownIcon } from '../../primitives/Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const NBStepper = React.forwardRef(\n  ({ children, ...props }: any, ref?: any) => {\n    const {\n      style,\n      isIncrement,\n      disablitityCheck,\n      _active,\n      _disabled,\n      isDisabled,\n      accessibilityLabel,\n      pressHandler,\n      iconColor,\n      ...newProps\n    } = useThemeProps('NumberInputStepper', props);\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n    return (\n      <TouchableOpacity\n        activeOpacity={0.2}\n        disabled={disablitityCheck || isDisabled}\n        onPress={pressHandler}\n        accessible\n        accessibilityLabel={accessibilityLabel}\n        ref={ref}\n      >\n        <Box\n          {...newProps}\n          {..._active}\n          {...(disablitityCheck || isDisabled ? _disabled : {})}\n          borderColor=\"transparent\"\n          style={style}\n          opacity={disablitityCheck || isDisabled ? 0.4 : 1}\n          {...(Platform.OS === 'web'\n            ? {\n                disabled: disablitityCheck || isDisabled,\n                cursor: disablitityCheck || isDisabled ? 'not-allowed' : 'auto',\n              }\n            : {})}\n        >\n          {children || isIncrement ? (\n            <ChevronUpIcon color={iconColor} />\n          ) : (\n            <ChevronDownIcon color={iconColor} />\n          )}\n        </Box>\n      </TouchableOpacity>\n    );\n  }\n);\n\nconst NumberInputStepper = (\n  { children, ...props }: INumberInputSteppersProps,\n  ref?: any\n) => {\n  const {\n    //@ts-ignore\n    numberInputStepper,\n    setNumberInputStepper,\n  }: INumberInputContext = React.useContext(NumberInputContext);\n\n  React.useEffect(() => {\n    !numberInputStepper &&\n      setNumberInputStepper(\n        <VStack {...props} ref={ref}>\n          {children}\n        </VStack>\n      );\n  }, [numberInputStepper, setNumberInputStepper, props, children, ref]);\n  return null;\n};\n\nexport default React.memo(React.forwardRef(NumberInputStepper));\n"]},"metadata":{},"sourceType":"module"}