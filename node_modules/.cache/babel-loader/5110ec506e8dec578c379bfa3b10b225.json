{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef } from 'react';\nimport { View as RNView } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst StyledView = makeStyledComponent(RNView);\nexport const View = /*#__PURE__*/forwardRef((props, ref) => {\n  const { ...resolvedProps\n  } = usePropsResolution('View', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(StyledView, _extends({}, resolvedProps, {\n    ref: ref\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,IAAI,IAAIC,MAAjB,QAA+B,cAA/B;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AAEA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,MAAMC,UAAe,GAAGF,mBAAmB,CAACF,MAAD,CAA3C;AAEA,OAAO,MAAMD,IAAI,gBAAGD,UAAU,CAAC,CAACO,KAAD,EAAoBC,GAApB,KAAiC;EAC9D,MAAM,EAAE,GAAGC;EAAL,IAAuBN,kBAAkB,CAAC,MAAD,EAASI,KAAT,CAA/C,CAD8D,CAE9D;;EACA,IAAIF,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBAAOR,oBAACO,UAAD,eAAgBG,aAAhB;IAA+BD,GAAG,EAAEA;EAApC,GAAP;AAN4B,EAAvB","names":["React","forwardRef","View","RNView","usePropsResolution","makeStyledComponent","useHasResponsiveProps","StyledView","props","ref","resolvedProps"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/basic/View/View.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport { View as RNView } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport type { IViewProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyledView: any = makeStyledComponent(RNView);\n\nexport const View = forwardRef((props: IViewProps, ref: any) => {\n  const { ...resolvedProps } = usePropsResolution('View', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <StyledView {...resolvedProps} ref={ref} />;\n});\n"]},"metadata":{},"sourceType":"module"}