{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport { Popper } from '../Popper';\nimport { mergeRefs } from '../../../utils';\nimport { useControllableState } from '../../../hooks';\nimport { PopoverContext } from './PopoverContext';\nimport Box from '../../primitives/Box';\nimport Backdrop from '../Backdrop';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { PresenceTransition } from '../Transitions';\nimport { StyleSheet } from 'react-native';\nimport { useId } from '@react-native-aria/utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { uniqueId } from 'lodash';\nimport { ResponsiveQueryContext } from '../../../utils/useResponsiveQuery/ResponsiveQueryProvider';\n\nconst Popover = (_ref, ref) => {\n  let {\n    onOpen,\n    trigger,\n    onClose,\n    isOpen: isOpenProp,\n    children,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    useRNModal,\n    trapFocus = true,\n    ...props\n  } = _ref;\n  const triggerRef = React.useRef(null);\n  const mergedRef = mergeRefs([triggerRef]);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: value => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    }\n  });\n  const [bodyMounted, setBodyMounted] = React.useState(false);\n  const [headerMounted, setHeaderMounted] = React.useState(false);\n  let id = uniqueId();\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  if (!disableCSSMediaQueries) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    id = useId();\n  }\n\n  const popoverContentId = \"\".concat(id, \"-content\");\n  const headerId = \"\".concat(popoverContentId, \"-header\");\n  const bodyId = \"\".concat(popoverContentId, \"-body\");\n  const handleOpen = React.useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  const updatedTrigger = () => {\n    return trigger({\n      'ref': mergedRef,\n      'onPress': handleOpen,\n      'aria-expanded': isOpen ? true : false,\n      'aria-controls': isOpen ? popoverContentId : undefined,\n      'aria-haspopup': true\n    }, {\n      open: isOpen\n    });\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  }; //TODO: refactor for responsive prop\n\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, {\n    ref: ref\n  }, updatedTrigger(), /*#__PURE__*/React.createElement(Overlay, {\n    isOpen: isOpen,\n    onRequestClose: handleClose,\n    useRNModalOnAndroid: true,\n    useRNModal: useRNModal,\n    unmountOnExit: true\n  }, /*#__PURE__*/React.createElement(PresenceTransition, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1,\n      transition: {\n        duration: 150\n      }\n    },\n    exit: {\n      opacity: 0,\n      scale: 0.95,\n      transition: {\n        duration: 100\n      }\n    },\n    visible: isOpen,\n    style: StyleSheet.absoluteFill\n  }, /*#__PURE__*/React.createElement(Popper, _extends({\n    onClose: handleClose,\n    triggerRef: triggerRef\n  }, props), /*#__PURE__*/React.createElement(Backdrop, {\n    onPress: handleClose,\n    bg: \"transparent\"\n  }), /*#__PURE__*/React.createElement(PopoverContext.Provider, {\n    value: {\n      onClose: handleClose,\n      initialFocusRef,\n      finalFocusRef,\n      popoverContentId,\n      bodyId,\n      headerId,\n      headerMounted,\n      bodyMounted,\n      setBodyMounted,\n      setHeaderMounted,\n      isOpen\n    }\n  }, /*#__PURE__*/React.createElement(FocusScope, {\n    contain: trapFocus,\n    restoreFocus: true,\n    autoFocus: true\n  }, children))))));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Popover));","map":{"version":3,"mappings":"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","names":["React","forwardRef","memo","Popper","mergeRefs","useControllableState","PopoverContext","Box","Backdrop","FocusScope","PresenceTransition","StyleSheet","useId","Overlay","useHasResponsiveProps","uniqueId","ResponsiveQueryContext","Popover","ref","onOpen","trigger","onClose","isOpen","isOpenProp","children","defaultIsOpen","initialFocusRef","finalFocusRef","useRNModal","trapFocus","props","triggerRef","useRef","mergedRef","setIsOpen","value","defaultValue","onChange","bodyMounted","setBodyMounted","useState","headerMounted","setHeaderMounted","id","responsiveQueryContext","useContext","disableCSSMediaQueries","popoverContentId","headerId","bodyId","handleOpen","useCallback","updatedTrigger","undefined","open","handleClose","onRequestClose","useRNModalOnAndroid","unmountOnExit","initial","opacity","animate","transition","duration","exit","scale","visible","style","absoluteFill","onPress","bg","Provider","contain","restoreFocus","autoFocus"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Popover/Popover.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { Popper } from '../Popper';\nimport type { IPopoverProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { useControllableState } from '../../../hooks';\nimport { PopoverContext } from './PopoverContext';\nimport Box from '../../primitives/Box';\nimport Backdrop from '../Backdrop';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { PresenceTransition } from '../Transitions';\nimport { StyleSheet } from 'react-native';\nimport { useId } from '@react-native-aria/utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { uniqueId } from 'lodash';\nimport { ResponsiveQueryContext } from '../../../utils/useResponsiveQuery/ResponsiveQueryProvider';\n\nconst Popover = (\n  {\n    onOpen,\n    trigger,\n    onClose,\n    isOpen: isOpenProp,\n    children,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    useRNModal,\n    trapFocus = true,\n    ...props\n  }: IPopoverProps,\n  ref: any\n) => {\n  const triggerRef = React.useRef(null);\n  const mergedRef = mergeRefs([triggerRef]);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: (value) => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    },\n  });\n\n  const [bodyMounted, setBodyMounted] = React.useState(false);\n  const [headerMounted, setHeaderMounted] = React.useState(false);\n  let id = uniqueId();\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  if (!disableCSSMediaQueries) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    id = useId();\n  }\n\n  const popoverContentId = `${id}-content`;\n  const headerId = `${popoverContentId}-header`;\n  const bodyId = `${popoverContentId}-body`;\n\n  const handleOpen = React.useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  const updatedTrigger = () => {\n    return trigger(\n      {\n        'ref': mergedRef,\n        'onPress': handleOpen,\n        'aria-expanded': isOpen ? true : false,\n        'aria-controls': isOpen ? popoverContentId : undefined,\n        'aria-haspopup': true,\n      },\n      { open: isOpen }\n    );\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box ref={ref}>\n      {updatedTrigger()}\n      <Overlay\n        isOpen={isOpen}\n        onRequestClose={handleClose}\n        useRNModalOnAndroid\n        useRNModal={useRNModal}\n        unmountOnExit\n      >\n        <PresenceTransition\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1, transition: { duration: 150 } }}\n          exit={{ opacity: 0, scale: 0.95, transition: { duration: 100 } }}\n          visible={isOpen}\n          style={StyleSheet.absoluteFill}\n        >\n          <Popper onClose={handleClose} triggerRef={triggerRef} {...props}>\n            <Backdrop onPress={handleClose} bg=\"transparent\" />\n            <PopoverContext.Provider\n              value={{\n                onClose: handleClose,\n                initialFocusRef,\n                finalFocusRef,\n                popoverContentId,\n                bodyId,\n                headerId,\n                headerMounted,\n                bodyMounted,\n                setBodyMounted,\n                setHeaderMounted,\n                isOpen,\n              }}\n            >\n              <FocusScope contain={trapFocus} restoreFocus autoFocus>\n                {children}\n              </FocusScope>\n            </PopoverContext.Provider>\n          </Popper>\n        </PresenceTransition>\n      </Overlay>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Popover));\n"]},"metadata":{},"sourceType":"module"}