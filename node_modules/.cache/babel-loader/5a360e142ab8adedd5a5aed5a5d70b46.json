{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport isNil from 'lodash.isnil';\nimport React, { useEffect, useRef, forwardRef } from 'react';\nimport { LayoutAnimation, UIManager, Platform } from 'react-native';\nimport { Box } from '../../primitives';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nfunction usePrevious(value) {\n  const ref = useRef();\n\n  function updatePrevious(newVal) {\n    ref.current = newVal;\n  }\n\n  useEffect(() => {\n    updatePrevious(value);\n  }, [value]);\n  return {\n    value: ref.current,\n    updatePrevious\n  };\n}\n\nconst Collapse = (_ref, ref) => {\n  let {\n    endingHeight,\n    startingHeight,\n    duration,\n    // animateOpacity,\n    isOpen,\n    onAnimationEnd,\n    onAnimationStart,\n    ...props\n  } = _ref;\n\n  if (Platform.OS === 'android') {\n    UIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);\n  }\n\n  const CustomLayoutLinear = {\n    duration: duration ? duration : 400,\n    create: {\n      type: LayoutAnimation.Types.easeInEaseOut,\n      property: LayoutAnimation.Properties.opacity\n    },\n    update: {\n      type: LayoutAnimation.Types.easeInEaseOut\n    }\n  };\n  const defaultStartHeight = isOpen ? endingHeight : startingHeight ? startingHeight : 1;\n  let animatedStyle = {\n    height: defaultStartHeight\n  };\n\n  const animateView = () => {\n    if (onAnimationStart) {\n      onAnimationStart();\n    }\n\n    animatedStyle = {\n      height: isOpen ? endingHeight : defaultStartHeight\n    };\n    let callback = onAnimationEnd ? onAnimationEnd : () => {};\n    LayoutAnimation.configureNext(CustomLayoutLinear, callback());\n  };\n\n  let wasOpen = usePrevious(isOpen);\n\n  if (!isNil(wasOpen.value) && wasOpen.value !== isOpen) {\n    animateView();\n    wasOpen.updatePrevious(isOpen);\n  }\n\n  const [size, setSize] = React.useState(startingHeight !== null && startingHeight !== void 0 ? startingHeight : 0);\n\n  const provideSize = layoutSize => {\n    setSize(layoutSize.height);\n  };\n\n  const _web = {\n    transition: \"height \".concat(duration !== null && duration !== void 0 ? duration : '400', \"ms\"),\n    height: isOpen ? endingHeight || size : startingHeight || 0\n  }; //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, {\n    style: { ...animatedStyle,\n      ...(Platform.OS === 'web' && _web)\n    },\n    overflow: \"hidden\",\n    ref: ref\n  }, /*#__PURE__*/React.createElement(Box //@ts-ignore\n  , _extends({\n    overflow: Platform.OS === 'web' ? 'auto' : 'scroll',\n    onLayout: e => provideSize(e.nativeEvent.layout)\n  }, props)));\n};\n\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/forwardRef(Collapse));","map":{"version":3,"mappings":"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","names":["isNil","React","useEffect","useRef","forwardRef","LayoutAnimation","UIManager","Platform","Box","useHasResponsiveProps","usePrevious","value","ref","updatePrevious","newVal","current","Collapse","endingHeight","startingHeight","duration","isOpen","onAnimationEnd","onAnimationStart","props","OS","setLayoutAnimationEnabledExperimental","CustomLayoutLinear","create","type","Types","easeInEaseOut","property","Properties","opacity","update","defaultStartHeight","animatedStyle","height","animateView","callback","configureNext","wasOpen","size","setSize","useState","provideSize","layoutSize","_web","transition","style","overflow","onLayout","e","nativeEvent","layout","memo"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Collapse/index.tsx"],"sourcesContent":["import isNil from 'lodash.isnil';\nimport React, { useEffect, useRef, forwardRef } from 'react';\nimport { ViewStyle, LayoutAnimation, UIManager, Platform } from 'react-native';\nimport { Box } from '../../primitives';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { InterfaceBoxProps } from '../../primitives/Box';\nimport type { CustomProps } from '../../../components/types';\nexport type InterfaceCollapseProps = InterfaceBoxProps<ICollapseProps> & {\n  style?: ViewStyle;\n  endingHeight?: number;\n  startingHeight?: number;\n  duration?: number;\n  animateOpacity?: boolean;\n  isOpen?: boolean;\n  onAnimationEnd?: Function;\n  onAnimationStart?: Function;\n};\n\nexport type ICollapseProps = InterfaceCollapseProps & CustomProps<'Box'>;\n\nfunction usePrevious(value: any) {\n  const ref = useRef();\n  function updatePrevious(newVal: any) {\n    ref.current = newVal;\n  }\n  useEffect(() => {\n    updatePrevious(value);\n  }, [value]);\n  return { value: ref.current, updatePrevious };\n}\n\nconst Collapse = (\n  {\n    endingHeight,\n    startingHeight,\n    duration,\n    // animateOpacity,\n    isOpen,\n    onAnimationEnd,\n    onAnimationStart,\n    ...props\n  }: ICollapseProps,\n  ref?: any\n) => {\n  if (Platform.OS === 'android') {\n    UIManager.setLayoutAnimationEnabledExperimental &&\n      UIManager.setLayoutAnimationEnabledExperimental(true);\n  }\n  const CustomLayoutLinear = {\n    duration: duration ? duration : 400,\n    create: {\n      type: LayoutAnimation.Types.easeInEaseOut,\n      property: LayoutAnimation.Properties.opacity,\n    },\n    update: {\n      type: LayoutAnimation.Types.easeInEaseOut,\n    },\n  };\n  const defaultStartHeight: any = isOpen\n    ? endingHeight\n    : startingHeight\n    ? startingHeight\n    : 1;\n  let animatedStyle = { height: defaultStartHeight };\n  const animateView = () => {\n    if (onAnimationStart) {\n      onAnimationStart();\n    }\n    animatedStyle = {\n      height: isOpen ? endingHeight : defaultStartHeight,\n    };\n    let callback = onAnimationEnd ? onAnimationEnd : () => {};\n    LayoutAnimation.configureNext(CustomLayoutLinear, callback());\n  };\n\n  let wasOpen = usePrevious(isOpen);\n  if (!isNil(wasOpen.value) && wasOpen.value !== isOpen) {\n    animateView();\n    wasOpen.updatePrevious(isOpen);\n  }\n  const [size, setSize] = React.useState(startingHeight ?? 0);\n  const provideSize = (layoutSize: any) => {\n    setSize(layoutSize.height);\n  };\n  const _web = {\n    transition: `height ${duration ?? '400'}ms`,\n    height: isOpen ? endingHeight || size : startingHeight || 0,\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      style={{ ...animatedStyle, ...(Platform.OS === 'web' && _web) }}\n      overflow=\"hidden\"\n      ref={ref}\n    >\n      <Box\n        //@ts-ignore\n        overflow={Platform.OS === 'web' ? 'auto' : 'scroll'}\n        onLayout={(e: any) => provideSize(e.nativeEvent.layout)}\n        {...props}\n      />\n    </Box>\n  );\n};\n\nexport default React.memo(forwardRef(Collapse));\n"]},"metadata":{},"sourceType":"module"}