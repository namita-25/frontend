{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport SVGIcon from './SVGIcon';\nimport { Factory } from '../../../factory';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Icon = (props, ref) => {\n  const {\n    as,\n    size,\n    ...resolvedProps\n  } = usePropsResolution('Icon', props);\n  const tokenizedFontSize = useToken('space', size); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (!as) {\n    return /*#__PURE__*/React.createElement(SVGIcon, _extends({\n      size: size\n    }, resolvedProps, {\n      ref: ref\n    }));\n  }\n\n  const isJSX = /*#__PURE__*/React.isValidElement(as);\n  const StyledAs = Factory(isJSX ? resolvedProps => /*#__PURE__*/React.cloneElement(as, { ...resolvedProps,\n    //@ts-ignore\n    ...as.props\n  }) : as);\n  return /*#__PURE__*/React.createElement(StyledAs, _extends({}, resolvedProps, {\n    fontSize: tokenizedFontSize,\n    lineHeight: tokenizedFontSize,\n    size: size,\n    ref: ref\n  }));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Icon));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,QAAT,EAAmBC,kBAAnB,QAA6C,gBAA7C;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,IAAI,GAAG,CAACC,KAAD,EAAoBC,GAApB,KAAkC;EAC7C,MAAM;IAAEC,EAAF;IAAMC,IAAN;IAAY,GAAGC;EAAf,IAAiCT,kBAAkB,CAAC,MAAD,EAASK,KAAT,CAAzD;EACA,MAAMK,iBAAiB,GAAGX,QAAQ,CAAC,OAAD,EAAUS,IAAV,CAAlC,CAF6C,CAG7C;;EACA,IAAIL,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,IAAI,CAACE,EAAL,EAAS;IACP,oBAAOX,oBAACK,OAAD;MAASO,IAAI,EAAEA;IAAf,GAAyBC,aAAzB;MAAwCH,GAAG,EAAEA;IAA7C,GAAP;EACD;;EACD,MAAMK,KAAK,gBAAGf,KAAK,CAACgB,cAANhB,CAAqBW,EAArBX,CAAd;EACA,MAAMiB,QAAQ,GAAGX,OAAO,CACtBS,KAAK,GACAF,aAAD,iBACEb,KAAK,CAACkB,YAANlB,CAAmBW,EAAnBX,EAAuB,EACrB,GAAGa,aADkB;IAErB;IACA,GAAGF,EAAE,CAACF;EAHe,CAAvBT,CAFD,GAODW,EARkB,CAAxB;EAWA,oBACEX,oBAACiB,QAAD,eACMJ,aADN;IAEEM,QAAQ,EAAEL,iBAFZ;IAGEM,UAAU,EAAEN,iBAHd;IAIEF,IAAI,EAAEA,IAJR;IAKEF,GAAG,EAAEA;EALP,GADF;AAtBF;;AAiCA,4BAAeT,IAAI,eAACC,UAAU,CAACM,IAAD,CAAX,CAAnB","names":["React","memo","forwardRef","useToken","usePropsResolution","SVGIcon","Factory","useHasResponsiveProps","Icon","props","ref","as","size","resolvedProps","tokenizedFontSize","isJSX","isValidElement","StyledAs","cloneElement","fontSize","lineHeight"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Icon/Icon.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport type { IIconProps } from './types';\nimport SVGIcon from './SVGIcon';\nimport { Factory } from '../../../factory';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Icon = (props: IIconProps, ref?: any) => {\n  const { as, size, ...resolvedProps } = usePropsResolution('Icon', props);\n  const tokenizedFontSize = useToken('space', size);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (!as) {\n    return <SVGIcon size={size} {...resolvedProps} ref={ref} />;\n  }\n  const isJSX = React.isValidElement(as);\n  const StyledAs = Factory(\n    isJSX\n      ? (resolvedProps) =>\n          React.cloneElement(as, {\n            ...resolvedProps,\n            //@ts-ignore\n            ...as.props,\n          })\n      : as\n  );\n\n  return (\n    <StyledAs\n      {...resolvedProps}\n      fontSize={tokenizedFontSize}\n      lineHeight={tokenizedFontSize}\n      size={size}\n      ref={ref}\n    />\n  );\n};\n\nexport default memo(forwardRef(Icon));\n"]},"metadata":{},"sourceType":"module"}