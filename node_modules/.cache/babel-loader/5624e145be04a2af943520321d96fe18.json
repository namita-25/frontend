{"ast":null,"code":"import { Dimensions, StyleSheet } from 'react-native';\nimport React from 'react';\nexport const getResponsiveStylesImpl = width => queries => {\n  if (typeof width === 'number') {\n    let styles = queries.initial ? [StyleSheet.create({\n      initial: StyleSheet.flatten(queries.initial)\n    }).initial] : [];\n\n    if (queries.query) {\n      queries.query.forEach(queryRule => {\n        if (queryRule.style) {\n          const flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n\n          if (typeof queryRule.maxWidth === 'number' && typeof queryRule.minWidth === 'number') {\n            if (width >= queryRule.minWidth && width <= queryRule.maxWidth) {\n              styles.push(StyleSheet.create({\n                rangeStyle: flattenQueryStyle\n              }).rangeStyle);\n            }\n          } else if (typeof queryRule.minWidth === 'number') {\n            if (width >= queryRule.minWidth) {\n              styles.push(StyleSheet.create({\n                minWidthStyle: flattenQueryStyle\n              }).minWidthStyle);\n            }\n          } else if (typeof queryRule.maxWidth === 'number') {\n            if (width <= queryRule.maxWidth) {\n              styles.push(StyleSheet.create({\n                maxWidthStyle: flattenQueryStyle\n              }).maxWidthStyle);\n            }\n          }\n        }\n      });\n      return {\n        styles\n      };\n    }\n  }\n\n  return {};\n}; // The below implementation is taken from React Native's source and added a flag to conditionally attach/remove listeners\n\nexport const useDimensionsWithEnable = _ref => {\n  let {\n    enable\n  } = _ref;\n  const [dimensions, setDimensions] = React.useState(() => Dimensions.get('window'));\n  React.useEffect(() => {\n    if (enable) {\n      function handleChange(_ref2) {\n        let {\n          window\n        } = _ref2;\n\n        if (dimensions.width !== window.width || dimensions.height !== window.height || dimensions.scale !== window.scale || dimensions.fontScale !== window.fontScale) {\n          setDimensions(window);\n        }\n      }\n\n      Dimensions.addEventListener('change', handleChange); // We might have missed an update between calling `get` in render and\n      // `addEventListener` in this handler, so we set it here. If there was\n      // no change, React will filter out this update as a no-op.\n\n      handleChange({\n        window: Dimensions.get('window')\n      });\n      return () => {\n        Dimensions.removeEventListener('change', handleChange);\n      };\n    }\n\n    return () => {};\n  }, [dimensions, enable]);\n  return dimensions;\n};","map":{"version":3,"mappings":"AAIA,SAASA,UAAT,EAAiCC,UAAjC,QAAmD,cAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,uBAAuB,GAAIC,KAAD,IACrCC,OADwD,IAEtB;EAClC,IAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;IAC7B,IAAIE,MAAM,GAAGD,OAAO,CAACE,OAARF,GACT,CACEJ,UAAU,CAACO,MAAXP,CAAkB;MAAEM,OAAO,EAAEN,UAAU,CAACQ,OAAXR,CAAmBI,OAAO,CAACE,OAA3BN;IAAX,CAAlBA,EACGM,OAFL,CADSF,GAKT,EALJ;;IAOA,IAAIA,OAAO,CAACK,KAAZ,EAAmB;MACjBL,OAAO,CAACK,KAARL,CAAcM,OAAdN,CAAuBO,SAAD,IAAe;QACnC,IAAIA,SAAS,CAACC,KAAd,EAAqB;UACnB,MAAMC,iBAAiB,GAAGb,UAAU,CAACQ,OAAXR,CAAmBW,SAAS,CAACC,KAA7BZ,CAA1B;;UAEA,IACE,OAAOW,SAAS,CAACG,QAAjB,KAA8B,QAA9B,IACA,OAAOH,SAAS,CAACI,QAAjB,KAA8B,QAFhC,EAGE;YACA,IAAIZ,KAAK,IAAIQ,SAAS,CAACI,QAAnBZ,IAA+BA,KAAK,IAAIQ,SAAS,CAACG,QAAtD,EAAgE;cAC9DT,MAAM,CAACW,IAAPX,CACEL,UAAU,CAACO,MAAXP,CAAkB;gBAAEiB,UAAU,EAAEJ;cAAd,CAAlBb,EAAqDiB,UADvDZ;YAGD;UARH,OASO,IAAI,OAAOM,SAAS,CAACI,QAAjB,KAA8B,QAAlC,EAA4C;YACjD,IAAIZ,KAAK,IAAIQ,SAAS,CAACI,QAAvB,EAAiC;cAC/BV,MAAM,CAACW,IAAPX,CACEL,UAAU,CAACO,MAAXP,CAAkB;gBAAEkB,aAAa,EAAEL;cAAjB,CAAlBb,EACGkB,aAFLb;YAID;UANI,OAOA,IAAI,OAAOM,SAAS,CAACG,QAAjB,KAA8B,QAAlC,EAA4C;YACjD,IAAIX,KAAK,IAAIQ,SAAS,CAACG,QAAvB,EAAiC;cAC/BT,MAAM,CAACW,IAAPX,CACEL,UAAU,CAACO,MAAXP,CAAkB;gBAAEmB,aAAa,EAAEN;cAAjB,CAAlBb,EACGmB,aAFLd;YAID;UACF;QACF;MA5BH;MA8BA,OAAO;QAAEA;MAAF,CAAP;IACD;EACF;;EAED,OAAO,EAAP;AA9CK,E,CAiDP;;AACA,OAAO,MAAMe,uBAAuB,GAAG,QAAsC;EAAA,IAArC;IAAEC;EAAF,CAAqC;EAC3E,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BtB,KAAK,CAACuB,QAANvB,CAAe,MACjDF,UAAU,CAAC0B,GAAX1B,CAAe,QAAfA,CADkCE,CAApC;EAIAA,KAAK,CAACyB,SAANzB,CAAgB,MAAM;IACpB,IAAIoB,MAAJ,EAAY;MACV,SAASM,YAAT,QAA0D;QAAA,IAApC;UAAEC;QAAF,CAAoC;;QACxD,IACEN,UAAU,CAACnB,KAAXmB,KAAqBM,MAAM,CAACzB,KAA5BmB,IACAA,UAAU,CAACO,MAAXP,KAAsBM,MAAM,CAACC,MAD7BP,IAEAA,UAAU,CAACQ,KAAXR,KAAqBM,MAAM,CAACE,KAF5BR,IAGAA,UAAU,CAACS,SAAXT,KAAyBM,MAAM,CAACG,SAJlC,EAKE;UACAR,aAAa,CAACK,MAAD,CAAbL;QACD;MACF;;MACDxB,UAAU,CAACiC,gBAAXjC,CAA4B,QAA5BA,EAAsC4B,YAAtC5B,EAXU,CAYV;MACA;MACA;;MACA4B,YAAY,CAAC;QAAEC,MAAM,EAAE7B,UAAU,CAAC0B,GAAX1B,CAAe,QAAfA;MAAV,CAAD,CAAZ4B;MAEA,OAAO,MAAM;QACX5B,UAAU,CAACkC,mBAAXlC,CAA+B,QAA/BA,EAAyC4B,YAAzC5B;MADF;IAGD;;IACD,OAAO,MAAM,CAAb;EAtBF,GAuBG,CAACuB,UAAD,EAAaD,MAAb,CAvBHpB;EAwBA,OAAOqB,UAAP;AA7BK","names":["Dimensions","StyleSheet","React","getResponsiveStylesImpl","width","queries","styles","initial","create","flatten","query","forEach","queryRule","style","flattenQueryStyle","maxWidth","minWidth","push","rangeStyle","minWidthStyle","maxWidthStyle","useDimensionsWithEnable","enable","dimensions","setDimensions","useState","get","useEffect","handleChange","window","height","scale","fontScale","addEventListener","removeEventListener"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/utils/useResponsiveQuery/common.ts"],"sourcesContent":["import type {\n  GetResponsiveStylesParams,\n  GetResponsiveStylesReturnType,\n} from './types';\nimport { Dimensions, ScaledSize, StyleSheet } from 'react-native';\nimport React from 'react';\n\nexport const getResponsiveStylesImpl = (width: number) => (\n  queries: GetResponsiveStylesParams\n): GetResponsiveStylesReturnType => {\n  if (typeof width === 'number') {\n    let styles = queries.initial\n      ? [\n          StyleSheet.create({ initial: StyleSheet.flatten(queries.initial) })\n            .initial,\n        ]\n      : [];\n\n    if (queries.query) {\n      queries.query.forEach((queryRule) => {\n        if (queryRule.style) {\n          const flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n\n          if (\n            typeof queryRule.maxWidth === 'number' &&\n            typeof queryRule.minWidth === 'number'\n          ) {\n            if (width >= queryRule.minWidth && width <= queryRule.maxWidth) {\n              styles.push(\n                StyleSheet.create({ rangeStyle: flattenQueryStyle }).rangeStyle\n              );\n            }\n          } else if (typeof queryRule.minWidth === 'number') {\n            if (width >= queryRule.minWidth) {\n              styles.push(\n                StyleSheet.create({ minWidthStyle: flattenQueryStyle })\n                  .minWidthStyle\n              );\n            }\n          } else if (typeof queryRule.maxWidth === 'number') {\n            if (width <= queryRule.maxWidth) {\n              styles.push(\n                StyleSheet.create({ maxWidthStyle: flattenQueryStyle })\n                  .maxWidthStyle\n              );\n            }\n          }\n        }\n      });\n      return { styles };\n    }\n  }\n\n  return {};\n};\n\n// The below implementation is taken from React Native's source and added a flag to conditionally attach/remove listeners\nexport const useDimensionsWithEnable = ({ enable }: { enable?: boolean }) => {\n  const [dimensions, setDimensions] = React.useState(() =>\n    Dimensions.get('window')\n  );\n\n  React.useEffect(() => {\n    if (enable) {\n      function handleChange({ window }: { window: ScaledSize }) {\n        if (\n          dimensions.width !== window.width ||\n          dimensions.height !== window.height ||\n          dimensions.scale !== window.scale ||\n          dimensions.fontScale !== window.fontScale\n        ) {\n          setDimensions(window);\n        }\n      }\n      Dimensions.addEventListener('change', handleChange);\n      // We might have missed an update between calling `get` in render and\n      // `addEventListener` in this handler, so we set it here. If there was\n      // no change, React will filter out this update as a no-op.\n      handleChange({ window: Dimensions.get('window') });\n\n      return () => {\n        Dimensions.removeEventListener('change', handleChange);\n      };\n    }\n    return () => {};\n  }, [dimensions, enable]);\n  return dimensions;\n};\n"]},"metadata":{},"sourceType":"module"}