{"ast":null,"code":"import React from 'react';\nimport { useId } from '@react-native-aria/utils';\nimport omit from 'lodash.omit';\nimport { ariaAttr } from '../../../utils';\nimport { ResponsiveQueryContext } from '../../../utils/useResponsiveQuery/ResponsiveQueryProvider';\nimport { uniqueId } from 'lodash';\nexport const FormControlContext = /*#__PURE__*/React.createContext({});\nexport function useFormControlProvider(props) {\n  const {\n    nativeID: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props;\n  let id = uniqueId();\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  if (!disableCSSMediaQueries) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    id = useId();\n  } // const id = '';\n  // Generate all the required ids\n\n\n  const nativeID = idProp || \"field-\".concat(id);\n  const labelId = \"\".concat(nativeID, \"-label\");\n  const feedbackId = \"\".concat(nativeID, \"-feedback\");\n  const helpTextId = \"\".concat(nativeID, \"-helptext\");\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n\n  const [hasFeedbackText, setHasFeedbackText] = React.useState(false);\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n\n  const [hasHelpText, setHasHelpText] = React.useState(false);\n  const context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    nativeID,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps\n  };\n  return context;\n}\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n */\n\nexport function useFormControl(props) {\n  var _props$nativeID;\n\n  const field = useFormControlContext();\n  const describedBy = []; // Error message must be described first in all scenarios.\n\n  if (field !== null && field !== void 0 && field.hasFeedbackText) describedBy.push(field === null || field === void 0 ? void 0 : field.feedbackId);\n  if (field !== null && field !== void 0 && field.hasHelpText) describedBy.push(field === null || field === void 0 ? void 0 : field.helpTextId);\n  const ariaDescribedBy = describedBy.join(' ');\n  const cleanProps = omit(props, ['isInvalid', 'isDisabled', 'isReadOnly', 'isRequired']);\n  return { ...cleanProps,\n    nativeID: (_props$nativeID = props.nativeID) !== null && _props$nativeID !== void 0 ? _props$nativeID : (field === null || field === void 0 ? void 0 : field.nativeID) + '-input',\n    disabled: props.isDisabled || (field === null || field === void 0 ? void 0 : field.isDisabled),\n    readOnly: props.isReadOnly || (field === null || field === void 0 ? void 0 : field.isReadOnly),\n    required: props.isRequired || (field === null || field === void 0 ? void 0 : field.isRequired),\n    accessibilityInvalid: ariaAttr(props.isInvalid || (field === null || field === void 0 ? void 0 : field.isInvalid)),\n    accessibilityRequired: ariaAttr(props.isRequired || (field === null || field === void 0 ? void 0 : field.isRequired)),\n    accessibilityReadOnly: ariaAttr(props.isReadOnly || (field === null || field === void 0 ? void 0 : field.isReadOnly)),\n    accessibilityDescribedBy: ariaDescribedBy || undefined\n  };\n}\nexport const useFormControlContext = () => {\n  return React.useContext(FormControlContext);\n};","map":{"version":3,"mappings":"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","names":["React","useId","omit","ariaAttr","ResponsiveQueryContext","uniqueId","FormControlContext","createContext","useFormControlProvider","props","nativeID","idProp","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","id","responsiveQueryContext","useContext","disableCSSMediaQueries","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","useState","hasHelpText","setHasHelpText","context","useFormControl","field","useFormControlContext","describedBy","push","ariaDescribedBy","join","cleanProps","disabled","readOnly","required","accessibilityInvalid","accessibilityRequired","accessibilityReadOnly","accessibilityDescribedBy","undefined"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/FormControl/useFormControl.tsx"],"sourcesContent":["import React from 'react';\nimport { useId } from '@react-native-aria/utils';\nimport omit from 'lodash.omit';\nimport type { IFormControlProps } from './types';\nimport { ariaAttr } from '../../../utils';\nimport { ResponsiveQueryContext } from '../../../utils/useResponsiveQuery/ResponsiveQueryProvider';\nimport { uniqueId } from 'lodash';\n\nexport type IFormControlContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  'htmlProps'\n>;\n\nexport const FormControlContext = React.createContext({});\n\nexport function useFormControlProvider(props: IFormControlProps) {\n  const {\n    nativeID: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props;\n\n  let id = uniqueId();\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  if (!disableCSSMediaQueries) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    id = useId();\n  }\n\n  // const id = '';\n  // Generate all the required ids\n  const nativeID = idProp || `field-${id}`;\n\n  const labelId = `${nativeID}-label`;\n  const feedbackId = `${nativeID}-feedback`;\n  const helpTextId = `${nativeID}-helptext`;\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = React.useState(false);\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = React.useState(false);\n\n  const context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    nativeID,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n  };\n\n  return context;\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n */\nexport function useFormControl(props: IFormControlProps) {\n  const field = useFormControlContext();\n  const describedBy: any[] = [];\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText) describedBy.push(field?.feedbackId);\n  if (field?.hasHelpText) describedBy.push(field?.helpTextId);\n  const ariaDescribedBy = describedBy.join(' ');\n\n  const cleanProps = omit(props, [\n    'isInvalid',\n    'isDisabled',\n    'isReadOnly',\n    'isRequired',\n  ]);\n\n  return {\n    ...cleanProps,\n    nativeID: props.nativeID ?? field?.nativeID + '-input',\n    disabled: props.isDisabled || field?.isDisabled,\n    readOnly: props.isReadOnly || field?.isReadOnly,\n    required: props.isRequired || field?.isRequired,\n    accessibilityInvalid: ariaAttr(props.isInvalid || field?.isInvalid),\n    accessibilityRequired: ariaAttr(props.isRequired || field?.isRequired),\n    accessibilityReadOnly: ariaAttr(props.isReadOnly || field?.isReadOnly),\n    accessibilityDescribedBy: ariaDescribedBy || undefined,\n  };\n}\n\nexport const useFormControlContext = () => {\n  return (React.useContext(\n    FormControlContext\n  ) as unknown) as IFormControlContext;\n};\n"]},"metadata":{},"sourceType":"module"}