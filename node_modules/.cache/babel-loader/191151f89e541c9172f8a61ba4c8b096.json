{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { TextInput } from 'react-native';\nimport { useToken } from '../../../hooks';\nimport { useFormControl } from '../../composites/FormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { mergeRefs, resolveStackStyleInput } from '../../../utils';\nimport { Stack } from '../Stack';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\nconst StyledInput = makeStyledComponent(TextInput);\n\nconst Input = (_ref2, ref) => {\n  let {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    onKeyPress,\n    InputLeftElement,\n    InputRightElement,\n    leftElement,\n    rightElement,\n    ...props\n  } = _ref2;\n  const inputProps = useFormControl({\n    isDisabled: props.isDisabled,\n    isInvalid: props.isInvalid,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    nativeID: props.nativeID\n  });\n  const [isFocused, setIsFocused] = React.useState(false);\n\n  const handleFocus = (focusState, callback) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  const _ref = React.useRef(null);\n\n  const {\n    isHovered\n  } = useHover({}, _ref);\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required\n  };\n  const {\n    ariaLabel,\n    accessibilityLabel,\n    type,\n    isFullWidth,\n    isDisabled,\n    isReadOnly,\n    fontFamily,\n    fontWeight,\n    fontStyle,\n    placeholderTextColor,\n    selectionColor,\n    underlineColorAndroid,\n    onFocus,\n    onBlur,\n    wrapperRef,\n    _stack,\n    _input,\n    ...resolvedProps\n  } = usePropsResolution('Input', { ...inputThemeProps,\n    ...props\n  }, {\n    isDisabled: inputThemeProps.isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isInvalid: inputThemeProps.isInvalid,\n    isReadOnly: inputThemeProps.isReadOnly\n  });\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [...stylingProps.margin, ...stylingProps.border, ...stylingProps.layout, ...stylingProps.flexbox, ...stylingProps.position, ...stylingProps.background, 'shadow', 'opacity']);\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight !== null && fontWeight !== void 0 ? fontWeight : 400,\n    fontStyle: fontStyle !== null && fontStyle !== void 0 ? fontStyle : 'normal'\n  });\n  const resolvedPlaceholderTextColor = useToken('colors', placeholderTextColor);\n  const resolvedSelectionColor = useToken('colors', selectionColor);\n  const resolvedUnderlineColorAndroid = useToken('colors', underlineColorAndroid);\n  /**Converting into Hash Color Code */\n  //@ts-ignore\n\n  resolvedProps.focusOutlineColor = useToken('colors', resolvedProps.focusOutlineColor); //@ts-ignore\n\n  resolvedProps.invalidOutlineColor = useToken('colors', resolvedProps.invalidOutlineColor); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (resolvedProps.focusOutlineColor && isFocused) {\n    layoutProps.borderColor = resolvedProps.focusOutlineColor;\n    _stack.style = resolveStackStyleInput(props.variant, resolvedProps.focusOutlineColor);\n  }\n\n  if (resolvedProps.invalidOutlineColor && props.isInvalid) {\n    layoutProps.borderColor = resolvedProps.invalidOutlineColor;\n    _stack.style = resolveStackStyleInput(props.variant, resolvedProps.invalidOutlineColor);\n  }\n\n  return /*#__PURE__*/React.createElement(Stack, _extends({}, _stack, layoutProps, {\n    ref: mergeRefs([_ref, wrapperRef]),\n    isFocused: isFocused\n  }), InputLeftElement || leftElement ? InputLeftElement || leftElement : null, /*#__PURE__*/React.createElement(StyledInput, _extends({}, inputProps, {\n    secureTextEntry: type === 'password',\n    accessible: true,\n    accessibilityLabel: ariaLabel || accessibilityLabel,\n    editable: isDisabled || isReadOnly ? false : true,\n    w: isFullWidth ? '100%' : undefined\n  }, nonLayoutProps, resolvedFontFamily, {\n    placeholderTextColor: resolvedPlaceholderTextColor,\n    selectionColor: resolvedSelectionColor,\n    underlineColorAndroid: resolvedUnderlineColorAndroid,\n    onKeyPress: e => {\n      e.persist();\n      onKeyPress && onKeyPress(e);\n    },\n    onFocus: e => {\n      handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n    },\n    onBlur: e => {\n      handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n    }\n  }, _input, {\n    ref: mergeRefs([ref, _ref, wrapperRef])\n  })), InputRightElement || rightElement ? InputRightElement || rightElement : null);\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Input));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AAEA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SAASC,eAAT,EAA0BC,YAA1B,QAA8C,4BAA9C;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,SAAT,EAAoBC,sBAApB,QAAkD,gBAAlD;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AAEA,MAAMC,WAAW,GAAGF,mBAAmB,CAACX,SAAD,CAAvC;;AAEA,MAAMc,KAAK,GAAG,QAWZC,GAXY,KAYT;EAAA,IAXH;IACEC,SAAS,EAAEC,aADb;IAEEC,SAAS,EAAEC,aAFb;IAGEC,UAHF;IAIEC,gBAJF;IAKEC,iBALF;IAMEC,WANF;IAOEC,YAPF;IAQE,GAAGC;EARL,CAWG;EACH,MAAMC,UAAU,GAAGxB,cAAc,CAAC;IAChCyB,UAAU,EAAEF,KAAK,CAACE,UADc;IAEhCC,SAAS,EAAEH,KAAK,CAACG,SAFe;IAGhCC,UAAU,EAAEJ,KAAK,CAACI,UAHc;IAIhCC,UAAU,EAAEL,KAAK,CAACK,UAJc;IAKhCC,QAAQ,EAAEN,KAAK,CAACM;EALgB,CAAD,CAAjC;EAOA,MAAM,CAACb,SAAD,EAAYc,YAAZ,IAA4BnC,KAAK,CAACoC,QAANpC,CAAe,KAAfA,CAAlC;;EACA,MAAMqC,WAAW,GAAG,CAACC,UAAD,EAAsBC,QAAtB,KAAwC;IAC1DJ,YAAY,CAACG,UAAD,CAAZH;IACAI,QAAQ;EAFV;;EAKA,MAAMC,IAAI,GAAGxC,KAAK,CAACyC,MAANzC,CAAa,IAAbA,CAAb;;EACA,MAAM;IAAEmB;EAAF,IAAgBZ,QAAQ,CAAC,EAAD,EAAKiC,IAAL,CAA9B;EAEA,MAAME,eAAe,GAAG;IACtBZ,UAAU,EAAED,UAAU,CAACc,QADD;IAEtBZ,SAAS,EAAEF,UAAU,CAACe,oBAFA;IAGtBZ,UAAU,EAAEH,UAAU,CAACgB,qBAHD;IAItBZ,UAAU,EAAEJ,UAAU,CAACiB;EAJD,CAAxB;EAOA,MAAM;IACJC,SADI;IAEJC,kBAFI;IAGJC,IAHI;IAIJC,WAJI;IAKJpB,UALI;IAMJE,UANI;IAOJmB,UAPI;IAQJC,UARI;IASJC,SATI;IAUJC,oBAVI;IAWJC,cAXI;IAYJC,qBAZI;IAaJC,OAbI;IAcJC,MAdI;IAeJC,UAfI;IAgBJC,MAhBI;IAiBJC,MAjBI;IAmBJ,GAAGC;EAnBC,IAoBFpD,kBAAkB,CACpB,OADoB,EAEpB,EACE,GAAGgC,eADL;IAEE,GAAGd;EAFL,CAFoB,EAMpB;IACEE,UAAU,EAAEY,eAAe,CAACZ,UAD9B;IAEEX,SAAS,EAAEC,aAAa,IAAID,SAF9B;IAGEE,SAAS,EAAEC,aAAa,IAAID,SAH9B;IAIEU,SAAS,EAAEW,eAAe,CAACX,SAJ7B;IAKEC,UAAU,EAAEU,eAAe,CAACV;EAL9B,CANoB,CApBtB;EAmCA,MAAM,CAAC+B,WAAD,EAAcC,cAAd,IAAgCxD,eAAe,CAACsD,aAAD,EAAgB,CACnE,GAAGrD,YAAY,CAACwD,MADmD,EAEnE,GAAGxD,YAAY,CAACyD,MAFmD,EAGnE,GAAGzD,YAAY,CAAC0D,MAHmD,EAInE,GAAG1D,YAAY,CAAC2D,OAJmD,EAKnE,GAAG3D,YAAY,CAAC4D,QALmD,EAMnE,GAAG5D,YAAY,CAAC6D,UANmD,EAOnE,QAPmE,EAQnE,SARmE,CAAhB,CAArD;EAWA,MAAMC,kBAAkB,GAAGxD,qBAAqB,CAAC;IAC/CoC,UAD+C;IAE/CC,UAAU,EAAEA,UAAF,SAAEA,cAAF,WAAEA,gBAAc,GAFqB;IAG/CC,SAAS,EAAEA,SAAF,SAAEA,aAAF,WAAEA,eAAa;EAHuB,CAAD,CAAhD;EAKA,MAAMmB,4BAA4B,GAAGpE,QAAQ,CAAC,QAAD,EAAWkD,oBAAX,CAA7C;EACA,MAAMmB,sBAAsB,GAAGrE,QAAQ,CAAC,QAAD,EAAWmD,cAAX,CAAvC;EACA,MAAMmB,6BAA6B,GAAGtE,QAAQ,CAC5C,QAD4C,EAE5CoD,qBAF4C,CAA9C;EAKA;EACA;;EACAM,aAAa,CAACa,iBAAdb,GAAkC1D,QAAQ,CACxC,QADwC,EAExC0D,aAAa,CAACa,iBAF0B,CAA1Cb,CApFG,CAwFH;;EACAA,aAAa,CAACc,mBAAdd,GAAoC1D,QAAQ,CAC1C,QAD0C,EAE1C0D,aAAa,CAACc,mBAF4B,CAA5Cd,CAzFG,CA6FH;;EACA,IAAIxD,qBAAqB,CAACsB,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EAED,IAAIkC,aAAa,CAACa,iBAAdb,IAAmCzC,SAAvC,EAAkD;IAChD0C,WAAW,CAACc,WAAZd,GAA0BD,aAAa,CAACa,iBAAxCZ;IACAH,MAAM,CAACkB,KAAPlB,GAAehD,sBAAsB,CACnCgB,KAAK,CAACmD,OAD6B,EAEnCjB,aAAa,CAACa,iBAFqB,CAArCf;EAID;;EAED,IAAIE,aAAa,CAACc,mBAAdd,IAAqClC,KAAK,CAACG,SAA/C,EAA0D;IACxDgC,WAAW,CAACc,WAAZd,GAA0BD,aAAa,CAACc,mBAAxCb;IACAH,MAAM,CAACkB,KAAPlB,GAAehD,sBAAsB,CACnCgB,KAAK,CAACmD,OAD6B,EAEnCjB,aAAa,CAACc,mBAFqB,CAArChB;EAID;;EAED,oBACE5D,oBAACa,KAAD,eACM+C,MADN,EAEMG,WAFN;IAGE7C,GAAG,EAAEP,SAAS,CAAC,CAAC6B,IAAD,EAAOmB,UAAP,CAAD,CAHhB;IAIEtC,SAAS,EAAEA;EAJb,IAMGG,gBAAgB,IAAIE,WAApBF,GAAkCA,gBAAgB,IAAIE,WAAtDF,GAAoE,IANvE,eAOExB,oBAACgB,WAAD,eACMa,UADN;IAEEmD,eAAe,EAAE/B,IAAI,KAAK,UAF5B;IAGEgC,UAAU,MAHZ;IAIEjC,kBAAkB,EAAED,SAAS,IAAIC,kBAJnC;IAKEkC,QAAQ,EAAEpD,UAAU,IAAIE,UAAdF,GAA2B,KAA3BA,GAAmC,IAL/C;IAMEqD,CAAC,EAAEjC,WAAW,GAAG,MAAH,GAAYkC;EAN5B,GAOMpB,cAPN,EAQMO,kBARN;IASEjB,oBAAoB,EAAEkB,4BATxB;IAUEjB,cAAc,EAAEkB,sBAVlB;IAWEjB,qBAAqB,EAAEkB,6BAXzB;IAYEnD,UAAU,EAAG8D,CAAD,IAAY;MACtBA,CAAC,CAACC,OAAFD;MACA9D,UAAU,IAAIA,UAAU,CAAC8D,CAAD,CAAxB9D;IAdJ;IAgBEkC,OAAO,EAAG4B,CAAD,IAAY;MACnBhD,WAAW,CAAC,IAAD,EAAOoB,OAAO,GAAG,MAAMA,OAAO,CAAC4B,CAAD,CAAhB,GAAsB,MAAM,CAA1C,EAAXhD;IAjBJ;IAmBEqB,MAAM,EAAG2B,CAAD,IAAY;MAClBhD,WAAW,CAAC,KAAD,EAAQqB,MAAM,GAAG,MAAMA,MAAM,CAAC2B,CAAD,CAAf,GAAqB,MAAM,CAAzC,EAAXhD;IACD;EArBH,GAsBMwB,MAtBN;IAuBE3C,GAAG,EAAEP,SAAS,CAAC,CAACO,GAAD,EAAMsB,IAAN,EAAYmB,UAAZ,CAAD;EAvBhB,GAPF,EAgCGlC,iBAAiB,IAAIE,YAArBF,GACGA,iBAAiB,IAAIE,YADxBF,GAEG,IAlCN,CADF;AA9HF;;AAsKA,4BAAexB,IAAI,eAACC,UAAU,CAACe,KAAD,CAAX,CAAnB","names":["React","memo","forwardRef","TextInput","useToken","useFormControl","useHasResponsiveProps","useHover","extractInObject","stylingProps","usePropsResolution","mergeRefs","resolveStackStyleInput","Stack","makeStyledComponent","useResolvedFontFamily","StyledInput","Input","ref","isHovered","isHoveredProp","isFocused","isFocusedProp","onKeyPress","InputLeftElement","InputRightElement","leftElement","rightElement","props","inputProps","isDisabled","isInvalid","isReadOnly","isRequired","nativeID","setIsFocused","useState","handleFocus","focusState","callback","_ref","useRef","inputThemeProps","disabled","accessibilityInvalid","accessibilityReadOnly","required","ariaLabel","accessibilityLabel","type","isFullWidth","fontFamily","fontWeight","fontStyle","placeholderTextColor","selectionColor","underlineColorAndroid","onFocus","onBlur","wrapperRef","_stack","_input","resolvedProps","layoutProps","nonLayoutProps","margin","border","layout","flexbox","position","background","resolvedFontFamily","resolvedPlaceholderTextColor","resolvedSelectionColor","resolvedUnderlineColorAndroid","focusOutlineColor","invalidOutlineColor","borderColor","style","variant","secureTextEntry","accessible","editable","w","undefined","e","persist"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Input/Input.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IInputProps } from './types';\nimport { TextInput } from 'react-native';\nimport { useToken } from '../../../hooks';\nimport { useFormControl } from '../../composites/FormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { mergeRefs, resolveStackStyleInput } from '../../../utils';\nimport { Stack } from '../Stack';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\n\nconst StyledInput = makeStyledComponent(TextInput);\n\nconst Input = (\n  {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    onKeyPress,\n    InputLeftElement,\n    InputRightElement,\n    leftElement,\n    rightElement,\n    ...props\n  }: IInputProps,\n  ref: any\n) => {\n  const inputProps = useFormControl({\n    isDisabled: props.isDisabled,\n    isInvalid: props.isInvalid,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    nativeID: props.nativeID,\n  });\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required,\n  };\n\n  const {\n    ariaLabel,\n    accessibilityLabel,\n    type,\n    isFullWidth,\n    isDisabled,\n    isReadOnly,\n    fontFamily,\n    fontWeight,\n    fontStyle,\n    placeholderTextColor,\n    selectionColor,\n    underlineColorAndroid,\n    onFocus,\n    onBlur,\n    wrapperRef,\n    _stack,\n    _input,\n\n    ...resolvedProps\n  } = usePropsResolution(\n    'Input',\n    {\n      ...inputThemeProps,\n      ...props,\n    },\n    {\n      isDisabled: inputThemeProps.isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isInvalid: inputThemeProps.isInvalid,\n      isReadOnly: inputThemeProps.isReadOnly,\n    }\n  );\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.border,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    ...stylingProps.background,\n    'shadow',\n    'opacity',\n  ]);\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight ?? 400,\n    fontStyle: fontStyle ?? 'normal',\n  });\n  const resolvedPlaceholderTextColor = useToken('colors', placeholderTextColor);\n  const resolvedSelectionColor = useToken('colors', selectionColor);\n  const resolvedUnderlineColorAndroid = useToken(\n    'colors',\n    underlineColorAndroid\n  );\n\n  /**Converting into Hash Color Code */\n  //@ts-ignore\n  resolvedProps.focusOutlineColor = useToken(\n    'colors',\n    resolvedProps.focusOutlineColor\n  );\n  //@ts-ignore\n  resolvedProps.invalidOutlineColor = useToken(\n    'colors',\n    resolvedProps.invalidOutlineColor\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (resolvedProps.focusOutlineColor && isFocused) {\n    layoutProps.borderColor = resolvedProps.focusOutlineColor;\n    _stack.style = resolveStackStyleInput(\n      props.variant,\n      resolvedProps.focusOutlineColor\n    );\n  }\n\n  if (resolvedProps.invalidOutlineColor && props.isInvalid) {\n    layoutProps.borderColor = resolvedProps.invalidOutlineColor;\n    _stack.style = resolveStackStyleInput(\n      props.variant,\n      resolvedProps.invalidOutlineColor\n    );\n  }\n\n  return (\n    <Stack\n      {..._stack}\n      {...layoutProps}\n      ref={mergeRefs([_ref, wrapperRef])}\n      isFocused={isFocused}\n    >\n      {InputLeftElement || leftElement ? InputLeftElement || leftElement : null}\n      <StyledInput\n        {...inputProps}\n        secureTextEntry={type === 'password'}\n        accessible\n        accessibilityLabel={ariaLabel || accessibilityLabel}\n        editable={isDisabled || isReadOnly ? false : true}\n        w={isFullWidth ? '100%' : undefined}\n        {...nonLayoutProps}\n        {...resolvedFontFamily}\n        placeholderTextColor={resolvedPlaceholderTextColor}\n        selectionColor={resolvedSelectionColor}\n        underlineColorAndroid={resolvedUnderlineColorAndroid}\n        onKeyPress={(e: any) => {\n          e.persist();\n          onKeyPress && onKeyPress(e);\n        }}\n        onFocus={(e: any) => {\n          handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n        }}\n        onBlur={(e: any) => {\n          handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n        }}\n        {..._input}\n        ref={mergeRefs([ref, _ref, wrapperRef])}\n      />\n      {InputRightElement || rightElement\n        ? InputRightElement || rightElement\n        : null}\n    </Stack>\n  );\n};\n\nexport default memo(forwardRef(Input));\n"]},"metadata":{},"sourceType":"module"}