{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { usePropsResolution } from '../../../hooks';\nimport { Pressable } from '../../primitives/Pressable';\nimport { CloseIcon } from '../../primitives/Icon/Icons';\nimport { PopoverContext } from './PopoverContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover, useFocus, useIsPressed } from '../../primitives/Pressable/Pressable';\nimport { composeEventHandlers } from '../../../utils';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst PopoverCloseButton = (props, ref) => {\n  const {\n    onClose\n  } = React.useContext(PopoverContext);\n  const {\n    hoverProps,\n    isHovered\n  } = useHover();\n  const {\n    pressableProps,\n    isPressed\n  } = useIsPressed();\n  const {\n    focusProps,\n    isFocused\n  } = useFocus();\n  const {\n    isFocusVisible,\n    focusProps: focusRingProps\n  } = useFocusRing();\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('PopoverCloseButton', props, {\n    isHovered,\n    isPressed,\n    isFocused,\n    isFocusVisible\n  }); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Pressable, _extends({\n    accessibilityRole: \"button\",\n    ref: ref,\n    onPressIn: composeEventHandlers(onPressIn, pressableProps.onPressIn),\n    onPressOut: composeEventHandlers(onPressOut, pressableProps.onPressOut) // @ts-ignore - web only\n    ,\n    onHoverIn: composeEventHandlers(onHoverIn, hoverProps.onHoverIn) // @ts-ignore - web only\n    ,\n    onHoverOut: composeEventHandlers(onHoverOut, hoverProps.onHoverOut) // @ts-ignore - web only\n    ,\n    onFocus: composeEventHandlers(composeEventHandlers(onFocus, focusProps.onFocus), focusRingProps.onFocus) // @ts-ignore - web only\n    ,\n    onBlur: composeEventHandlers(composeEventHandlers(onBlur, focusProps.onBlur), focusRingProps.onBlur),\n    onPress: onClose\n  }, resolvedProps), /*#__PURE__*/React.createElement(CloseIcon, _icon));\n};\n\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(PopoverCloseButton));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SACEC,QADF,EAEEC,QAFF,EAGEC,YAHF,QAIO,sCAJP;AAKA,SAASC,oBAAT,QAAqC,gBAArC;AACA,SAASC,YAAT,QAA6B,0BAA7B;;AAEA,MAAMC,kBAAkB,GAAG,CAACC,KAAD,EAAsBC,GAAtB,KAAmC;EAC5D,MAAM;IAAEC;EAAF,IAAmBd,KAAK,CAACe,UAANf,CAAiBI,cAAjBJ,CAAzB;EACA,MAAM;IAAEgB,UAAF;IAAcC;EAAd,IAA4BX,QAAQ,EAA1C;EACA,MAAM;IAAEY,cAAF;IAAkBC;EAAlB,IAAgCX,YAAY,EAAlD;EACA,MAAM;IAAEY,UAAF;IAAcC;EAAd,IAA4Bd,QAAQ,EAA1C;EACA,MAAM;IAAEe,cAAF;IAAkBF,UAAU,EAAEG;EAA9B,IAAsDb,YAAY,EAAxE;EAEA,MAAM;IACJc,KADI;IAEJC,SAFI;IAGJC,UAHI;IAIJC,SAJI;IAKJC,UALI;IAMJC,OANI;IAOJC,MAPI;IAQJ,GAAGC;EARC,IASF9B,kBAAkB,CAAC,oBAAD,EAAuBW,KAAvB,EAA8B;IAClDK,SADkD;IAElDE,SAFkD;IAGlDE,SAHkD;IAIlDC;EAJkD,CAA9B,CATtB,CAP4D,CAsB5D;;EACA,IAAIjB,qBAAqB,CAACO,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBACEZ,oBAACE,SAAD;IACE8B,iBAAiB,EAAC,QADpB;IAEEnB,GAAG,EAAEA,GAFP;IAGEY,SAAS,EAAEhB,oBAAoB,CAACgB,SAAD,EAAYP,cAAc,CAACO,SAA3B,CAHjC;IAIEC,UAAU,EAAEjB,oBAAoB,CAACiB,UAAD,EAAaR,cAAc,CAACQ,UAA5B,CAJlC,CAKE;IALF;IAMEC,SAAS,EAAElB,oBAAoB,CAACkB,SAAD,EAAYX,UAAU,CAACW,SAAvB,CANjC,CAOE;IAPF;IAQEC,UAAU,EAAEnB,oBAAoB,CAACmB,UAAD,EAAaZ,UAAU,CAACY,UAAxB,CARlC,CASE;IATF;IAUEC,OAAO,EAAEpB,oBAAoB,CAC3BA,oBAAoB,CAACoB,OAAD,EAAUT,UAAU,CAACS,OAArB,CADO,EAE3BN,cAAc,CAACM,OAFY,CAV/B,CAcE;IAdF;IAeEC,MAAM,EAAErB,oBAAoB,CAC1BA,oBAAoB,CAACqB,MAAD,EAASV,UAAU,CAACU,MAApB,CADM,EAE1BP,cAAc,CAACO,MAFW,CAf9B;IAmBEG,OAAO,EAAEnB;EAnBX,GAoBMiB,aApBN,gBAsBE/B,oBAACG,SAAD,EAAeqB,KAAf,CAtBF,CADF;AA1BF;;AAsDA,4BAAexB,KAAK,CAACkC,IAANlC,eAAWA,KAAK,CAACmC,UAANnC,CAAiBW,kBAAjBX,CAAXA,CAAf","names":["React","usePropsResolution","Pressable","CloseIcon","PopoverContext","useHasResponsiveProps","useHover","useFocus","useIsPressed","composeEventHandlers","useFocusRing","PopoverCloseButton","props","ref","onClose","useContext","hoverProps","isHovered","pressableProps","isPressed","focusProps","isFocused","isFocusVisible","focusRingProps","_icon","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","resolvedProps","accessibilityRole","onPress","memo","forwardRef"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Popover/PopoverCloseButton.tsx"],"sourcesContent":["import React from 'react';\nimport { usePropsResolution } from '../../../hooks';\nimport { Pressable } from '../../primitives/Pressable';\nimport { CloseIcon } from '../../primitives/Icon/Icons';\nimport { PopoverContext } from './PopoverContext';\nimport type { IButtonProps } from '../../primitives/Button';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { composeEventHandlers } from '../../../utils';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst PopoverCloseButton = (props: IButtonProps, ref: any) => {\n  const { onClose }: any = React.useContext(PopoverContext);\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('PopoverCloseButton', props, {\n    isHovered,\n    isPressed,\n    isFocused,\n    isFocusVisible,\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Pressable\n      accessibilityRole=\"button\"\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      onPress={onClose}\n      {...resolvedProps}\n    >\n      <CloseIcon {..._icon} />\n    </Pressable>\n  );\n};\n\nexport default React.memo(React.forwardRef(PopoverCloseButton));\n"]},"metadata":{},"sourceType":"module"}