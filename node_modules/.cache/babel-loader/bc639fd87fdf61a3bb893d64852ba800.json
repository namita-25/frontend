{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport { Platform, Keyboard } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport Box from '../Box';\nimport { Input } from '../Input';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useControllableState } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { useFormControl } from '../../composites/FormControl';\nimport { ChevronDownIcon } from '../Icon/Icons';\nimport { ScrollView } from '../../basic/ScrollView';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { FlatList } from '../../basic/FlatList';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { Pressable } from '../Pressable';\nexport const SelectContext = /*#__PURE__*/React.createContext({\n  onValueChange: () => {},\n  selectedValue: null,\n  _selectedItem: {},\n  _item: {}\n});\n\nconst Select = (_ref2, ref) => {\n  let {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    variant,\n    ...props\n  } = _ref2;\n  const selectProps = useFormControl({\n    isDisabled: props.isDisabled,\n    nativeID: props.nativeID\n  });\n  const flatListData = [];\n  const isDisabled = selectProps.disabled;\n  const tempFix = '__NativebasePlaceholder__';\n\n  const _ref = React.useRef(null);\n\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [isFocused, setIsFocused] = React.useState(false);\n  const {\n    focusProps,\n    isFocusVisible\n  } = useFocusRing();\n  const {\n    hoverProps,\n    isHovered\n  } = useHover({\n    isDisabled\n  }, _ref);\n  const {\n    onValueChange,\n    selectedValue,\n    children,\n    dropdownIcon,\n    dropdownCloseIcon,\n    dropdownOpenIcon,\n    placeholder,\n    accessibilityLabel,\n    defaultValue,\n    _item,\n    _selectedItem,\n    onOpen,\n    onClose,\n    optimized,\n    customDropdownIconProps,\n    _actionSheet,\n    _actionSheetContent,\n    _actionSheetBody,\n    _webSelect,\n    ...resolvedProps\n  } = usePropsResolution('Select', props, {\n    isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible\n  }, undefined);\n  const [value, setValue] = useControllableState({\n    value: selectedValue,\n    defaultValue,\n    onChange: newValue => {\n      onValueChange && onValueChange(newValue);\n      setIsOpen(false);\n    }\n  });\n  const itemsList = React.Children.toArray(children).map(child => {\n    var _child$props, _child$props2;\n\n    return {\n      label: child === null || child === void 0 ? void 0 : (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.label,\n      value: child === null || child === void 0 ? void 0 : (_child$props2 = child.props) === null || _child$props2 === void 0 ? void 0 : _child$props2.value\n    };\n  });\n  const selectedItemArray = itemsList.filter(item => (item === null || item === void 0 ? void 0 : item.value) === value);\n  const selectedItem = selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n  const contextValue = React.useMemo(() => {\n    return {\n      onValueChange: setValue,\n      selectedValue: value,\n      _selectedItem: _selectedItem !== null && _selectedItem !== void 0 ? _selectedItem : {},\n      _item: _item !== null && _item !== void 0 ? _item : {}\n    };\n  }, [value, setValue, _selectedItem, _item]); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const rightIcon = isOpen && dropdownOpenIcon ? dropdownOpenIcon : !isOpen && dropdownCloseIcon ? dropdownCloseIcon : dropdownIcon ? dropdownIcon : /*#__PURE__*/React.createElement(ChevronDownIcon, customDropdownIconProps);\n\n  const handleClose = () => {\n    setIsOpen(false);\n    onClose && onClose();\n  };\n\n  if (optimized) {\n    React.Children.toArray(children).map(child => {\n      flatListData.push(child.props);\n    });\n  }\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [...stylingProps.margin, ...stylingProps.flexbox, ...stylingProps.position, 'shadow', 'opacity']);\n  const commonInput = /*#__PURE__*/React.createElement(Input, _extends({\n    placeholder: placeholder,\n    InputRightElement: rightIcon\n  }, nonLayoutProps, {\n    // NOTE: Adding ts-ignore as we're not exposing isFocused in the Input component\n    // @ts-ignore-next-line\n    isFocused: isFocused,\n    isHovered: isHovered,\n    \"aria-hidden\": true,\n    importantForAccessibility: \"no\",\n    value: selectedItem ? selectedItem.label : '',\n    editable: false,\n    focusable: false,\n    isDisabled: isDisabled,\n    pointerEvents: \"none\",\n    variant: variant\n  }));\n  return Platform.OS === 'android' || Platform.OS === 'ios' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Pressable, _extends({\n    onPress: () => {\n      Keyboard.dismiss();\n      setIsOpen(true);\n      onOpen && onOpen();\n    },\n    disabled: isDisabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    ref: mergeRefs([ref, _ref])\n  }, layoutProps), commonInput), /*#__PURE__*/React.createElement(Actionsheet, _extends({\n    isOpen: isOpen,\n    onClose: handleClose\n  }, _actionSheet), /*#__PURE__*/React.createElement(Actionsheet.Content, _actionSheetContent, optimized ? /*#__PURE__*/React.createElement(FlatList, _extends({}, _actionSheetBody, {\n    data: flatListData // eslint-disable-next-line no-shadow\n    ,\n    keyExtractor: (_item, index) => index.toString(),\n    renderItem: _ref3 => {\n      let {\n        item\n      } = _ref3;\n      const isSelected = selectedValue === (item === null || item === void 0 ? void 0 : item.value);\n      return /*#__PURE__*/React.createElement(Actionsheet.Item, _extends({\n        onPress: () => {\n          if (!isDisabled) {\n            setValue(item === null || item === void 0 ? void 0 : item.value);\n          }\n        },\n        accessibilityState: {\n          selected: isSelected\n        }\n      }, item, _item, isSelected && _selectedItem), item === null || item === void 0 ? void 0 : item.label);\n    }\n  })) : /*#__PURE__*/React.createElement(ScrollView, _actionSheetBody, /*#__PURE__*/React.createElement(SelectContext.Provider, {\n    value: contextValue\n  }, children))))) : /*#__PURE__*/React.createElement(Box, layoutProps, /*#__PURE__*/React.createElement(\"select\", _extends({\n    \"aria-readonly\": selectProps.readOnly,\n    required: selectProps.required,\n    disabled: isDisabled\n  }, focusProps, hoverProps, {\n    ref: mergeRefs([ref, _ref]) //@ts-ignore\n    ,\n    onChange: e => {\n      setValue(e.target.value);\n    },\n    value: selectedItem === null ? tempFix : value,\n    \"aria-label\": placeholder,\n    onFocus: () => {\n      setIsFocused(true);\n      onOpen && onOpen();\n    },\n    onBlur: () => {\n      setIsFocused(false);\n      onClose && onClose();\n    }\n  }, _webSelect), /*#__PURE__*/React.createElement(\"option\", {\n    disabled: true,\n    value: tempFix\n  }, placeholder), children), commonInput);\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Select));","map":{"version":3,"mappings":"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","names":["React","forwardRef","memo","Platform","Keyboard","Actionsheet","Box","Input","useFocusRing","useControllableState","usePropsResolution","useHover","mergeRefs","useFormControl","ChevronDownIcon","ScrollView","extractInObject","stylingProps","FlatList","useHasResponsiveProps","Pressable","SelectContext","createContext","onValueChange","selectedValue","_selectedItem","_item","Select","ref","isHovered","isHoveredProp","isFocused","isFocusedProp","isFocusVisible","isFocusVisibleProp","variant","props","selectProps","isDisabled","nativeID","flatListData","disabled","tempFix","_ref","useRef","isOpen","setIsOpen","useState","setIsFocused","focusProps","hoverProps","children","dropdownIcon","dropdownCloseIcon","dropdownOpenIcon","placeholder","accessibilityLabel","defaultValue","onOpen","onClose","optimized","customDropdownIconProps","_actionSheet","_actionSheetContent","_actionSheetBody","_webSelect","resolvedProps","undefined","value","setValue","onChange","newValue","itemsList","Children","toArray","map","child","label","_child$props","_child$props2","selectedItemArray","filter","item","selectedItem","length","contextValue","useMemo","rightIcon","handleClose","push","layoutProps","nonLayoutProps","margin","flexbox","position","commonInput","InputRightElement","importantForAccessibility","editable","focusable","pointerEvents","OS","onPress","dismiss","accessibilityRole","Content","data","keyExtractor","index","toString","renderItem","isSelected","Item","accessibilityState","selected","Provider","readOnly","required","e","target","onFocus","onBlur"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Select/Select.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport type { ISelectProps } from './types';\nimport { Platform, Keyboard } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport Box from '../Box';\nimport { Input } from '../Input';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useControllableState } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { useFormControl } from '../../composites/FormControl';\nimport { ChevronDownIcon } from '../Icon/Icons';\nimport type { IButtonProps } from '../Button/types';\nimport { ScrollView } from '../../basic/ScrollView';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { FlatList } from '../../basic/FlatList';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ISelectItemProps } from './types';\nimport { Pressable } from '../Pressable';\n\nexport const SelectContext = React.createContext({\n  onValueChange: (() => {}) as any,\n  selectedValue: null as any,\n  _selectedItem: {} as IButtonProps,\n  _item: {} as IButtonProps,\n});\n\nconst Select = (\n  {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    variant,\n    ...props\n  }: ISelectProps,\n  ref: any\n) => {\n  const selectProps = useFormControl({\n    isDisabled: props.isDisabled,\n    nativeID: props.nativeID,\n  });\n  const flatListData: ISelectItemProps[] = [];\n\n  const isDisabled = selectProps.disabled;\n  const tempFix = '__NativebasePlaceholder__';\n  const _ref = React.useRef(null);\n\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [isFocused, setIsFocused] = React.useState<boolean>(false);\n\n  const { focusProps, isFocusVisible } = useFocusRing();\n  const { hoverProps, isHovered } = useHover({ isDisabled }, _ref);\n\n  const {\n    onValueChange,\n    selectedValue,\n    children,\n    dropdownIcon,\n    dropdownCloseIcon,\n    dropdownOpenIcon,\n    placeholder,\n    accessibilityLabel,\n    defaultValue,\n    _item,\n    _selectedItem,\n    onOpen,\n    onClose,\n    optimized,\n    customDropdownIconProps,\n    _actionSheet,\n    _actionSheetContent,\n    _actionSheetBody,\n    _webSelect,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Select',\n    props,\n    {\n      isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    },\n    undefined\n  );\n\n  const [value, setValue] = useControllableState({\n    value: selectedValue,\n    defaultValue,\n    onChange: (newValue) => {\n      onValueChange && onValueChange(newValue);\n      setIsOpen(false);\n    },\n  });\n\n  const itemsList: Array<{\n    label: string;\n    value: string;\n  }> = React.Children.toArray(children).map((child: any) => {\n    return {\n      label: child?.props?.label,\n      value: child?.props?.value,\n    };\n  });\n\n  const selectedItemArray = itemsList.filter(\n    (item: any) => item?.value === value\n  );\n\n  const selectedItem =\n    selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n\n  const contextValue = React.useMemo(() => {\n    return {\n      onValueChange: setValue,\n      selectedValue: value,\n      _selectedItem: _selectedItem ?? {},\n      _item: _item ?? {},\n    };\n  }, [value, setValue, _selectedItem, _item]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const rightIcon =\n    isOpen && dropdownOpenIcon ? (\n      dropdownOpenIcon\n    ) : !isOpen && dropdownCloseIcon ? (\n      dropdownCloseIcon\n    ) : dropdownIcon ? (\n      dropdownIcon\n    ) : (\n      <ChevronDownIcon {...customDropdownIconProps} />\n    );\n\n  const handleClose = () => {\n    setIsOpen(false);\n    onClose && onClose();\n  };\n\n  if (optimized) {\n    React.Children.toArray(children).map((child: any) => {\n      flatListData.push(child.props);\n    });\n  }\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    'shadow',\n    'opacity',\n  ]);\n\n  const commonInput = (\n    <Input\n      placeholder={placeholder}\n      InputRightElement={rightIcon}\n      {...nonLayoutProps}\n      // NOTE: Adding ts-ignore as we're not exposing isFocused in the Input component\n      // @ts-ignore-next-line\n      isFocused={isFocused}\n      isHovered={isHovered}\n      aria-hidden={true}\n      importantForAccessibility=\"no\"\n      value={selectedItem ? selectedItem.label : ''}\n      editable={false}\n      focusable={false}\n      isDisabled={isDisabled}\n      pointerEvents=\"none\"\n      variant={variant}\n    />\n  );\n\n  return Platform.OS === 'android' || Platform.OS === 'ios' ? (\n    <>\n      <Pressable\n        onPress={() => {\n          Keyboard.dismiss();\n          setIsOpen(true);\n          onOpen && onOpen();\n        }}\n        disabled={isDisabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        ref={mergeRefs([ref, _ref])}\n        {...layoutProps}\n      >\n        {commonInput}\n      </Pressable>\n      <Actionsheet isOpen={isOpen} onClose={handleClose} {..._actionSheet}>\n        <Actionsheet.Content {..._actionSheetContent}>\n          {/* TODO: Replace ScrollVeiw with FlatList */}\n          {optimized ? (\n            <FlatList\n              {..._actionSheetBody}\n              data={flatListData}\n              // eslint-disable-next-line no-shadow\n              keyExtractor={(_item, index) => index.toString()}\n              renderItem={({ item }: any) => {\n                const isSelected = selectedValue === item?.value;\n                return (\n                  <Actionsheet.Item\n                    onPress={() => {\n                      if (!isDisabled) {\n                        setValue(item?.value);\n                      }\n                    }}\n                    accessibilityState={{ selected: isSelected }}\n                    {...item}\n                    {..._item}\n                    {...(isSelected && _selectedItem)}\n                  >\n                    {item?.label}\n                  </Actionsheet.Item>\n                );\n              }}\n            />\n          ) : (\n            <ScrollView {..._actionSheetBody}>\n              <SelectContext.Provider value={contextValue}>\n                {children}\n              </SelectContext.Provider>\n            </ScrollView>\n          )}\n        </Actionsheet.Content>\n      </Actionsheet>\n    </>\n  ) : (\n    <Box {...layoutProps}>\n      {/* <Box w=\"100%\" h=\"100%\" position=\"absolute\" opacity=\"0\" zIndex={1}> */}\n      <select\n        aria-readonly={selectProps.readOnly}\n        required={selectProps.required}\n        disabled={isDisabled}\n        {...focusProps}\n        {...hoverProps}\n        ref={mergeRefs([ref, _ref])}\n        //@ts-ignore\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n        value={selectedItem === null ? tempFix : value}\n        aria-label={placeholder}\n        onFocus={() => {\n          setIsFocused(true);\n          onOpen && onOpen();\n        }}\n        onBlur={() => {\n          setIsFocused(false);\n          onClose && onClose();\n        }}\n        {..._webSelect}\n      >\n        <option disabled value={tempFix}>\n          {placeholder}\n        </option>\n        {children}\n      </select>\n      {/* </Box> */}\n      {commonInput}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Select));\n"]},"metadata":{},"sourceType":"module"}