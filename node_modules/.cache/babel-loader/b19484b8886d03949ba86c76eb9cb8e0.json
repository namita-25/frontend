{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport cloneDeep from 'lodash.clonedeep';\nimport React from 'react';\nimport PresenceTransition from './PresenceTransition';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nconst defaultStaggerConfig = {\n  offset: 0,\n  reverse: false\n};\n\nconst Stagger = _ref => {\n  let {\n    children,\n    ...restProps\n  } = _ref;\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(restProps)) {\n    return null;\n  }\n\n  return React.Children.map(children, (child, index) => {\n    const clonedAnimationConfig = cloneDeep(restProps);\n    const {\n      animate,\n      exit\n    } = clonedAnimationConfig;\n\n    if (animate) {\n      var _animate$transition$d, _animate$transition$s;\n\n      if (!animate.transition) {\n        animate.transition = {};\n      }\n\n      animate.transition.delay = (_animate$transition$d = animate.transition.delay) !== null && _animate$transition$d !== void 0 ? _animate$transition$d : 0;\n      const stagger = (_animate$transition$s = animate.transition.stagger) !== null && _animate$transition$s !== void 0 ? _animate$transition$s : defaultStaggerConfig;\n      const offset = stagger.reverse ? (React.Children.count(children) - 1 - index) * stagger.offset : index * stagger.offset;\n      animate.transition.delay = animate.transition.delay + offset;\n    }\n\n    if (exit) {\n      var _exit$transition$dela, _exit$transition$stag;\n\n      if (!exit.transition) {\n        exit.transition = {};\n      }\n\n      exit.transition.delay = (_exit$transition$dela = exit.transition.delay) !== null && _exit$transition$dela !== void 0 ? _exit$transition$dela : 0;\n      const stagger = (_exit$transition$stag = exit.transition.stagger) !== null && _exit$transition$stag !== void 0 ? _exit$transition$stag : defaultStaggerConfig;\n      const offset = stagger.reverse ? (React.Children.count(children) - 1 - index) * stagger.offset : index * stagger.offset;\n      exit.transition.delay = exit.transition.delay + offset;\n    }\n\n    return /*#__PURE__*/React.createElement(PresenceTransition, _extends({\n      key: child.key\n    }, clonedAnimationConfig), child);\n  });\n};\n\nexport default Stagger;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AAEA,SAASC,qBAAT,QAAsC,sCAAtC;AA+BA,MAAMC,oBAAoC,GAAG;EAAEC,MAAM,EAAE,CAAV;EAAaC,OAAO,EAAE;AAAtB,CAA7C;;AAEA,MAAMC,OAAO,GAAG,QAA+C;EAAA,IAA9C;IAAEC,QAAF;IAAY,GAAGC;EAAf,CAA8C;;EAC7D;EACA,IAAIN,qBAAqB,CAACM,SAAD,CAAzB,EAAsC;IACpC,OAAO,IAAP;EACD;;EACD,OAAOR,KAAK,CAACS,QAANT,CAAeU,GAAfV,CAAmBO,QAAnBP,EAA6B,CAACW,KAAD,EAAQC,KAAR,KAAkB;IACpD,MAAMC,qBAAqB,GAAGd,SAAS,CAACS,SAAD,CAAvC;IACA,MAAM;MAAEM,OAAF;MAAWC;IAAX,IAAoBF,qBAA1B;;IAEA,IAAIC,OAAJ,EAAa;MAAA;;MACX,IAAI,CAACA,OAAO,CAACE,UAAb,EAAyB;QACvBF,OAAO,CAACE,UAARF,GAAqB,EAArBA;MACD;;MACDA,OAAO,CAACE,UAARF,CAAmBG,KAAnBH,4BAA2BA,OAAO,CAACE,UAARF,CAAmBG,KAA9C,yEAAuD,CAAvDH;MACA,MAAMI,OAAO,4BAAGJ,OAAO,CAACE,UAARF,CAAmBI,OAAtB,yEAAiCf,oBAA9C;MACA,MAAMC,MAAM,GAAGc,OAAO,CAACb,OAARa,GACX,CAAClB,KAAK,CAACS,QAANT,CAAemB,KAAfnB,CAAqBO,QAArBP,IAAiC,CAAjCA,GAAqCY,KAAtC,IAA+CM,OAAO,CAACd,MAD5Cc,GAEXN,KAAK,GAAGM,OAAO,CAACd,MAFpB;MAGAU,OAAO,CAACE,UAARF,CAAmBG,KAAnBH,GAA2BA,OAAO,CAACE,UAARF,CAAmBG,KAAnBH,GAA2BV,MAAtDU;IACD;;IAED,IAAIC,IAAJ,EAAU;MAAA;;MACR,IAAI,CAACA,IAAI,CAACC,UAAV,EAAsB;QACpBD,IAAI,CAACC,UAALD,GAAkB,EAAlBA;MACD;;MACDA,IAAI,CAACC,UAALD,CAAgBE,KAAhBF,4BAAwBA,IAAI,CAACC,UAALD,CAAgBE,KAAxC,yEAAiD,CAAjDF;MACA,MAAMG,OAAO,4BAAGH,IAAI,CAACC,UAALD,CAAgBG,OAAnB,yEAA8Bf,oBAA3C;MACA,MAAMC,MAAM,GAAGc,OAAO,CAACb,OAARa,GACX,CAAClB,KAAK,CAACS,QAANT,CAAemB,KAAfnB,CAAqBO,QAArBP,IAAiC,CAAjCA,GAAqCY,KAAtC,IAA+CM,OAAO,CAACd,MAD5Cc,GAEXN,KAAK,GAAGM,OAAO,CAACd,MAFpB;MAGAW,IAAI,CAACC,UAALD,CAAgBE,KAAhBF,GAAwBA,IAAI,CAACC,UAALD,CAAgBE,KAAhBF,GAAwBX,MAAhDW;IACD;;IAED,oBACEf,oBAACC,kBAAD;MAAoBmB,GAAG,EAAET,KAAK,CAACS;IAA/B,GAAwCP,qBAAxC,GACGF,KADH,CADF;EA5BK,EAAP;AALF;;AAyCA,eAAeL,OAAf","names":["cloneDeep","React","PresenceTransition","useHasResponsiveProps","defaultStaggerConfig","offset","reverse","Stagger","children","restProps","Children","map","child","index","clonedAnimationConfig","animate","exit","transition","delay","stagger","count","key"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Transitions/Stagger.tsx"],"sourcesContent":["import cloneDeep from 'lodash.clonedeep';\nimport React from 'react';\nimport PresenceTransition from './PresenceTransition';\nimport type { ISupportedTransitions, ITransitionConfig } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\ninterface IStaggerConfig {\n  offset: number;\n  reverse?: boolean;\n}\n\nexport interface IStaggerStyleProps extends ISupportedTransitions {\n  transition?: ITransitionConfig & { stagger?: IStaggerConfig };\n}\n\ninterface IStaggerProps {\n  children: any;\n  /**\n   * Initial styles before the transition starts\n   */\n  initial?: ISupportedTransitions;\n  /**\n   * The styles to which each child should animate to while entering.\n   */\n  animate?: IStaggerStyleProps;\n  /**\n   * The styles to which each child should animate to while exiting.\n   */\n  exit?: IStaggerStyleProps;\n  /**\n   * Determines whether to start the animation\n   */\n  visible?: boolean;\n}\n\nconst defaultStaggerConfig: IStaggerConfig = { offset: 0, reverse: false };\n\nconst Stagger = ({ children, ...restProps }: IStaggerProps) => {\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(restProps)) {\n    return null;\n  }\n  return React.Children.map(children, (child, index) => {\n    const clonedAnimationConfig = cloneDeep(restProps);\n    const { animate, exit } = clonedAnimationConfig;\n\n    if (animate) {\n      if (!animate.transition) {\n        animate.transition = {};\n      }\n      animate.transition.delay = animate.transition.delay ?? 0;\n      const stagger = animate.transition.stagger ?? defaultStaggerConfig;\n      const offset = stagger.reverse\n        ? (React.Children.count(children) - 1 - index) * stagger.offset\n        : index * stagger.offset;\n      animate.transition.delay = animate.transition.delay + offset;\n    }\n\n    if (exit) {\n      if (!exit.transition) {\n        exit.transition = {};\n      }\n      exit.transition.delay = exit.transition.delay ?? 0;\n      const stagger = exit.transition.stagger ?? defaultStaggerConfig;\n      const offset = stagger.reverse\n        ? (React.Children.count(children) - 1 - index) * stagger.offset\n        : index * stagger.offset;\n      exit.transition.delay = exit.transition.delay + offset;\n    }\n\n    return (\n      <PresenceTransition key={child.key} {...clonedAnimationConfig}>\n        {child}\n      </PresenceTransition>\n    );\n  });\n};\n\nexport default Stagger;\n"]},"metadata":{},"sourceType":"module"}