{"ast":null,"code":"import { I18nManager } from 'react-native';\nexport const attachEventHandlersOnRef = (props, ref) => {\n  if (ref && ref.current) {\n    for (let key in props) {\n      if (key.startsWith('on')) {\n        ref.current[key.toLowerCase()] = props[key];\n      }\n    }\n  }\n};\nexport const getLabel = props => {\n  var _props$accessibilityL;\n\n  let label = (_props$accessibilityL = props.accessibilityLabel) !== null && _props$accessibilityL !== void 0 ? _props$accessibilityL : props['aria-label'];\n\n  if (!label) {\n    label = typeof props.label === 'string' ? props.label : undefined;\n  }\n\n  return label;\n};\nexport * from './ariaToAccessibilityMap';\nexport { useId, useLayoutEffect, mergeIds, mergeProps } from '@react-aria/utils';\nexport { SSRProvider, useIsSSR } from '@react-aria/ssr';\nexport const isRTL = () => {\n  // To support previous RN versions. Newer versions use below getConstants()\n  if (I18nManager.isRTL !== undefined) {\n    return I18nManager.isRTL;\n  } // @ts-ignore - RN web only\n\n\n  if (I18nManager.getConstants) {\n    // @ts-ignore - RN web only\n    return I18nManager.getConstants().isRTL;\n  }\n};","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,QAA4B,cAA5B;AAEA,OAAO,MAAMC,wBAAwB,GAAG,CAACC,KAAD,EAAaC,GAAb,KAA0B;EAChE,IAAIA,GAAG,IAAIA,GAAG,CAACC,OAAf,EAAwB;IACtB,KAAK,IAAIC,GAAT,IAAgBH,KAAhB,EAAuB;MACrB,IAAIG,GAAG,CAACC,UAAJD,CAAe,IAAfA,CAAJ,EAA0B;QACxBF,GAAG,CAACC,OAAJD,CAAYE,GAAG,CAACE,WAAJF,EAAZF,IAAiCD,KAAK,CAACG,GAAD,CAAtCF;MACD;IACF;EACF;AAPI;AAUP,OAAO,MAAMK,QAAQ,GAAIN,KAAD,IAAgB;EAAA;;EACtC,IAAIO,KAAK,4BAAGP,KAAK,CAACQ,kBAAT,yEAA+BR,KAAK,CAAC,YAAD,CAA7C;;EAEA,IAAI,CAACO,KAAL,EAAY;IACVA,KAAK,GAAG,OAAOP,KAAK,CAACO,KAAb,KAAuB,QAAvB,GAAkCP,KAAK,CAACO,KAAxC,GAAgDE,SAAxDF;EACD;;EAED,OAAOA,KAAP;AAPK;AAUP,cAAc,0BAAd;AACA,SACEG,KADF,EAEEC,eAFF,EAGEC,QAHF,EAIEC,UAJF,QAKO,mBALP;AAMA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,iBAAtC;AAEA,OAAO,MAAMC,KAAK,GAAG,MAAM;EACzB;EACA,IAAIlB,WAAW,CAACkB,KAAZlB,KAAsBW,SAA1B,EAAqC;IACnC,OAAOX,WAAW,CAACkB,KAAnB;EAHuB,EAMzB;;;EACA,IAAIlB,WAAW,CAACmB,YAAhB,EAA8B;IAC5B;IACA,OAAOnB,WAAW,CAACmB,YAAZnB,GAA2BkB,KAAlC;EACD;AAVI","names":["I18nManager","attachEventHandlersOnRef","props","ref","current","key","startsWith","toLowerCase","getLabel","label","accessibilityLabel","undefined","useId","useLayoutEffect","mergeIds","mergeProps","SSRProvider","useIsSSR","isRTL","getConstants"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/@react-native-aria/utils/lib/module/index.ts"],"sourcesContent":["import { I18nManager } from 'react-native';\n\nexport const attachEventHandlersOnRef = (props: any, ref: any) => {\n  if (ref && ref.current) {\n    for (let key in props) {\n      if (key.startsWith('on')) {\n        ref.current[key.toLowerCase()] = props[key];\n      }\n    }\n  }\n};\n\nexport const getLabel = (props: any) => {\n  let label = props.accessibilityLabel ?? props['aria-label'];\n\n  if (!label) {\n    label = typeof props.label === 'string' ? props.label : undefined;\n  }\n\n  return label;\n};\n\nexport * from './ariaToAccessibilityMap';\nexport {\n  useId,\n  useLayoutEffect,\n  mergeIds,\n  mergeProps,\n} from '@react-aria/utils';\nexport { SSRProvider, useIsSSR } from '@react-aria/ssr';\n\nexport const isRTL = () => {\n  // To support previous RN versions. Newer versions use below getConstants()\n  if (I18nManager.isRTL !== undefined) {\n    return I18nManager.isRTL;\n  }\n\n  // @ts-ignore - RN web only\n  if (I18nManager.getConstants) {\n    // @ts-ignore - RN web only\n    return I18nManager.getConstants().isRTL;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}