{"ast":null,"code":"import * as React from 'react';\nimport { Keyboard, Platform } from 'react-native';\nexport const useKeyboardBottomInset = () => {\n  const [bottom, setBottom] = React.useState(0);\n  const subscriptions = React.useRef([]);\n  React.useEffect(() => {\n    function onKeyboardChange(e) {\n      if (e.startCoordinates && e.endCoordinates.screenY <= e.startCoordinates.screenY) setBottom(e.endCoordinates.height / 2);else setBottom(0);\n    }\n\n    if (Platform.OS === 'ios') {\n      subscriptions.current = [Keyboard.addListener('keyboardWillChangeFrame', onKeyboardChange)];\n    } else {\n      subscriptions.current = [Keyboard.addListener('keyboardDidHide', onKeyboardChange), Keyboard.addListener('keyboardDidShow', onKeyboardChange)];\n    }\n\n    return () => {\n      subscriptions.current.forEach(subscription => {\n        subscription.remove();\n      });\n    };\n  }, [setBottom, subscriptions]);\n  return bottom;\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAkD,cAAlD;AAEA,OAAO,MAAMC,sBAAsB,GAAG,MAAM;EAC1C,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,KAAK,CAACM,QAANN,CAAe,CAAfA,CAA5B;EACA,MAAMO,aAAa,GAAGP,KAAK,CAACQ,MAANR,CAAoB,EAApBA,CAAtB;EAEAA,KAAK,CAACS,SAANT,CAAgB,MAAM;IACpB,SAASU,gBAAT,CAA0BC,CAA1B,EAA4C;MAC1C,IACEA,CAAC,CAACC,gBAAFD,IACAA,CAAC,CAACE,cAAFF,CAAiBG,OAAjBH,IAA4BA,CAAC,CAACC,gBAAFD,CAAmBG,OAFjD,EAIET,SAAS,CAACM,CAAC,CAACE,cAAFF,CAAiBI,MAAjBJ,GAA0B,CAA3B,CAATN,CAJF,KAKKA,SAAS,CAAC,CAAD,CAATA;IACN;;IAED,IAAIH,QAAQ,CAACc,EAATd,KAAgB,KAApB,EAA2B;MACzBK,aAAa,CAACU,OAAdV,GAAwB,CACtBN,QAAQ,CAACiB,WAATjB,CAAqB,yBAArBA,EAAgDS,gBAAhDT,CADsB,CAAxBM;IADF,OAIO;MACLA,aAAa,CAACU,OAAdV,GAAwB,CACtBN,QAAQ,CAACiB,WAATjB,CAAqB,iBAArBA,EAAwCS,gBAAxCT,CADsB,EAEtBA,QAAQ,CAACiB,WAATjB,CAAqB,iBAArBA,EAAwCS,gBAAxCT,CAFsB,CAAxBM;IAID;;IACD,OAAO,MAAM;MACXA,aAAa,CAACU,OAAdV,CAAsBY,OAAtBZ,CAA+Ba,YAAD,IAAkB;QAC9CA,YAAY,CAACC,MAAbD;MADF;IADF;EApBF,GAyBG,CAACf,SAAD,EAAYE,aAAZ,CAzBHP;EA2BA,OAAOI,MAAP;AA/BK","names":["React","Keyboard","Platform","useKeyboardBottomInset","bottom","setBottom","useState","subscriptions","useRef","useEffect","onKeyboardChange","e","startCoordinates","endCoordinates","screenY","height","OS","current","addListener","forEach","subscription","remove"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/utils/useKeyboardBottomInset.ts"],"sourcesContent":["import * as React from 'react';\nimport { Keyboard, Platform, KeyboardEvent } from 'react-native';\n\nexport const useKeyboardBottomInset = () => {\n  const [bottom, setBottom] = React.useState(0);\n  const subscriptions = React.useRef<any[]>([]);\n\n  React.useEffect(() => {\n    function onKeyboardChange(e: KeyboardEvent) {\n      if (\n        e.startCoordinates &&\n        e.endCoordinates.screenY <= e.startCoordinates.screenY\n      )\n        setBottom(e.endCoordinates.height / 2);\n      else setBottom(0);\n    }\n\n    if (Platform.OS === 'ios') {\n      subscriptions.current = [\n        Keyboard.addListener('keyboardWillChangeFrame', onKeyboardChange),\n      ];\n    } else {\n      subscriptions.current = [\n        Keyboard.addListener('keyboardDidHide', onKeyboardChange),\n        Keyboard.addListener('keyboardDidShow', onKeyboardChange),\n      ];\n    }\n    return () => {\n      subscriptions.current.forEach((subscription) => {\n        subscription.remove();\n      });\n    };\n  }, [setBottom, subscriptions]);\n\n  return bottom;\n};\n"]},"metadata":{},"sourceType":"module"}