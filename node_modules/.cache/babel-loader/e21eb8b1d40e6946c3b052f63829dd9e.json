{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Pressable } from '../../primitives/Pressable';\nimport { Icon } from '../../primitives/Icon';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { composeEventHandlers } from '../../../utils';\nimport { useHover, useFocus, useIsPressed } from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst IconButton = (_ref, ref) => {\n  let {\n    icon,\n    children,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    isDisabled,\n    ...props\n  } = _ref;\n  const {\n    hoverProps,\n    isHovered\n  } = useHover();\n  const {\n    pressableProps,\n    isPressed\n  } = useIsPressed();\n  const {\n    focusProps,\n    isFocused\n  } = useFocus();\n  const {\n    isFocusVisible,\n    focusProps: focusRingProps\n  } = useFocusRing();\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('IconButton', props, {\n    isHovered: isHoveredProp || isHovered,\n    isPressed: isPressedProp || isPressed,\n    isFocused: isFocusedProp || isFocused,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled\n  });\n  let clonedIcon;\n\n  if (icon) {\n    clonedIcon = /*#__PURE__*/React.cloneElement(icon, { ..._icon,\n      ...(icon === null || icon === void 0 ? void 0 : icon.props),\n      ...props._icon\n    });\n  } //TODO: refactor for responsive prop\n\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Pressable, _extends({\n    accessibilityRole: \"button\",\n    ref: ref,\n    onPressIn: composeEventHandlers(onPressIn, pressableProps.onPressIn),\n    onPressOut: composeEventHandlers(onPressOut, pressableProps.onPressOut) // @ts-ignore - web only\n    ,\n    onHoverIn: composeEventHandlers(onHoverIn, hoverProps.onHoverIn) // @ts-ignore - web only\n    ,\n    onHoverOut: composeEventHandlers(onHoverOut, hoverProps.onHoverOut) // @ts-ignore - web only\n    ,\n    onFocus: composeEventHandlers(composeEventHandlers(onFocus, focusProps.onFocus), focusRingProps.onFocus) // @ts-ignore - web only\n    ,\n    onBlur: composeEventHandlers(composeEventHandlers(onBlur, focusProps.onBlur), focusRingProps.onBlur)\n  }, resolvedProps), clonedIcon || /*#__PURE__*/React.createElement(Icon, _icon, children));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(IconButton));","map":{"version":3,"mappings":"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","names":["React","memo","forwardRef","Pressable","Icon","usePropsResolution","useHasResponsiveProps","composeEventHandlers","useHover","useFocus","useIsPressed","useFocusRing","IconButton","ref","icon","children","isHovered","isHoveredProp","isPressed","isPressedProp","isFocused","isFocusedProp","isFocusVisible","isFocusVisibleProp","isDisabled","props","hoverProps","pressableProps","focusProps","focusRingProps","_icon","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","resolvedProps","clonedIcon","cloneElement","accessibilityRole"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/IconButton/index.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Pressable } from '../../primitives/Pressable';\nimport { Icon } from '../../primitives/Icon';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { composeEventHandlers } from '../../../utils';\nimport type { IIconButtonProps } from './types';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst IconButton = (\n  {\n    icon,\n    children,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    isDisabled,\n    ...props\n  }: IIconButtonProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('IconButton', props, {\n    isHovered: isHoveredProp || isHovered,\n    isPressed: isPressedProp || isPressed,\n    isFocused: isFocusedProp || isFocused,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled,\n  });\n\n  let clonedIcon;\n  if (icon) {\n    clonedIcon = React.cloneElement(icon, {\n      ..._icon,\n      ...icon?.props,\n      ...props._icon,\n    });\n  }\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Pressable\n      accessibilityRole=\"button\"\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n    >\n      {clonedIcon || <Icon {..._icon}>{children}</Icon>}\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(IconButton));\nexport type { IIconButtonProps };\n"]},"metadata":{},"sourceType":"module"}