{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport { Pressable as RNPressable } from 'react-native';\nimport { composeEventHandlers } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFocusRing } from '@react-native-aria/focus';\nexport const useHover = () => {\n  const [isHovered, setHovered] = React.useState(false);\n  return {\n    hoverProps: {\n      onHoverIn: () => setHovered(true),\n      onHoverOut: () => setHovered(false)\n    },\n    isHovered\n  };\n};\nexport const useFocus = () => {\n  const [isFocused, setFocused] = React.useState(false);\n  return {\n    focusProps: {\n      onFocus: () => setFocused(true),\n      onBlur: () => setFocused(false)\n    },\n    isFocused\n  };\n};\nexport const useIsPressed = () => {\n  const [isPressed, setIsPressed] = React.useState(false);\n  return {\n    pressableProps: {\n      onPressIn: () => setIsPressed(true),\n      onPressOut: () => setIsPressed(false)\n    },\n    isPressed\n  };\n};\nconst StyledPressable = makeStyledComponent(RNPressable);\n\nconst Pressable = (_ref, ref) => {\n  let {\n    children,\n    isDisabled,\n    disabled,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  } = _ref;\n  const {\n    hoverProps,\n    isHovered\n  } = useHover();\n  const {\n    pressableProps,\n    isPressed\n  } = useIsPressed();\n  const {\n    focusProps,\n    isFocused\n  } = useFocus();\n  const {\n    isFocusVisible,\n    focusProps: focusRingProps\n  } = useFocusRing();\n  const {\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('Pressable', props, {\n    isPressed: isPressedProp || isPressed,\n    isFocused: isFocusedProp || isFocused,\n    isHovered: isHoveredProp || isHovered,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled: disabled || isDisabled\n  }); // TODO: Replace Render props with Context Hook\n  //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  } // TODO: Replace Render props with Context Hook\n\n\n  return /*#__PURE__*/React.createElement(StyledPressable, _extends({\n    ref: ref,\n    onPressIn: composeEventHandlers(onPressIn, pressableProps.onPressIn),\n    onPressOut: composeEventHandlers(onPressOut, pressableProps.onPressOut) // @ts-ignore - web only\n    ,\n    onHoverIn: composeEventHandlers(onHoverIn, hoverProps.onHoverIn) // @ts-ignore - web only\n    ,\n    onHoverOut: composeEventHandlers(onHoverOut, hoverProps.onHoverOut) // @ts-ignore - web only\n    ,\n    onFocus: composeEventHandlers(composeEventHandlers(onFocus, focusProps.onFocus), focusRingProps.onFocus) // @ts-ignore - web only\n    ,\n    onBlur: composeEventHandlers(composeEventHandlers(onBlur, focusProps.onBlur), focusRingProps.onBlur),\n    disabled: disabled || isDisabled\n  }, resolvedProps), typeof children !== 'function' ? children : children({\n    isPressed,\n    isHovered,\n    isFocused\n  }));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Pressable));","map":{"version":3,"mappings":"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","names":["React","forwardRef","memo","Pressable","RNPressable","composeEventHandlers","useHasResponsiveProps","makeStyledComponent","usePropsResolution","useFocusRing","useHover","isHovered","setHovered","useState","hoverProps","onHoverIn","onHoverOut","useFocus","isFocused","setFocused","focusProps","onFocus","onBlur","useIsPressed","isPressed","setIsPressed","pressableProps","onPressIn","onPressOut","StyledPressable","ref","children","isDisabled","disabled","isHoveredProp","isPressedProp","isFocusedProp","isFocusVisible","isFocusVisibleProp","props","focusRingProps","resolvedProps"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Pressable/Pressable.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { Pressable as RNPressable } from 'react-native';\nimport { composeEventHandlers } from '../../../utils';\nimport type { IPressableProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nexport const useHover = () => {\n  const [isHovered, setHovered] = React.useState(false);\n  return {\n    hoverProps: {\n      onHoverIn: () => setHovered(true),\n      onHoverOut: () => setHovered(false),\n    },\n    isHovered,\n  };\n};\n\nexport const useFocus = () => {\n  const [isFocused, setFocused] = React.useState(false);\n  return {\n    focusProps: {\n      onFocus: () => setFocused(true),\n      onBlur: () => setFocused(false),\n    },\n    isFocused,\n  };\n};\n\nexport const useIsPressed = () => {\n  const [isPressed, setIsPressed] = React.useState(false);\n  return {\n    pressableProps: {\n      onPressIn: () => setIsPressed(true),\n      onPressOut: () => setIsPressed(false),\n    },\n    isPressed,\n  };\n};\n\nconst StyledPressable = makeStyledComponent(RNPressable);\n\nconst Pressable = (\n  {\n    children,\n    isDisabled,\n    disabled,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IPressableProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('Pressable', props, {\n    isPressed: isPressedProp || isPressed,\n    isFocused: isFocusedProp || isFocused,\n    isHovered: isHoveredProp || isHovered,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled: disabled || isDisabled,\n  });\n\n  // TODO: Replace Render props with Context Hook\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  // TODO: Replace Render props with Context Hook\n  return (\n    <StyledPressable\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      disabled={disabled || isDisabled}\n      {...resolvedProps}\n    >\n      {typeof children !== 'function'\n        ? children\n        : children({\n            isPressed,\n            isHovered,\n            isFocused,\n          })}\n    </StyledPressable>\n  );\n};\n\nexport default memo(forwardRef(Pressable));\n"]},"metadata":{},"sourceType":"module"}