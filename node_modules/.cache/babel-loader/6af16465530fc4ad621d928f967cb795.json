{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box'; // import { HStack } from '../../primitives/Stack';\n\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { AlertContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Alert = (_ref, ref) => {\n  let {\n    children,\n    ...props\n  } = _ref;\n  const {\n    status,\n    variant,\n    _icon,\n    colorScheme,\n    ...newProps\n  } = usePropsResolution('Alert', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(AlertContext.Provider, {\n    value: {\n      status,\n      variant,\n      _icon,\n      colorScheme\n    }\n  }, /*#__PURE__*/React.createElement(Box, _extends({}, newProps, {\n    ref: ref\n  }), children));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Alert));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,OAAOC,GAAP,MAAgB,sBAAhB,C,CACA;;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AAEA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,KAAK,GAAG,OAAsCC,GAAtC,KAAoD;EAAA,IAAnD;IAAEC,QAAF;IAAY,GAAGC;EAAf,CAAmD;EAChE,MAAM;IACJC,MADI;IAEJC,OAFI;IAGJC,KAHI;IAIJC,WAJI;IAKJ,GAAGC;EALC,IAMFX,kBAAkB,CAAC,OAAD,EAAUM,KAAV,CANtB,CADgE,CAQhE;;EACA,IAAIJ,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBACEV,oBAACK,YAAD,CAAcW,QAAd;IACEC,KAAK,EAAE;MACLN,MADK;MAELC,OAFK;MAGLC,KAHK;MAILC;IAJK;EADT,gBAQEd,oBAACG,GAAD,eAASY,QAAT;IAAmBP,GAAG,EAAEA;EAAxB,IACGC,QADH,CARF,CADF;AAZF;;AA4BA,4BAAeR,IAAI,eAACC,UAAU,CAACK,KAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Box","usePropsResolution","AlertContext","useHasResponsiveProps","Alert","ref","children","props","status","variant","_icon","colorScheme","newProps","Provider","value"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Alert/Alert.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\n// import { HStack } from '../../primitives/Stack';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IAlertProps } from './types';\nimport { AlertContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Alert = ({ children, ...props }: IAlertProps, ref?: any) => {\n  const {\n    status,\n    variant,\n    _icon,\n    colorScheme,\n    ...newProps\n  } = usePropsResolution('Alert', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <AlertContext.Provider\n      value={{\n        status,\n        variant,\n        _icon,\n        colorScheme,\n      }}\n    >\n      <Box {...newProps} ref={ref}>\n        {children}\n      </Box>\n    </AlertContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(Alert));\n"]},"metadata":{},"sourceType":"module"}