{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport { useSliderThumb } from '@react-native-aria/slider';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { useToken } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from '../Box';\nimport { SliderContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\n\nfunction SliderThumb(props, ref) {\n  const [isPressed, setIsPressed] = React.useState(false);\n  const [isFocused, setIsFocused] = React.useState(false);\n\n  const handleFocus = (focusState, callback) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  const _ref = React.useRef(null);\n\n  const {\n    isHovered\n  } = useHover({}, _ref);\n  const {\n    state,\n    trackLayout,\n    orientation,\n    colorScheme,\n    thumbSize,\n    isReadOnly,\n    isDisabled,\n    _interactionBox: interactionBoxContext\n  } = React.useContext(SliderContext);\n  const {\n    onFocus,\n    onBlur,\n    _stack,\n    _interactionBox,\n    ...resolvedProps\n  } = usePropsResolution('SliderThumb', {\n    size: thumbSize,\n    _interactionBox: interactionBoxContext,\n    colorScheme,\n    ...props\n  }, {\n    isDisabled,\n    isReadOnly,\n    isPressed,\n    isFocused,\n    isHovered\n  });\n  const inputRef = React.useRef(null);\n  const {\n    thumbProps,\n    inputProps\n  } = useSliderThumb({\n    index: 0,\n    trackLayout,\n    inputRef,\n    orientation\n  }, state);\n  React.useEffect(() => {\n    setIsPressed(state.isThumbDragging(0));\n  }, [state]);\n  const thumbAbsoluteSize = useToken('sizes', resolvedProps.size);\n  const thumbStyles = {\n    bottom: orientation === 'vertical' ? \"\".concat(state.getThumbPercent(0) * 100, \"%\") : undefined,\n    left: orientation !== 'vertical' ? \"\".concat(state.getThumbPercent(0) * 100, \"%\") : undefined,\n    transform: orientation === 'vertical' ? [{\n      translateY: parseInt(thumbAbsoluteSize) / 2\n    }] : [{\n      translateX: -parseInt(thumbAbsoluteSize) / 2\n    }]\n  };\n  thumbStyles.transform.push({\n    scale: state.isThumbDragging(0) ? resolvedProps.scaleOnPressed : 1\n  });\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [...stylingProps.margin, ...stylingProps.layout, ...stylingProps.flexbox, ...stylingProps.position, ...stylingProps.outline]);\n  const [accessibilityProps, nonAccessibilityProps] = extractInObject(nonLayoutProps, ['accessibilityRole', 'accessibilityState']); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, _extends({\n    position: \"absolute\"\n  }, thumbProps, resolvedProps, accessibilityProps, layoutProps, {\n    style: [thumbStyles, resolvedProps.style],\n    onFocus: e => {\n      handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n    },\n    onBlur: e => {\n      handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n    } // {...(isReadOnly && _readOnly)}\n    // {...(isDisabled && _disabled)}\n    ,\n    ref: mergeRefs([_ref, ref])\n  }), /*#__PURE__*/React.createElement(Stack, _stack, /*#__PURE__*/React.createElement(Box, _interactionBox), /*#__PURE__*/React.createElement(Center, nonAccessibilityProps, props.children, Platform.OS === 'web' && /*#__PURE__*/React.createElement(VisuallyHidden, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    ref: inputRef\n  }, inputProps))))));\n}\n\nSliderThumb.displayName = 'SliderThumb';\nexport default /*#__PURE__*/forwardRef(SliderThumb);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AAEA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,eAAT,EAA0BC,YAA1B,QAA8C,4BAA9C;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,MAAT,QAAuB,yBAAvB;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA+CC,GAA/C,EAAyD;EACvD,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BpB,KAAK,CAACqB,QAANrB,CAAe,KAAfA,CAAlC;EAEA,MAAM,CAACsB,SAAD,EAAYC,YAAZ,IAA4BvB,KAAK,CAACqB,QAANrB,CAAe,KAAfA,CAAlC;;EACA,MAAMwB,WAAW,GAAG,CAACC,UAAD,EAAsBC,QAAtB,KAAwC;IAC1DH,YAAY,CAACE,UAAD,CAAZF;IACAG,QAAQ;EAFV;;EAKA,MAAMC,IAAI,GAAG3B,KAAK,CAAC4B,MAAN5B,CAAa,IAAbA,CAAb;;EACA,MAAM;IAAE6B;EAAF,IAAgBnB,QAAQ,CAAC,EAAD,EAAKiB,IAAL,CAA9B;EAEA,MAAM;IACJG,KADI;IAEJC,WAFI;IAGJC,WAHI;IAIJC,WAJI;IAKJC,SALI;IAMJC,UANI;IAOJC,UAPI;IAQJC,eAAe,EAAEC;EARb,IASFtC,KAAK,CAACuC,UAANvC,CAAiBQ,aAAjBR,CATJ;EAUA,MAAM;IACJwC,OADI;IAEJC,MAFI;IAGJC,MAHI;IAIJL,eAJI;IAKJ,GAAGM;EALC,IAMFrC,kBAAkB,CACpB,aADoB,EAEpB;IACEsC,IAAI,EAAEV,SADR;IAEEG,eAAe,EAAEC,qBAFnB;IAGEL,WAHF;IAIE,GAAGhB;EAJL,CAFoB,EAQpB;IACEmB,UADF;IAEED,UAFF;IAGEhB,SAHF;IAIEG,SAJF;IAKEO;EALF,CARoB,CANtB;EAuBA,MAAMgB,QAAQ,GAAG7C,KAAK,CAAC4B,MAAN5B,CAAa,IAAbA,CAAjB;EACA,MAAM;IAAE8C,UAAF;IAAcC;EAAd,IAA6B5C,cAAc,CAC/C;IACE6C,KAAK,EAAE,CADT;IAEEjB,WAFF;IAGEc,QAHF;IAIEb;EAJF,CAD+C,EAO/CF,KAP+C,CAAjD;EAUA9B,KAAK,CAACiD,SAANjD,CAAgB,MAAM;IACpBoB,YAAY,CAACU,KAAK,CAACoB,eAANpB,CAAsB,CAAtBA,CAAD,CAAZV;EADF,GAEG,CAACU,KAAD,CAFH9B;EAIA,MAAMmD,iBAAiB,GAAG9C,QAAQ,CAAC,OAAD,EAAUsC,aAAa,CAACC,IAAxB,CAAlC;EAEA,MAAMQ,WAAgB,GAAG;IACvBC,MAAM,EACJrB,WAAW,KAAK,UAAhBA,aACOF,KAAK,CAACwB,eAANxB,CAAsB,CAAtBA,IAA2B,GADlC,SAEIyB,SAJiB;IAKvBC,IAAI,EACFxB,WAAW,KAAK,UAAhBA,aACOF,KAAK,CAACwB,eAANxB,CAAsB,CAAtBA,IAA2B,GADlC,SAEIyB,SARiB;IASvBE,SAAS,EACPzB,WAAW,KAAK,UAAhBA,GACI,CAAC;MAAE0B,UAAU,EAAEC,QAAQ,CAACR,iBAAD,CAARQ,GAA8B;IAA5C,CAAD,CADJ3B,GAEI,CAAC;MAAE4B,UAAU,EAAE,CAACD,QAAQ,CAACR,iBAAD,CAAT,GAA+B;IAA7C,CAAD;EAZiB,CAAzB;EAeAC,WAAW,CAACK,SAAZL,CAAsBS,IAAtBT,CAA2B;IACzBU,KAAK,EAAEhC,KAAK,CAACoB,eAANpB,CAAsB,CAAtBA,IAA2Ba,aAAa,CAACoB,cAAzCjC,GAA0D;EADxC,CAA3BsB;EAIA,MAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCrD,eAAe,CAAC+B,aAAD,EAAgB,CACnE,GAAG9B,YAAY,CAACqD,MADmD,EAEnE,GAAGrD,YAAY,CAACsD,MAFmD,EAGnE,GAAGtD,YAAY,CAACuD,OAHmD,EAInE,GAAGvD,YAAY,CAACwD,QAJmD,EAKnE,GAAGxD,YAAY,CAACyD,OALmD,CAAhB,CAArD;EAQA,MAAM,CACJC,kBADI,EAEJC,qBAFI,IAGF5D,eAAe,CAACqD,cAAD,EAAiB,CAClC,mBADkC,EAElC,oBAFkC,CAAjB,CAHnB,CAzFuD,CAiGvD;;EACA,IAAIxD,qBAAqB,CAACQ,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EAED,oBACEjB,oBAACO,GAAD;IACE8D,QAAQ,EAAC;EADX,GAEMvB,UAFN,EAGMH,aAHN,EAIM4B,kBAJN,EAKMP,WALN;IAMES,KAAK,EAAE,CAACrB,WAAD,EAAcT,aAAa,CAAC8B,KAA5B,CANT;IAOEjC,OAAO,EAAGkC,CAAD,IAAY;MACnBlD,WAAW,CAAC,IAAD,EAAOgB,OAAO,GAAG,MAAMA,OAAO,CAACkC,CAAD,CAAhB,GAAsB,MAAM,CAA1C,EAAXlD;IARJ;IAUEiB,MAAM,EAAGiC,CAAD,IAAY;MAClBlD,WAAW,CAAC,KAAD,EAAQiB,MAAM,GAAG,MAAMA,MAAM,CAACiC,CAAD,CAAf,GAAqB,MAAM,CAAzC,EAAXlD;IAXJ,EAaE;IACA;IAdF;IAeEN,GAAG,EAAEP,SAAS,CAAC,CAACgB,IAAD,EAAOT,GAAP,CAAD;EAfhB,iBAiBElB,oBAACc,KAAD,EAAW4B,MAAX,eACE1C,oBAACO,GAAD,EAAS8B,eAAT,CADF,eAEErC,oBAACe,MAAD,EAAYyD,qBAAZ,EACGvD,KAAK,CAAC0D,QADT,EAEGzE,QAAQ,CAAC0E,EAAT1E,KAAgB,KAAhBA,iBACCF,oBAACI,cAAD,qBACEJ;IAAOkB,GAAG,EAAE2B;EAAZ,GAA0BE,UAA1B,EADF,CAHJ,CAFF,CAjBF,CADF;AA+BD;;AAED/B,WAAW,CAAC6D,WAAZ7D,GAA0B,aAA1BA;AAEA,4BAAef,UAAU,CAACe,WAAD,CAAzB","names":["React","forwardRef","Platform","useSliderThumb","VisuallyHidden","useToken","usePropsResolution","Box","SliderContext","useHasResponsiveProps","useHover","mergeRefs","extractInObject","stylingProps","Stack","Center","SliderThumb","props","ref","isPressed","setIsPressed","useState","isFocused","setIsFocused","handleFocus","focusState","callback","_ref","useRef","isHovered","state","trackLayout","orientation","colorScheme","thumbSize","isReadOnly","isDisabled","_interactionBox","interactionBoxContext","useContext","onFocus","onBlur","_stack","resolvedProps","size","inputRef","thumbProps","inputProps","index","useEffect","isThumbDragging","thumbAbsoluteSize","thumbStyles","bottom","getThumbPercent","undefined","left","transform","translateY","parseInt","translateX","push","scale","scaleOnPressed","layoutProps","nonLayoutProps","margin","layout","flexbox","position","outline","accessibilityProps","nonAccessibilityProps","style","e","children","OS","displayName"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Slider/SliderThumb.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport { useSliderThumb } from '@react-native-aria/slider';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { useToken } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { ISliderThumbProps } from './types';\nimport Box from '../Box';\nimport { SliderContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\n\nfunction SliderThumb(props: ISliderThumbProps, ref: any) {\n  const [isPressed, setIsPressed] = React.useState(false);\n\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const {\n    state,\n    trackLayout,\n    orientation,\n    colorScheme,\n    thumbSize,\n    isReadOnly,\n    isDisabled,\n    _interactionBox: interactionBoxContext,\n  } = React.useContext(SliderContext);\n  const {\n    onFocus,\n    onBlur,\n    _stack,\n    _interactionBox,\n    ...resolvedProps\n  } = usePropsResolution(\n    'SliderThumb',\n    {\n      size: thumbSize,\n      _interactionBox: interactionBoxContext,\n      colorScheme,\n      ...props,\n    },\n    {\n      isDisabled,\n      isReadOnly,\n      isPressed,\n      isFocused,\n      isHovered,\n    }\n  );\n\n  const inputRef = React.useRef(null);\n  const { thumbProps, inputProps } = useSliderThumb(\n    {\n      index: 0,\n      trackLayout,\n      inputRef,\n      orientation,\n    },\n    state\n  );\n\n  React.useEffect(() => {\n    setIsPressed(state.isThumbDragging(0));\n  }, [state]);\n\n  const thumbAbsoluteSize = useToken('sizes', resolvedProps.size);\n\n  const thumbStyles: any = {\n    bottom:\n      orientation === 'vertical'\n        ? `${state.getThumbPercent(0) * 100}%`\n        : undefined,\n    left:\n      orientation !== 'vertical'\n        ? `${state.getThumbPercent(0) * 100}%`\n        : undefined,\n    transform:\n      orientation === 'vertical'\n        ? [{ translateY: parseInt(thumbAbsoluteSize) / 2 }]\n        : [{ translateX: -parseInt(thumbAbsoluteSize) / 2 }],\n  };\n\n  thumbStyles.transform.push({\n    scale: state.isThumbDragging(0) ? resolvedProps.scaleOnPressed : 1,\n  });\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    ...stylingProps.outline,\n  ]);\n\n  const [\n    accessibilityProps,\n    nonAccessibilityProps,\n  ] = extractInObject(nonLayoutProps, [\n    'accessibilityRole',\n    'accessibilityState',\n  ]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      position=\"absolute\"\n      {...thumbProps}\n      {...resolvedProps}\n      {...accessibilityProps}\n      {...layoutProps}\n      style={[thumbStyles, resolvedProps.style]}\n      onFocus={(e: any) => {\n        handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n      }}\n      onBlur={(e: any) => {\n        handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n      }}\n      // {...(isReadOnly && _readOnly)}\n      // {...(isDisabled && _disabled)}\n      ref={mergeRefs([_ref, ref])}\n    >\n      <Stack {..._stack}>\n        <Box {..._interactionBox} />\n        <Center {...nonAccessibilityProps}>\n          {props.children}\n          {Platform.OS === 'web' && (\n            <VisuallyHidden>\n              <input ref={inputRef} {...inputProps} />\n            </VisuallyHidden>\n          )}\n        </Center>\n      </Stack>\n    </Box>\n  );\n}\n\nSliderThumb.displayName = 'SliderThumb';\n\nexport default forwardRef(SliderThumb);\n"]},"metadata":{},"sourceType":"module"}