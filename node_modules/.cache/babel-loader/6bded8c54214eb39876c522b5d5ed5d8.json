{"ast":null,"code":"import { useMenuTriggerState } from \"@react-stately/menu\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport { ListCollection, useSingleSelectListState } from \"@react-stately/list\";\nimport _babelRuntimeHelpersEsmExtends from \"@babel/runtime/helpers/esm/extends\";\n/**\n * Provides state management for a combo box component. Handles building a collection\n * of items from props and manages the option selection state of the combo box. In addition, it tracks the input value,\n * focus state, and other properties of the combo box.\n */\n\nexport function useComboBoxState(props) {\n  var _props$defaultInputVa, _props$items, _ref, _props$selectedKey;\n\n  let {\n    defaultFilter,\n    menuTrigger = 'input',\n    allowsEmptyCollection = false,\n    allowsCustomValue,\n    shouldCloseOnBlur = true\n  } = props;\n  let [isFocused, setFocusedState] = useState(false);\n  let [inputValue, setInputValue] = useControlledState(props.inputValue, (_props$defaultInputVa = props.defaultInputValue) != null ? _props$defaultInputVa : '', props.onInputChange);\n\n  let onSelectionChange = key => {\n    if (props.onSelectionChange) {\n      props.onSelectionChange(key);\n    } // If open state or selectedKey is uncontrolled and key is the same, reset the inputValue and close the menu\n    // (scenario: user clicks on already selected option)\n\n\n    if (props.isOpen === undefined || props.selectedKey === undefined) {\n      if (key === selectedKey) {\n        resetInputValue();\n        triggerState.close();\n      }\n    }\n  };\n\n  let {\n    collection,\n    selectionManager,\n    selectedKey,\n    setSelectedKey,\n    selectedItem,\n    disabledKeys\n  } = useSingleSelectListState(_babelRuntimeHelpersEsmExtends({}, props, {\n    onSelectionChange,\n    items: (_props$items = props.items) != null ? _props$items : props.defaultItems\n  }));\n  let filteredCollection = useMemo(() => // No default filter if items are controlled.\n  props.items != null || !defaultFilter ? collection : $b1b6afed698df4428b7ed319af4b90$var$filterCollection(collection, inputValue, defaultFilter), [collection, inputValue, defaultFilter, props.items]);\n  let triggerState = useMenuTriggerState(props);\n\n  let open = focusStrategy => {\n    // Prevent open operations from triggering if there is nothing to display\n    if (allowsEmptyCollection || filteredCollection.size > 0) {\n      triggerState.open(focusStrategy);\n    }\n  };\n\n  let toggle = focusStrategy => {\n    // If the menu is closed and there is nothing to display, early return so toggle isn't called to prevent extraneous onOpenChange\n    if (!(allowsEmptyCollection || filteredCollection.size > 0) && !triggerState.isOpen) {\n      return;\n    }\n\n    triggerState.toggle(focusStrategy);\n  };\n\n  let lastValue = useRef(inputValue);\n\n  let resetInputValue = () => {\n    var _collection$getItem$t, _collection$getItem;\n\n    let itemText = (_collection$getItem$t = (_collection$getItem = collection.getItem(selectedKey)) == null ? void 0 : _collection$getItem.textValue) != null ? _collection$getItem$t : '';\n    lastValue.current = itemText;\n    setInputValue(itemText);\n  };\n\n  let isInitialRender = useRef(true);\n  let lastSelectedKey = useRef((_ref = (_props$selectedKey = props.selectedKey) != null ? _props$selectedKey : props.defaultSelectedKey) != null ? _ref : null);\n  useEffect(() => {\n    // If open state or inputValue is uncontrolled, open and close automatically when the input value changes,\n    // the input is if focused, and there are items in the collection.\n    if (isFocused && filteredCollection.size > 0 && !triggerState.isOpen && inputValue !== lastValue.current && menuTrigger !== 'manual' && (props.isOpen === undefined || props.inputValue === undefined)) {\n      open();\n    } // Close the menu if the collection is empty and either open state or items are uncontrolled.\n\n\n    if (!allowsEmptyCollection && triggerState.isOpen && filteredCollection.size === 0 && (props.isOpen === undefined || props.items === undefined)) {\n      triggerState.close();\n    } // Close when an item is selected, if open state or selectedKey is uncontrolled.\n\n\n    if (selectedKey != null && selectedKey !== lastSelectedKey.current && (props.isOpen === undefined || props.selectedKey === undefined)) {\n      triggerState.close();\n    } // Clear focused key when input value changes.\n\n\n    if (inputValue !== lastValue.current) {\n      selectionManager.setFocusedKey(null); // Set selectedKey to null when the user clears the input.\n      // If controlled, this is the application developer's responsibility.\n\n      if (inputValue === '' && (props.inputValue === undefined || props.selectedKey === undefined)) {\n        setSelectedKey(null);\n      }\n    } // If it is the intial render and inputValue isn't controlled nor has an intial value, set input to match current selected key if any\n\n\n    if (isInitialRender.current && props.inputValue === undefined && props.defaultInputValue === undefined) {\n      resetInputValue();\n    } // If the selectedKey changed, update the input value.\n    // Do nothing if both inputValue and selectedKey are controlled.\n    // In this case, it's the user's responsibility to update inputValue in onSelectionChange. In addition, we preserve the defaultInputValue\n    // on initial render, even if it doesn't match the selected item's text.\n\n\n    if (selectedKey !== lastSelectedKey.current && (props.inputValue === undefined || props.selectedKey === undefined)) {\n      resetInputValue();\n    } else {\n      lastValue.current = inputValue;\n    }\n\n    isInitialRender.current = false;\n    lastSelectedKey.current = selectedKey;\n  });\n  useEffect(() => {\n    // Reset focused key when the menu closes\n    if (!triggerState.isOpen) {\n      selectionManager.setFocusedKey(null);\n    }\n  }, [triggerState.isOpen, selectionManager]);\n\n  let commitCustomValue = () => {\n    let shouldClose = false;\n    lastSelectedKey.current = null;\n    setSelectedKey(null); // If previous key was already null, need to manually call onSelectionChange since it won't be triggered by a setSelectedKey call\n    // This allows the application to control whether or not to close the menu on custom value commit\n\n    if (selectedKey === null && props.onSelectionChange) {\n      props.onSelectionChange(null);\n    } // Should close menu ourselves if component open state or selected key is uncontrolled and therefore won't be closed by a user defined event handler\n\n\n    shouldClose = props.isOpen == null || props.selectedKey === undefined; // Close if no other event will be fired. Otherwise, allow the\n    // application to control this based on that event.\n\n    if (shouldClose) {\n      triggerState.close();\n    }\n  };\n\n  let commit = () => {\n    if (triggerState.isOpen && selectionManager.focusedKey != null) {\n      // Reset inputValue and close menu here if the selected key is already the focused key. Otherwise\n      // fire onSelectionChange to allow the application to control the closing.\n      if (selectedKey === selectionManager.focusedKey) {\n        resetInputValue();\n        triggerState.close();\n      } else {\n        setSelectedKey(selectionManager.focusedKey);\n      }\n    } else if (allowsCustomValue) {\n      commitCustomValue();\n    }\n  };\n\n  let setFocused = isFocused => {\n    if (isFocused) {\n      if (menuTrigger === 'focus') {\n        open();\n      }\n    } else if (shouldCloseOnBlur) {\n      var _collection$getItem$t2, _collection$getItem2;\n\n      let itemText = (_collection$getItem$t2 = (_collection$getItem2 = collection.getItem(selectedKey)) == null ? void 0 : _collection$getItem2.textValue) != null ? _collection$getItem$t2 : '';\n\n      if (allowsCustomValue && inputValue !== itemText) {\n        commitCustomValue();\n      } else {\n        resetInputValue(); // Close menu if blurring away from the combobox\n        // Specifically handles case where user clicks away from the field\n\n        triggerState.close();\n      }\n    }\n\n    setFocusedState(isFocused);\n  };\n\n  return _babelRuntimeHelpersEsmExtends({}, triggerState, {\n    toggle,\n    open,\n    selectionManager,\n    selectedKey,\n    setSelectedKey,\n    disabledKeys,\n    isFocused,\n    setFocused,\n    selectedItem,\n    collection: filteredCollection,\n    inputValue,\n    setInputValue,\n    commit\n  });\n}\n\nfunction $b1b6afed698df4428b7ed319af4b90$var$filterCollection(collection, inputValue, filter) {\n  return new ListCollection($b1b6afed698df4428b7ed319af4b90$var$filterNodes(collection, inputValue, filter));\n}\n\nfunction $b1b6afed698df4428b7ed319af4b90$var$filterNodes(nodes, inputValue, filter) {\n  let filteredNode = [];\n\n  for (let node of nodes) {\n    if (node.type === 'section' && node.hasChildNodes) {\n      let filtered = $b1b6afed698df4428b7ed319af4b90$var$filterNodes(node.childNodes, inputValue, filter);\n\n      if ([...filtered].length > 0) {\n        filteredNode.push(_babelRuntimeHelpersEsmExtends({}, node, {\n          childNodes: filtered\n        }));\n      }\n    } else if (node.type !== 'section' && filter(node.textValue, inputValue)) {\n      filteredNode.push(node);\n    }\n  }\n\n  return filteredNode;\n}","map":{"version":3,"mappings":"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","names":["useComboBoxState","props","defaultFilter","menuTrigger","allowsEmptyCollection","allowsCustomValue","shouldCloseOnBlur","isFocused","setFocusedState","useState","inputValue","setInputValue","useControlledState","defaultInputValue","onInputChange","onSelectionChange","key","isOpen","undefined","selectedKey","resetInputValue","triggerState","close","collection","selectionManager","setSelectedKey","selectedItem","disabledKeys","useSingleSelectListState","items","defaultItems","filteredCollection","useMemo","filterCollection","useMenuTriggerState","open","focusStrategy","size","toggle","lastValue","useRef","itemText","getItem","_collection$getItem","textValue","current","isInitialRender","lastSelectedKey","defaultSelectedKey","useEffect","setFocusedKey","commitCustomValue","shouldClose","commit","focusedKey","setFocused","_collection$getItem2","filter","ListCollection","filterNodes","nodes","filteredNode","node","type","hasChildNodes","filtered","childNodes","length","push"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/@react-stately/combobox/dist/packages/@react-stately/combobox/src/useComboBoxState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, FocusStrategy, Node} from '@react-types/shared';\nimport {ComboBoxProps} from '@react-types/combobox';\nimport {ListCollection, useSingleSelectListState} from '@react-stately/list';\nimport {SelectState} from '@react-stately/select';\nimport {useControlledState} from '@react-stately/utils';\nimport {useEffect, useMemo, useRef, useState} from 'react';\nimport {useMenuTriggerState} from '@react-stately/menu';\n\nexport interface ComboBoxState<T> extends SelectState<T> {\n  /** The current value of the combo box input. */\n  inputValue: string,\n  /** Sets the value of the combo box input. */\n  setInputValue(value: string): void,\n  /** Selects the currently focused item and updates the input value. */\n  commit(): void\n}\n\ntype FilterFn = (textValue: string, inputValue: string) => boolean;\ninterface ComboBoxStateProps<T> extends ComboBoxProps<T> {\n  /** The filter function used to determine if a option should be included in the combo box list. */\n  defaultFilter?: FilterFn,\n  /** Whether the combo box allows the menu to be open when the collection is empty. */\n  allowsEmptyCollection?: boolean,\n  /** Whether the combo box menu should close on blur. */\n  shouldCloseOnBlur?: boolean\n}\n\n/**\n * Provides state management for a combo box component. Handles building a collection\n * of items from props and manages the option selection state of the combo box. In addition, it tracks the input value,\n * focus state, and other properties of the combo box.\n */\nexport function useComboBoxState<T extends object>(props: ComboBoxStateProps<T>): ComboBoxState<T> {\n  let {\n    defaultFilter,\n    menuTrigger = 'input',\n    allowsEmptyCollection = false,\n    allowsCustomValue,\n    shouldCloseOnBlur = true\n  } = props;\n\n  let [isFocused, setFocusedState] = useState(false);\n  let [inputValue, setInputValue] = useControlledState(\n    props.inputValue,\n    props.defaultInputValue ?? '',\n    props.onInputChange\n  );\n\n  let onSelectionChange = (key) => {\n    if (props.onSelectionChange) {\n      props.onSelectionChange(key);\n    }\n\n    // If open state or selectedKey is uncontrolled and key is the same, reset the inputValue and close the menu\n    // (scenario: user clicks on already selected option)\n    if (props.isOpen === undefined || props.selectedKey === undefined) {\n      if (key === selectedKey) {\n        resetInputValue();\n        triggerState.close();\n      }\n    }\n  };\n\n  let {collection, selectionManager, selectedKey, setSelectedKey, selectedItem, disabledKeys} = useSingleSelectListState({\n    ...props,\n    onSelectionChange,\n    items: props.items ?? props.defaultItems\n  });\n\n  let filteredCollection = useMemo(() => (\n    // No default filter if items are controlled.\n    props.items != null || !defaultFilter\n      ? collection\n      : filterCollection(collection, inputValue, defaultFilter)\n  ), [collection, inputValue, defaultFilter, props.items]);\n\n  let triggerState = useMenuTriggerState(props);\n  let open = (focusStrategy?: FocusStrategy) => {\n    // Prevent open operations from triggering if there is nothing to display\n    if (allowsEmptyCollection || filteredCollection.size > 0) {\n      triggerState.open(focusStrategy);\n    }\n  };\n\n  let toggle = (focusStrategy?: FocusStrategy) => {\n    // If the menu is closed and there is nothing to display, early return so toggle isn't called to prevent extraneous onOpenChange\n    if (!(allowsEmptyCollection || filteredCollection.size > 0) && !triggerState.isOpen) {\n      return;\n    }\n\n    triggerState.toggle(focusStrategy);\n  };\n\n  let lastValue = useRef(inputValue);\n  let resetInputValue = () => {\n    let itemText = collection.getItem(selectedKey)?.textValue ?? '';\n    lastValue.current = itemText;\n    setInputValue(itemText);\n  };\n\n  let isInitialRender = useRef(true);\n  let lastSelectedKey = useRef(props.selectedKey ?? props.defaultSelectedKey ?? null);\n  useEffect(() => {\n    // If open state or inputValue is uncontrolled, open and close automatically when the input value changes,\n    // the input is if focused, and there are items in the collection.\n    if (\n      isFocused &&\n      filteredCollection.size > 0 &&\n      !triggerState.isOpen &&\n      inputValue !== lastValue.current &&\n      menuTrigger !== 'manual' &&\n      (props.isOpen === undefined || props.inputValue === undefined)\n    ) {\n      open();\n    }\n\n    // Close the menu if the collection is empty and either open state or items are uncontrolled.\n    if (\n      !allowsEmptyCollection &&\n      triggerState.isOpen &&\n      filteredCollection.size === 0 &&\n      (props.isOpen === undefined || props.items === undefined)\n    ) {\n      triggerState.close();\n    }\n\n    // Close when an item is selected, if open state or selectedKey is uncontrolled.\n    if (\n      selectedKey != null &&\n      selectedKey !== lastSelectedKey.current &&\n      (props.isOpen === undefined || props.selectedKey === undefined)\n    ) {\n      triggerState.close();\n    }\n\n    // Clear focused key when input value changes.\n    if (inputValue !== lastValue.current) {\n      selectionManager.setFocusedKey(null);\n\n      // Set selectedKey to null when the user clears the input.\n      // If controlled, this is the application developer's responsibility.\n      if (inputValue === '' && (props.inputValue === undefined || props.selectedKey === undefined)) {\n        setSelectedKey(null);\n      }\n    }\n\n    // If it is the intial render and inputValue isn't controlled nor has an intial value, set input to match current selected key if any\n    if (isInitialRender.current && (props.inputValue === undefined && props.defaultInputValue === undefined)) {\n      resetInputValue();\n    }\n\n    // If the selectedKey changed, update the input value.\n    // Do nothing if both inputValue and selectedKey are controlled.\n    // In this case, it's the user's responsibility to update inputValue in onSelectionChange. In addition, we preserve the defaultInputValue\n    // on initial render, even if it doesn't match the selected item's text.\n    if (\n      selectedKey !== lastSelectedKey.current &&\n      (props.inputValue === undefined || props.selectedKey === undefined)\n    ) {\n      resetInputValue();\n    } else {\n      lastValue.current = inputValue;\n    }\n\n    isInitialRender.current = false;\n    lastSelectedKey.current = selectedKey;\n  });\n\n  useEffect(() => {\n    // Reset focused key when the menu closes\n    if (!triggerState.isOpen) {\n      selectionManager.setFocusedKey(null);\n    }\n  }, [triggerState.isOpen, selectionManager]);\n\n  let commitCustomValue = () => {\n    let shouldClose = false;\n    lastSelectedKey.current = null;\n    setSelectedKey(null);\n\n    // If previous key was already null, need to manually call onSelectionChange since it won't be triggered by a setSelectedKey call\n    // This allows the application to control whether or not to close the menu on custom value commit\n    if (selectedKey === null && props.onSelectionChange) {\n      props.onSelectionChange(null);\n    }\n\n    // Should close menu ourselves if component open state or selected key is uncontrolled and therefore won't be closed by a user defined event handler\n    shouldClose = props.isOpen == null || props.selectedKey === undefined;\n\n\n    // Close if no other event will be fired. Otherwise, allow the\n    // application to control this based on that event.\n    if (shouldClose) {\n      triggerState.close();\n    }\n  };\n\n  let commit = () => {\n    if (triggerState.isOpen && selectionManager.focusedKey != null) {\n      // Reset inputValue and close menu here if the selected key is already the focused key. Otherwise\n      // fire onSelectionChange to allow the application to control the closing.\n      if (selectedKey === selectionManager.focusedKey) {\n        resetInputValue();\n        triggerState.close();\n      } else {\n        setSelectedKey(selectionManager.focusedKey);\n      }\n    } else if (allowsCustomValue) {\n      commitCustomValue();\n    }\n  };\n\n  let setFocused = (isFocused: boolean) => {\n    if (isFocused) {\n      if (menuTrigger === 'focus') {\n        open();\n      }\n    } else if (shouldCloseOnBlur) {\n      let itemText = collection.getItem(selectedKey)?.textValue ?? '';\n      if (allowsCustomValue && inputValue !== itemText) {\n        commitCustomValue();\n      } else {\n        resetInputValue();\n        // Close menu if blurring away from the combobox\n        // Specifically handles case where user clicks away from the field\n        triggerState.close();\n      }\n    }\n\n    setFocusedState(isFocused);\n  };\n\n  return {\n    ...triggerState,\n    toggle,\n    open,\n    selectionManager,\n    selectedKey,\n    setSelectedKey,\n    disabledKeys,\n    isFocused,\n    setFocused,\n    selectedItem,\n    collection: filteredCollection,\n    inputValue,\n    setInputValue,\n    commit\n  };\n}\n\nfunction filterCollection<T extends object>(collection: Collection<Node<T>>, inputValue: string, filter: FilterFn): Collection<Node<T>> {\n  return new ListCollection(filterNodes(collection, inputValue, filter));\n}\n\nfunction filterNodes<T>(nodes: Iterable<Node<T>>, inputValue: string, filter: FilterFn): Iterable<Node<T>> {\n  let filteredNode = [];\n  for (let node of nodes) {\n    if (node.type === 'section' && node.hasChildNodes) {\n      let filtered = filterNodes(node.childNodes, inputValue, filter);\n      if ([...filtered].length > 0) {\n        filteredNode.push({...node, childNodes: filtered});\n      }\n    } else if (node.type !== 'section' && filter(node.textValue, inputValue)) {\n      filteredNode.push(node);\n    }\n  }\n  return filteredNode;\n}\n"]},"metadata":{},"sourceType":"module"}