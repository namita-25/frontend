{"ast":null,"code":"import { Linking, Platform } from 'react-native';\n\nconst linkToHREF = URL => {\n  Linking.openURL(URL).catch(err => console.error('An error occurred', err));\n};\n\nconst addOnPressFunctionality = (href, callback) => {\n  href ? linkToHREF(href) : '';\n  callback ? callback() : () => {};\n};\n\nexport function useLink(props) {\n  const {\n    href,\n    isExternal,\n    onPress,\n    _ref\n  } = props;\n  let platformLinkProps = {};\n\n  if (Platform.OS === 'web') {\n    platformLinkProps = {\n      href,\n      onClick: onPress\n    }; // Adding target to a tag created by RN-Web\n\n    if (isExternal && _ref.current) {\n      _ref.current.target = '_blank';\n    }\n  } else {\n    platformLinkProps = {\n      onPress: () => {\n        addOnPressFunctionality(href, onPress);\n      }\n    };\n  }\n\n  return {\n    linkProps: { ...platformLinkProps,\n      accessibilityRole: 'link',\n      accessible: true\n    }\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,cAAlC;;AAIA,MAAMC,UAAU,GAAIC,GAAD,IAAiB;EAClCH,OAAO,CAACI,OAARJ,CAAgBG,GAAhBH,EAAqBK,KAArBL,CAA4BM,GAAD,IAASC,OAAO,CAACC,KAARD,CAAc,mBAAdA,EAAmCD,GAAnCC,CAApCP;AADF;;AAIA,MAAMS,uBAAuB,GAAG,CAACC,IAAD,EAAqBC,QAArB,KAAuC;EACrED,IAAI,GAAGR,UAAU,CAACQ,IAAD,CAAb,GAAsB,EAA1BA;EACAC,QAAQ,GAAGA,QAAQ,EAAX,GAAgB,MAAM,CAA9B;AAFF;;AAKA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAAsC;EAC3C,MAAM;IAAEH,IAAF;IAAQI,UAAR;IAAoBC,OAApB;IAA6BC;EAA7B,IAAsCH,KAA5C;EAEA,IAAII,iBAAiB,GAAG,EAAxB;;EAEA,IAAIhB,QAAQ,CAACiB,EAATjB,KAAgB,KAApB,EAA2B;IACzBgB,iBAAiB,GAAG;MAClBP,IADkB;MAElBS,OAAO,EAAEJ;IAFS,CAApBE,CADyB,CAKzB;;IACA,IAAIH,UAAU,IAAIE,IAAI,CAACI,OAAvB,EAAgC;MAC9BJ,IAAI,CAACI,OAALJ,CAAaK,MAAbL,GAAsB,QAAtBA;IACD;EARH,OASO;IACLC,iBAAiB,GAAG;MAClBF,OAAO,EAAE,MAAM;QACbN,uBAAuB,CAACC,IAAD,EAAOK,OAAP,CAAvBN;MACD;IAHiB,CAApBQ;EAKD;;EAED,OAAO;IACLK,SAAS,EAAE,EACT,GAAGL,iBADM;MAETM,iBAAiB,EAAE,MAFV;MAGTC,UAAU,EAAE;IAHH;EADN,CAAP;AAOD","names":["Linking","Platform","linkToHREF","URL","openURL","catch","err","console","error","addOnPressFunctionality","href","callback","useLink","props","isExternal","onPress","_ref","platformLinkProps","OS","onClick","current","target","linkProps","accessibilityRole","accessible"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Link/useLink.ts"],"sourcesContent":["import { Linking, Platform } from 'react-native';\nimport type { IUseLinkProp } from './types';\nimport type { AccessibilityRole } from 'react-native';\n\nconst linkToHREF = (URL: string) => {\n  Linking.openURL(URL).catch((err) => console.error('An error occurred', err));\n};\n\nconst addOnPressFunctionality = (href: string | any, callback: any) => {\n  href ? linkToHREF(href) : '';\n  callback ? callback() : () => {};\n};\n\nexport function useLink(props: IUseLinkProp) {\n  const { href, isExternal, onPress, _ref } = props;\n\n  let platformLinkProps = {};\n\n  if (Platform.OS === 'web') {\n    platformLinkProps = {\n      href,\n      onClick: onPress,\n    };\n    // Adding target to a tag created by RN-Web\n    if (isExternal && _ref.current) {\n      _ref.current.target = '_blank';\n    }\n  } else {\n    platformLinkProps = {\n      onPress: () => {\n        addOnPressFunctionality(href, onPress);\n      },\n    };\n  }\n\n  return {\n    linkProps: {\n      ...platformLinkProps,\n      accessibilityRole: 'link' as AccessibilityRole,\n      accessible: true,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}