{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { VStack } from '../Stack';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst OrderedList = (_ref, ref) => {\n  let {\n    style,\n    children,\n    ...props\n  } = _ref;\n  const {\n    _text,\n    start,\n    _hover,\n    ...resolvedProps\n  } = usePropsResolution('List', props); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  } // add props to children\n\n\n  children = React.Children.map(children, (child, ind) => {\n    return /*#__PURE__*/React.cloneElement(child, {\n      ol: true,\n      index: ind,\n      _text,\n      _hover,\n      start,\n      ...child.props\n    }, child.props.children);\n  });\n  return /*#__PURE__*/React.createElement(VStack, _extends({\n    style: style\n  }, resolvedProps, {\n    ref: ref\n  }), children);\n};\n\nexport default /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(OrderedList));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,WAAW,GAAG,OAA4CC,GAA5C,KAA0D;EAAA,IAAzD;IAAEC,KAAF;IAASC,QAAT;IAAmB,GAAGC;EAAtB,CAAyD;EAC5E,MAAM;IAAEC,KAAF;IAASC,KAAT;IAAgBC,MAAhB;IAAwB,GAAGC;EAA3B,IAA6CV,kBAAkB,CACnE,MADmE,EAEnEM,KAFmE,CAArE,CAD4E,CAK5E;;EACA,IAAIL,qBAAqB,CAACK,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EAP0E,EAS5E;;;EACAD,QAAQ,GAAGP,KAAK,CAACa,QAANb,CAAec,GAAfd,CAAmBO,QAAnBP,EAA6B,CAACe,KAAD,EAAaC,GAAb,KAA6B;IACnE,oBAAOhB,KAAK,CAACiB,YAANjB,CACLe,KADKf,EAEL;MACEkB,EAAE,EAAE,IADN;MAEEC,KAAK,EAAEH,GAFT;MAGEP,KAHF;MAIEE,MAJF;MAKED,KALF;MAME,GAAGK,KAAK,CAACP;IANX,CAFKR,EAULe,KAAK,CAACP,KAANO,CAAYR,QAVPP,CAAP;EADS,EAAXO;EAcA,oBACEP,oBAACC,MAAD;IAAQK,KAAK,EAAEA;EAAf,GAA0BM,aAA1B;IAAyCP,GAAG,EAAEA;EAA9C,IACGE,QADH,CADF;AAxBF;;AA+BA,4BAAeP,KAAK,CAACoB,IAANpB,eAAWA,KAAK,CAACqB,UAANrB,CAAiBI,WAAjBJ,CAAXA,CAAf","names":["React","VStack","usePropsResolution","useHasResponsiveProps","OrderedList","ref","style","children","props","_text","start","_hover","resolvedProps","Children","map","child","ind","cloneElement","ol","index","memo","forwardRef"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/List/Ordered.tsx"],"sourcesContent":["import React from 'react';\nimport { VStack } from '../Stack';\nimport type { IListProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst OrderedList = ({ style, children, ...props }: IListProps, ref?: any) => {\n  const { _text, start, _hover, ...resolvedProps } = usePropsResolution(\n    'List',\n    props\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  // add props to children\n  children = React.Children.map(children, (child: any, ind: number) => {\n    return React.cloneElement(\n      child,\n      {\n        ol: true,\n        index: ind,\n        _text,\n        _hover,\n        start,\n        ...child.props,\n      },\n      child.props.children\n    );\n  });\n  return (\n    <VStack style={style} {...resolvedProps} ref={ref}>\n      {children}\n    </VStack>\n  );\n};\n\nexport default React.memo(React.forwardRef(OrderedList));\n"]},"metadata":{},"sourceType":"module"}