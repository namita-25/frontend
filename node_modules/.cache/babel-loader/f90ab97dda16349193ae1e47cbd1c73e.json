{"ast":null,"code":"import React from 'react';\nimport { useFocusManager } from '@react-aria/focus';\nimport { useId } from '@react-native-aria/utils';\nimport { Platform } from 'react-native';\nimport { ResponsiveQueryContext } from '../../../utils/useResponsiveQuery/ResponsiveQueryProvider';\nimport { uniqueId } from 'lodash';\nexport const useMenuTrigger = _ref => {\n  let {\n    handleOpen,\n    isOpen\n  } = _ref;\n  let menuTriggerId = uniqueId(); // let id = uniqueId();\n\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  if (!disableCSSMediaQueries) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    menuTriggerId = useId();\n  }\n\n  return {\n    'onKeyDownCapture': event => {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId\n  };\n};\nexport const useMenu = () => {\n  const focusManager = useFocusManager();\n\n  const onKeyDown = e => {\n    switch (e.key) {\n      case 'ArrowDown':\n        {\n          e.preventDefault();\n          focusManager.focusNext({\n            wrap: true\n          });\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          e.preventDefault();\n          focusManager.focusPrevious({\n            wrap: true\n          });\n          break;\n        }\n    }\n  };\n\n  return {\n    onKeyDown,\n    accessibilityRole: 'menu'\n  };\n};\nexport const useMenuItem = _ref2 => {\n  let {\n    textValue,\n    ref\n  } = _ref2;\n  return {\n    accessibilityRole: 'menuitem',\n    dataSet: {\n      nativebaseMenuItem: textValue\n    },\n    onHoverIn: () => {\n      if (ref.current && Platform.OS === 'web') ref.current.focus();\n    }\n  };\n};\nexport const useMenuOptionItem = _ref3 => {\n  let {\n    isChecked,\n    type\n  } = _ref3;\n  return {\n    accessibilityRole: 'menuitem' + (Platform.OS === 'web' ? type : ''),\n    accessibilityState: {\n      checked: isChecked\n    },\n    accessibilityChecked: isChecked\n  };\n};\nconst ITEM_ATTR = 'data-nativebase-menu-item';\n\nconst getValue = element => {\n  var _element$getAttribute;\n\n  return (_element$getAttribute = element.getAttribute(ITEM_ATTR)) !== null && _element$getAttribute !== void 0 ? _element$getAttribute : '';\n};\n\nexport const useMenuTypeahead = props => {\n  return {\n    onKeyDown(event) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n\n      if (event.key.length === 1 && !(event.ctrlKey || event.altKey || event.metaKey)) {\n        const container = event.currentTarget;\n        const values = Array.from(container.querySelectorAll(\"[\".concat(ITEM_ATTR, \"]\"))).map(getValue);\n        const searchKey = event.key;\n        const foundValue = values.find(value => value.toLowerCase().startsWith(searchKey));\n        const newItem = container.querySelector(\"[\".concat(ITEM_ATTR, \"=\\\"\").concat(foundValue, \"\\\"]\"));\n\n        if (newItem) {\n          /**\n           * Imperative focus during keydown is risky so we prevent React's batching updates\n           * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n           */\n          setTimeout(() => newItem.focus());\n        }\n      }\n    }\n\n  };\n};","map":{"version":3,"mappings":"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","names":["React","useFocusManager","useId","Platform","ResponsiveQueryContext","uniqueId","useMenuTrigger","handleOpen","isOpen","menuTriggerId","responsiveQueryContext","useContext","disableCSSMediaQueries","event","includes","key","preventDefault","undefined","useMenu","focusManager","onKeyDown","e","focusNext","wrap","focusPrevious","accessibilityRole","useMenuItem","textValue","ref","dataSet","nativebaseMenuItem","onHoverIn","current","OS","focus","useMenuOptionItem","isChecked","type","accessibilityState","checked","accessibilityChecked","ITEM_ATTR","getValue","element","getAttribute","useMenuTypeahead","props","length","ctrlKey","altKey","metaKey","container","currentTarget","values","Array","from","querySelectorAll","map","searchKey","foundValue","find","value","toLowerCase","startsWith","newItem","querySelector","setTimeout"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Menu/useMenu.tsx"],"sourcesContent":["import React from 'react';\nimport { useFocusManager } from '@react-aria/focus';\nimport { useId } from '@react-native-aria/utils';\nimport { AccessibilityRole, Platform } from 'react-native';\nimport { ResponsiveQueryContext } from '../../../utils/useResponsiveQuery/ResponsiveQueryProvider';\nimport { uniqueId } from 'lodash';\n\ntype IMenuTriggerProps = {\n  handleOpen: () => void;\n  isOpen: boolean;\n};\n\nexport const useMenuTrigger = ({ handleOpen, isOpen }: IMenuTriggerProps) => {\n  let menuTriggerId = uniqueId();\n\n  // let id = uniqueId();\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  if (!disableCSSMediaQueries) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    menuTriggerId = useId();\n  }\n  return {\n    'onKeyDownCapture': (event: KeyboardEvent) => {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId,\n  };\n};\n\nexport const useMenu = () => {\n  const focusManager = useFocusManager();\n  const onKeyDown = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowDown': {\n        e.preventDefault();\n        focusManager.focusNext({ wrap: true });\n        break;\n      }\n      case 'ArrowUp': {\n        e.preventDefault();\n        focusManager.focusPrevious({ wrap: true });\n        break;\n      }\n    }\n  };\n\n  return {\n    onKeyDown,\n    accessibilityRole: 'menu' as AccessibilityRole,\n  };\n};\n\nexport const useMenuItem = ({\n  textValue,\n  ref,\n}: {\n  textValue: string;\n  ref: any;\n}) => {\n  return {\n    accessibilityRole: 'menuitem' as AccessibilityRole,\n    dataSet: {\n      nativebaseMenuItem: textValue,\n    },\n    onHoverIn: () => {\n      if (ref.current && Platform.OS === 'web') ref.current.focus();\n    },\n  };\n};\n\nexport const useMenuOptionItem = ({\n  isChecked,\n  type,\n}: {\n  isChecked: boolean;\n  type: 'checkbox' | 'radio';\n}) => {\n  return {\n    accessibilityRole: ('menuitem' +\n      (Platform.OS === 'web' ? type : '')) as AccessibilityRole,\n    accessibilityState: {\n      checked: isChecked,\n    },\n    accessibilityChecked: isChecked,\n  };\n};\n\nconst ITEM_ATTR = 'data-nativebase-menu-item';\nconst getValue = (element: Element) => element.getAttribute(ITEM_ATTR) ?? '';\n\nexport const useMenuTypeahead = (props: any): any => {\n  return {\n    onKeyDown(event: KeyboardEvent) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n\n      if (\n        event.key.length === 1 &&\n        !(event.ctrlKey || event.altKey || event.metaKey)\n      ) {\n        const container = event.currentTarget as HTMLElement;\n        const values = Array.from(\n          container.querySelectorAll(`[${ITEM_ATTR}]`)\n        ).map(getValue);\n\n        const searchKey = event.key;\n\n        const foundValue = values.find((value) =>\n          value.toLowerCase().startsWith(searchKey)\n        );\n        const newItem = container.querySelector(\n          `[${ITEM_ATTR}=\"${foundValue}\"]`\n        );\n\n        if (newItem) {\n          /**\n           * Imperative focus during keydown is risky so we prevent React's batching updates\n           * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n           */\n          setTimeout(() => (newItem as HTMLElement).focus());\n        }\n      }\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}