{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useKeyboardDismissable, usePropsResolution, useToken } from '../../../hooks';\nimport React from 'react';\nimport { Platform } from 'react-native';\nimport { Popper } from '../Popper';\nimport { PopoverContext } from './PopoverContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nexport const PopoverContent = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var _ref, _ref2, _props$bgColor;\n\n  const {\n    onClose,\n    initialFocusRef,\n    finalFocusRef,\n    popoverContentId,\n    headerMounted,\n    bodyMounted,\n    bodyId,\n    headerId,\n    isOpen\n  } = React.useContext(PopoverContext);\n  const resolvedProps = usePropsResolution('PopoverContent', props);\n  const arrowDefaultColor = (_ref = (_ref2 = (_props$bgColor = props.bgColor) !== null && _props$bgColor !== void 0 ? _props$bgColor : props.bg) !== null && _ref2 !== void 0 ? _ref2 : props.backgroundColor) !== null && _ref !== void 0 ? _ref : resolvedProps.backgroundColor;\n  const color = useToken('colors', arrowDefaultColor);\n  React.useEffect(() => {\n    const finalFocusRefCurrentVal = finalFocusRef === null || finalFocusRef === void 0 ? void 0 : finalFocusRef.current;\n\n    if (initialFocusRef && initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    }\n\n    return () => {\n      if (finalFocusRefCurrentVal) {\n        finalFocusRefCurrentVal.focus();\n      }\n    };\n  }, [finalFocusRef, initialFocusRef]);\n  useKeyboardDismissable({\n    enabled: true,\n    callback: onClose\n  });\n  let arrowElement = null;\n  const restChildren = [];\n  React.Children.toArray(props.children).forEach(child => {\n    var _child$type;\n\n    if ((child === null || child === void 0 ? void 0 : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.displayName) === 'PopperArrow') {\n      var _child$props$color;\n\n      arrowElement = /*#__PURE__*/React.cloneElement(child, {\n        backgroundColor: (_child$props$color = child.props.color) !== null && _child$props$color !== void 0 ? _child$props$color : color\n      });\n    } else {\n      restChildren.push(child);\n    }\n  });\n  const accessibilityProps = Platform.OS === 'web' ? {\n    'accessibilityRole': 'dialog',\n    'aria-labelledby': headerMounted ? headerId : undefined,\n    'aria-describedby': bodyMounted ? bodyId : undefined\n  } : {}; //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Popper.Content, _extends({\n    nativeID: popoverContentId\n  }, accessibilityProps, resolvedProps, {\n    ref: ref,\n    isOpen: isOpen\n  }), arrowElement, restChildren);\n});\nPopoverContent.displayName = 'PopoverContent';","map":{"version":3,"mappings":"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","names":["useKeyboardDismissable","usePropsResolution","useToken","React","Platform","Popper","PopoverContext","useHasResponsiveProps","PopoverContent","forwardRef","props","ref","onClose","initialFocusRef","finalFocusRef","popoverContentId","headerMounted","bodyMounted","bodyId","headerId","isOpen","useContext","resolvedProps","arrowDefaultColor","bgColor","bg","backgroundColor","color","useEffect","finalFocusRefCurrentVal","current","focus","enabled","callback","arrowElement","restChildren","Children","toArray","children","forEach","child","type","displayName","cloneElement","push","accessibilityProps","OS","undefined","Content","nativeID"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Popover/PopoverContent.tsx"],"sourcesContent":["import {\n  useKeyboardDismissable,\n  usePropsResolution,\n  useToken,\n} from '../../../hooks';\nimport React from 'react';\nimport { Platform } from 'react-native';\nimport type { IPopoverContentProps } from './types';\nimport { Popper } from '../Popper';\nimport { PopoverContext } from './PopoverContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const PopoverContent = React.forwardRef(\n  (props: IPopoverContentProps, ref: any) => {\n    const {\n      onClose,\n      initialFocusRef,\n      finalFocusRef,\n      popoverContentId,\n      headerMounted,\n      bodyMounted,\n      bodyId,\n      headerId,\n      isOpen,\n    } = React.useContext(PopoverContext);\n    const resolvedProps = usePropsResolution('PopoverContent', props);\n\n    const arrowDefaultColor =\n      props.bgColor ??\n      props.bg ??\n      props.backgroundColor ??\n      resolvedProps.backgroundColor;\n    const color = useToken('colors', arrowDefaultColor);\n\n    React.useEffect(() => {\n      const finalFocusRefCurrentVal = finalFocusRef?.current;\n      if (initialFocusRef && initialFocusRef.current) {\n        initialFocusRef.current.focus();\n      }\n\n      return () => {\n        if (finalFocusRefCurrentVal) {\n          finalFocusRefCurrentVal.focus();\n        }\n      };\n    }, [finalFocusRef, initialFocusRef]);\n\n    useKeyboardDismissable({\n      enabled: true,\n      callback: onClose,\n    });\n\n    let arrowElement = null;\n    const restChildren: any = [];\n    React.Children.toArray(props.children).forEach((child: any) => {\n      if (child?.type?.displayName === 'PopperArrow') {\n        arrowElement = React.cloneElement(child, {\n          backgroundColor: child.props.color ?? color,\n        });\n      } else {\n        restChildren.push(child);\n      }\n    });\n\n    const accessibilityProps =\n      Platform.OS === 'web'\n        ? ({\n            'accessibilityRole': 'dialog',\n            'aria-labelledby': headerMounted ? headerId : undefined,\n            'aria-describedby': bodyMounted ? bodyId : undefined,\n          } as any)\n        : {};\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n\n    return (\n      <Popper.Content\n        nativeID={popoverContentId}\n        {...accessibilityProps}\n        {...resolvedProps}\n        ref={ref}\n        isOpen={isOpen}\n      >\n        {arrowElement}\n        {restChildren}\n      </Popper.Content>\n    );\n  }\n);\n\nPopoverContent.displayName = 'PopoverContent';\n"]},"metadata":{},"sourceType":"module"}