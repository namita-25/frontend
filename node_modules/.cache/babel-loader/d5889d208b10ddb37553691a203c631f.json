{"ast":null,"code":"import { useControlledState } from \"@react-stately/utils\";\n/**\n * Provides state management for toggle components like checkboxes and switches.\n */\n\nexport function useToggleState(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  let {\n    isReadOnly,\n    onChange\n  } = props; // have to provide an empty function so useControlledState doesn't throw a fit\n  // can't use useControlledState's prop calling because we need the event object from the change\n\n  let [isSelected, setSelected] = useControlledState(props.isSelected, props.defaultSelected || false, () => {});\n\n  function updateSelected(value) {\n    if (!isReadOnly) {\n      setSelected(value);\n\n      if (onChange) {\n        onChange(value);\n      }\n    }\n  }\n\n  function toggleState() {\n    if (!isReadOnly) {\n      setSelected(prev => {\n        let newVal = !prev;\n\n        if (onChange) {\n          onChange(newVal);\n        }\n\n        return newVal;\n      });\n    }\n  }\n\n  return {\n    isSelected,\n    setSelected: updateSelected,\n    toggle: toggleState\n  };\n}","map":{"version":3,"mappings":";AA0BA;;;;OAGO,SAASA,cAAT,CAAwBC,KAAxB,EAA8D;EAAA,IAAtCA,KAAsC;IAAtCA,KAAsC,GAAjB,EAArBA;EAAsC;;EACnE,IAAI;IAACC,UAAD;IAAaC;EAAb,IAAyBF,KAA7B,CADmE,CAGnE;EACA;;EACA,IAAI,CAACG,UAAD,EAAaC,WAAb,IAA4BC,kBAAkB,CAACL,KAAK,CAACG,UAAP,EAAmBH,KAAK,CAACM,eAANN,IAAyB,KAA5C,EAAmD,MAAM,CAAzD,EAAlD;;EAEA,SAASO,cAAT,CAAwBC,KAAxB,EAA+B;IAC7B,IAAI,CAACP,UAAL,EAAiB;MACfG,WAAW,CAACI,KAAD,CAAXJ;;MACA,IAAIF,QAAJ,EAAc;QACZA,QAAQ,CAACM,KAAD,CAARN;MACD;IACF;EACF;;EAED,SAASO,WAAT,GAAuB;IACrB,IAAI,CAACR,UAAL,EAAiB;MACfG,WAAW,CAACM,IAAI,IAAI;QAClB,IAAIC,MAAM,GAAG,CAACD,IAAd;;QACA,IAAIR,QAAJ,EAAc;UACZA,QAAQ,CAACS,MAAD,CAART;QACD;;QACD,OAAOS,MAAP;MALS,EAAXP;IAOD;EACF;;EAED,OAAO;IACLD,UADK;IAELC,WAAW,EAAEG,cAFR;IAGLK,MAAM,EAAEH;EAHH,CAAP;AAKD","names":["useToggleState","props","isReadOnly","onChange","isSelected","setSelected","useControlledState","defaultSelected","updateSelected","value","toggleState","prev","newVal","toggle"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/node_modules/@react-stately/toggle/dist/packages/@react-stately/toggle/src/useToggleState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ToggleProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface ToggleState {\n  /** Whether the toggle is selected. */\n  readonly isSelected: boolean,\n\n  /** Updates selection state. */\n  setSelected(isSelected: boolean): void,\n  \n  /** Toggle the selection state. */\n  toggle(): void\n}\n\n/**\n * Provides state management for toggle components like checkboxes and switches.\n */\nexport function useToggleState(props: ToggleProps = {}): ToggleState {\n  let {isReadOnly, onChange} = props;\n\n  // have to provide an empty function so useControlledState doesn't throw a fit\n  // can't use useControlledState's prop calling because we need the event object from the change\n  let [isSelected, setSelected] = useControlledState(props.isSelected, props.defaultSelected || false, () => {});\n\n  function updateSelected(value) {\n    if (!isReadOnly) {\n      setSelected(value);\n      if (onChange) {\n        onChange(value);\n      }\n    }\n  }\n\n  function toggleState() {\n    if (!isReadOnly) {\n      setSelected(prev => {\n        let newVal = !prev;\n        if (onChange) {\n          onChange(newVal);\n        }\n        return newVal;\n      });\n    }\n  }\n\n  return {\n    isSelected,\n    setSelected: updateSelected,\n    toggle: toggleState\n  };\n}\n"]},"metadata":{},"sourceType":"module"}