{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo, useContext } from 'react';\nimport { CheckIcon } from '../../primitives/Icon/Icons';\nimport Text from '../../primitives/Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport MenuItem from './MenuItem';\nimport { MenuOptionContext } from './MenuOptionGroup';\nimport { useMenuOptionItem } from './useMenu';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst MenuItemOption = (_ref, ref) => {\n  let {\n    value,\n    ...props\n  } = _ref;\n  const {\n    values,\n    onChange,\n    type\n  } = useContext(MenuOptionContext);\n  const isChecked = values.includes(value);\n  const menuOptionProps = useMenuOptionItem({\n    isChecked,\n    type\n  });\n  const {\n    children,\n    onPress,\n    _icon,\n    _text,\n    ...resolvedProps\n  } = usePropsResolution('MenuItem', props, {\n    isChecked\n  });\n\n  const modifiedOnPress = e => {\n    onChange(value);\n    onPress && onPress(e);\n  }; //TODO: refactor for responsive prop\n\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(MenuItem, _extends({}, resolvedProps, menuOptionProps, {\n    accessibilityRole: \"button\",\n    onPress: modifiedOnPress,\n    ref: ref\n  }), /*#__PURE__*/React.createElement(CheckIcon, _icon), React.Children.map(children, (child, index) => {\n    if (typeof child === 'string' || typeof child === 'number') {\n      return /*#__PURE__*/React.createElement(Text, _extends({\n        key: \"menu-item-option-\".concat(index)\n      }, _text), child);\n    } else {\n      return child;\n    }\n  }));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(MenuItemOption));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,IAA5B,EAAkCC,UAAlC,QAAoD,OAApD;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,iBAAT,QAAkC,WAAlC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,cAAc,GAAG,OAErBC,GAFqB,KAGlB;EAAA,IAFH;IAAEC,KAAF;IAAS,GAAGC;EAAZ,CAEG;EACH,MAAM;IAAEC,MAAF;IAAUC,QAAV;IAAoBC;EAApB,IAAsDd,UAAU,CACpEK,iBADoE,CAAtE;EAGA,MAAMU,SAAS,GAAGH,MAAM,CAACI,QAAPJ,CAAgBF,KAAhBE,CAAlB;EACA,MAAMK,eAAe,GAAGX,iBAAiB,CAAC;IAAES,SAAF;IAAaD;EAAb,CAAD,CAAzC;EACA,MAAM;IACJI,QADI;IAEJC,OAFI;IAGJC,KAHI;IAIJC,KAJI;IAKJ,GAAGC;EALC,IAMFnB,kBAAkB,CAAC,UAAD,EAAaQ,KAAb,EAAoB;IAAEI;EAAF,CAApB,CANtB;;EAQA,MAAMQ,eAAe,GAAIC,CAAD,IAAY;IAClCX,QAAQ,CAACH,KAAD,CAARG;IACAM,OAAO,IAAIA,OAAO,CAACK,CAAD,CAAlBL;EAFF,EAdG,CAmBH;;;EACA,IAAIZ,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBACEd,oBAACO,QAAD,eACMkB,aADN,EAEML,eAFN;IAGEQ,iBAAiB,EAAC,QAHpB;IAIEN,OAAO,EAAEI,eAJX;IAKEd,GAAG,EAAEA;EALP,iBAOEZ,oBAACI,SAAD,EAAemB,KAAf,CAPF,EAQGvB,KAAK,CAAC6B,QAAN7B,CAAe8B,GAAf9B,CAAmBqB,QAAnBrB,EAA6B,CAAC+B,KAAD,EAAQC,KAAR,KAAuB;IACnD,IAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;MAC1D,oBACE/B,oBAACK,IAAD;QAAM4B,GAAG,6BAAsBD,KAAtB;MAAT,GAA4CR,KAA5C,GACGO,KADH,CADF;IADF,OAMO;MACL,OAAOA,KAAP;IACD;EATF,EARH,CADF;AA1BF;;AAkDA,4BAAe7B,IAAI,eAACD,UAAU,CAACU,cAAD,CAAX,CAAnB","names":["React","forwardRef","memo","useContext","CheckIcon","Text","usePropsResolution","MenuItem","MenuOptionContext","useMenuOptionItem","useHasResponsiveProps","MenuItemOption","ref","value","props","values","onChange","type","isChecked","includes","menuOptionProps","children","onPress","_icon","_text","resolvedProps","modifiedOnPress","e","accessibilityRole","Children","map","child","index","key"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Menu/MenuItemOption.tsx"],"sourcesContent":["import React, { forwardRef, memo, useContext } from 'react';\nimport { CheckIcon } from '../../primitives/Icon/Icons';\nimport Text from '../../primitives/Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport MenuItem from './MenuItem';\nimport type { IMenuItemOptionProps, IMenuOptionContextProps } from './types';\nimport { MenuOptionContext } from './MenuOptionGroup';\nimport { useMenuOptionItem } from './useMenu';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst MenuItemOption = (\n  { value, ...props }: IMenuItemOptionProps,\n  ref: any\n) => {\n  const { values, onChange, type }: IMenuOptionContextProps = useContext(\n    MenuOptionContext\n  );\n  const isChecked = values.includes(value);\n  const menuOptionProps = useMenuOptionItem({ isChecked, type });\n  const {\n    children,\n    onPress,\n    _icon,\n    _text,\n    ...resolvedProps\n  } = usePropsResolution('MenuItem', props, { isChecked });\n\n  const modifiedOnPress = (e: any) => {\n    onChange(value);\n    onPress && onPress(e);\n  };\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <MenuItem\n      {...resolvedProps}\n      {...menuOptionProps}\n      accessibilityRole=\"button\"\n      onPress={modifiedOnPress}\n      ref={ref}\n    >\n      <CheckIcon {..._icon} />\n      {React.Children.map(children, (child, index: any) => {\n        if (typeof child === 'string' || typeof child === 'number') {\n          return (\n            <Text key={`menu-item-option-${index}`} {..._text}>\n              {child}\n            </Text>\n          );\n        } else {\n          return child;\n        }\n      })}\n    </MenuItem>\n  );\n};\n\nexport default memo(forwardRef(MenuItemOption));\n"]},"metadata":{},"sourceType":"module"}