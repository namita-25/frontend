{"ast":null,"code":"import get from 'lodash.get';\nimport omit from 'lodash.omit';\nimport { useWindowDimensions, Platform } from 'react-native';\nimport { useNativeBase } from './../useNativeBase';\nimport { omitUndefined, extractInObject } from './../../theme/tools/';\nimport { filterShadowProps } from './../../utils/filterShadowProps';\nimport { calculateProps } from './utils';\n\nconst filterAndCalculateProps = (theme, colorModeProps, componentTheme, propsReceived, windowWidth) => {\n  // Extracting out children and style, as they do not contribute in props calculation\n  // This is done as these props are passed as it is later in the development\n  // Required as some of these will trigger cyclic computation which may lead to error\n  let [ignoredProps, props] = extractInObject(propsReceived, ['children', 'style', 'onPress', 'icon', 'onOpen', 'onClose']);\n  let newProps = calculateProps(theme, colorModeProps, componentTheme, props, windowWidth);\n  let mergedProps = filterShadowProps(newProps, ignoredProps, Platform.OS);\n  return omitUndefined(mergedProps);\n};\n\nexport function useThemeProps(component, propsReceived) {\n  var _useWindowDimensions;\n\n  const {\n    theme,\n    ...colorModeProps\n  } = useNativeBase(); // console.log('THEME = ', theme);\n\n  const componentTheme = get(theme, \"components.\".concat(component)); // console.log('COMPONENT THEME = ', componentTheme);\n\n  const windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width; // To pass the component theme props and component props seperately\n\n  return filterAndCalculateProps(omit(theme, ['components']), colorModeProps, componentTheme, propsReceived, windowWidth);\n}","map":{"version":3,"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,mBAAT,EAA8BC,QAA9B,QAA8C,cAA9C;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,sBAA/C;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AACA,SAASC,cAAT,QAA+B,SAA/B;;AAEA,MAAMC,uBAAuB,GAAG,CAC9BC,KAD8B,EAE9BC,cAF8B,EAG9BC,cAH8B,EAI9BC,aAJ8B,EAK9BC,WAL8B,KAM3B;EACH;EACA;EACA;EACA,IAAI,CAACC,YAAD,EAAeC,KAAf,IAAwBV,eAAe,CAACO,aAAD,EAAgB,CACzD,UADyD,EAEzD,OAFyD,EAGzD,SAHyD,EAIzD,MAJyD,EAKzD,QALyD,EAMzD,SANyD,CAAhB,CAA3C;EAQA,IAAII,QAAQ,GAAGT,cAAc,CAC3BE,KAD2B,EAE3BC,cAF2B,EAG3BC,cAH2B,EAI3BI,KAJ2B,EAK3BF,WAL2B,CAA7B;EAOA,IAAII,WAAW,GAAGX,iBAAiB,CAACU,QAAD,EAAWF,YAAX,EAAyBZ,QAAQ,CAACgB,EAAlC,CAAnC;EACA,OAAOd,aAAa,CAACa,WAAD,CAApB;AA1BF;;AA6BA,OAAO,SAASE,aAAT,CAAuBC,SAAvB,EAA0CR,aAA1C,EAA8D;EAAA;;EACnE,MAAM;IAAEH,KAAF;IAAS,GAAGC;EAAZ,IAA+BP,aAAa,EAAlD,CADmE,CAEnE;;EAEA,MAAMQ,cAAc,GAAGZ,GAAG,CAACU,KAAD,uBAAsBW,SAAtB,EAA1B,CAJmE,CAKnE;;EACA,MAAMP,WAAW,2BAAGZ,mBAAmB,EAAtB,yDAAGoB,qBAAuBC,KAA3C,CANmE,CAQnE;;EACA,OAAOd,uBAAuB,CAC5BR,IAAI,CAACS,KAAD,EAAQ,CAAC,YAAD,CAAR,CADwB,EAE5BC,cAF4B,EAG5BC,cAH4B,EAI5BC,aAJ4B,EAK5BC,WAL4B,CAA9B;AAOD","names":["get","omit","useWindowDimensions","Platform","useNativeBase","omitUndefined","extractInObject","filterShadowProps","calculateProps","filterAndCalculateProps","theme","colorModeProps","componentTheme","propsReceived","windowWidth","ignoredProps","props","newProps","mergedProps","OS","useThemeProps","component","_useWindowDimensions","width"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/hooks/useThemeProps/useProps.tsx"],"sourcesContent":["import get from 'lodash.get';\nimport omit from 'lodash.omit';\nimport { useWindowDimensions, Platform } from 'react-native';\nimport { useNativeBase } from './../useNativeBase';\nimport { omitUndefined, extractInObject } from './../../theme/tools/';\nimport { filterShadowProps } from './../../utils/filterShadowProps';\nimport { calculateProps } from './utils';\n\nconst filterAndCalculateProps = (\n  theme: any,\n  colorModeProps: any,\n  componentTheme: any,\n  propsReceived: any,\n  windowWidth: any\n) => {\n  // Extracting out children and style, as they do not contribute in props calculation\n  // This is done as these props are passed as it is later in the development\n  // Required as some of these will trigger cyclic computation which may lead to error\n  let [ignoredProps, props] = extractInObject(propsReceived, [\n    'children',\n    'style',\n    'onPress',\n    'icon',\n    'onOpen',\n    'onClose',\n  ]);\n  let newProps = calculateProps(\n    theme,\n    colorModeProps,\n    componentTheme,\n    props,\n    windowWidth\n  );\n  let mergedProps = filterShadowProps(newProps, ignoredProps, Platform.OS);\n  return omitUndefined(mergedProps);\n};\n\nexport function useThemeProps(component: string, propsReceived: any) {\n  const { theme, ...colorModeProps } = useNativeBase();\n  // console.log('THEME = ', theme);\n\n  const componentTheme = get(theme, `components.${component}`);\n  // console.log('COMPONENT THEME = ', componentTheme);\n  const windowWidth = useWindowDimensions()?.width;\n\n  // To pass the component theme props and component props seperately\n  return filterAndCalculateProps(\n    omit(theme, ['components']),\n    colorModeProps,\n    componentTheme,\n    propsReceived,\n    windowWidth\n  );\n}\n"]},"metadata":{},"sourceType":"module"}