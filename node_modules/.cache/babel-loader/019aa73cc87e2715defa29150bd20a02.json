{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from './../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Divider = (props, ref) => {\n  const {\n    orientation,\n    ...resolvedProps\n  } = usePropsResolution('Divider', props, {}, {\n    resolveResponsively: ['thickness']\n  }); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, _extends({}, resolvedProps, {\n    ref: ref,\n    \"aria-orientation\": orientation //@ts-ignore web only role\n    ,\n    accessibilityRole: Platform.OS === 'web' ? 'separator' : undefined\n  }));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Divider));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,OAAOC,GAAP,MAAgB,wBAAhB;AAEA,SAASC,qBAAT,QAAsC,sCAAtC;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAuBC,GAAvB,KAAqC;EACnD,MAAM;IAAEC,WAAF;IAAe,GAAGC;EAAlB,IAAoCP,kBAAkB,CAC1D,SAD0D,EAE1DI,KAF0D,EAG1D,EAH0D,EAI1D;IAAEI,mBAAmB,EAAE,CAAC,WAAD;EAAvB,CAJ0D,CAA5D,CADmD,CAOnD;;EACA,IAAIN,qBAAqB,CAACE,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,oBACER,oBAACK,GAAD,eACMM,aADN;IAEEF,GAAG,EAAEA,GAFP;IAGE,oBAAkBC,WAHpB,CAIE;IAJF;IAKEG,iBAAiB,EAAEV,QAAQ,CAACW,EAATX,KAAgB,KAAhBA,GAAwB,WAAxBA,GAAsCY;EAL3D,GADF;AAXF;;AAsBA,4BAAed,IAAI,eAACC,UAAU,CAACK,OAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Platform","usePropsResolution","Box","useHasResponsiveProps","Divider","props","ref","orientation","resolvedProps","resolveResponsively","accessibilityRole","OS","undefined"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/composites/Divider/index.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from './../../primitives/Box';\nimport type { IDividerProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Divider = (props: IDividerProps, ref?: any) => {\n  const { orientation, ...resolvedProps } = usePropsResolution(\n    'Divider',\n    props,\n    {},\n    { resolveResponsively: ['thickness'] }\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...resolvedProps}\n      ref={ref}\n      aria-orientation={orientation}\n      //@ts-ignore web only role\n      accessibilityRole={Platform.OS === 'web' ? 'separator' : undefined}\n    />\n  );\n};\n\nexport default memo(forwardRef(Divider));\n"]},"metadata":{},"sourceType":"module"}