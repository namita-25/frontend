{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { createContext, memo, forwardRef } from 'react';\nimport { useCheckboxGroupState } from '@react-stately/checkbox';\nimport { useCheckboxGroup } from '@react-native-aria/checkbox';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nexport const CheckboxGroupContext = /*#__PURE__*/createContext(null);\n\nfunction CheckboxGroup(_ref, ref) {\n  let {\n    size,\n    _checkbox,\n    colorScheme,\n    ...props\n  } = _ref;\n  const resolvedProps = usePropsResolution('CheckboxGroup', props);\n  const {\n    children\n  } = props;\n  const state = useCheckboxGroupState(props);\n  const {\n    groupProps\n  } = useCheckboxGroup({\n    'aria-label': props.accessibilityLabel,\n    ...props\n  }, state);\n  const formControlContext = useFormControlContext(); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps({ ...props,\n    size,\n    colorScheme\n  })) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(CheckboxGroupContext.Provider, {\n    value: {\n      //@ts-ignore\n      size,\n      colorScheme,\n      ..._checkbox,\n      ...formControlContext,\n      state\n    }\n  }, /*#__PURE__*/React.createElement(Box, _extends({}, resolvedProps, groupProps, props, {\n    ref: ref\n  }), children));\n}\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(CheckboxGroup));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,IAA/B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,SAASC,qBAAT,QAAsC,8BAAtC;AAEA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AAEA,OAAO,MAAMC,oBAAoB,gBAAGT,aAAa,CAC/C,IAD+C,CAA1C;;AAIP,SAASU,aAAT,OAEEC,GAFF,EAGE;EAAA,IAFA;IAAEC,IAAF;IAAQC,SAAR;IAAmBC,WAAnB;IAAgC,GAAGC;EAAnC,CAEA;EACA,MAAMC,aAAa,GAAGR,kBAAkB,CAAC,eAAD,EAAkBO,KAAlB,CAAxC;EACA,MAAM;IAAEE;EAAF,IAAeF,KAArB;EACA,MAAMG,KAAK,GAAGf,qBAAqB,CAACY,KAAD,CAAnC;EACA,MAAM;IAAEI;EAAF,IAAiBf,gBAAgB,CACrC;IAAE,cAAcW,KAAK,CAACK,kBAAtB;IAA0C,GAAGL;EAA7C,CADqC,EAErCG,KAFqC,CAAvC;EAKA,MAAMG,kBAAkB,GAAGhB,qBAAqB,EAAhD,CATA,CAUA;;EACA,IAAIE,qBAAqB,CAAC,EAAE,GAAGQ,KAAL;IAAYH,IAAZ;IAAkBE;EAAlB,CAAD,CAAzB,EAA4D;IAC1D,OAAO,IAAP;EACD;;EACD,oBACEf,oBAACU,oBAAD,CAAsBa,QAAtB;IACEC,KAAK,EAAE;MACL;MACAX,IAFK;MAGLE,WAHK;MAIL,GAAGD,SAJE;MAKL,GAAGQ,kBALE;MAMLH;IANK;EADT,gBAUEnB,oBAACO,GAAD,eAASU,aAAT,EAA4BG,UAA5B,EAA4CJ,KAA5C;IAAmDJ,GAAG,EAAEA;EAAxD,IACGM,QADH,CAVF,CADF;AAgBD;;AAED,4BAAehB,IAAI,eAACC,UAAU,CAACQ,aAAD,CAAX,CAAnB","names":["React","createContext","memo","forwardRef","useCheckboxGroupState","useCheckboxGroup","useFormControlContext","Box","useHasResponsiveProps","usePropsResolution","CheckboxGroupContext","CheckboxGroup","ref","size","_checkbox","colorScheme","props","resolvedProps","children","state","groupProps","accessibilityLabel","formControlContext","Provider","value"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Checkbox/CheckboxGroup.tsx"],"sourcesContent":["import React, { createContext, memo, forwardRef } from 'react';\nimport { useCheckboxGroupState } from '@react-stately/checkbox';\nimport { useCheckboxGroup } from '@react-native-aria/checkbox';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport type { ICheckboxGroupProps, ICheckboxContext } from './types';\nimport Box from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\n\nexport const CheckboxGroupContext = createContext<ICheckboxContext | null>(\n  null\n);\n\nfunction CheckboxGroup(\n  { size, _checkbox, colorScheme, ...props }: ICheckboxGroupProps,\n  ref?: any\n) {\n  const resolvedProps = usePropsResolution('CheckboxGroup', props);\n  const { children } = props;\n  const state = useCheckboxGroupState(props);\n  const { groupProps } = useCheckboxGroup(\n    { 'aria-label': props.accessibilityLabel, ...props },\n    state\n  );\n\n  const formControlContext = useFormControlContext();\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, size, colorScheme })) {\n    return null;\n  }\n  return (\n    <CheckboxGroupContext.Provider\n      value={{\n        //@ts-ignore\n        size,\n        colorScheme,\n        ..._checkbox,\n        ...formControlContext,\n        state,\n      }}\n    >\n      <Box {...resolvedProps} {...groupProps} {...props} ref={ref}>\n        {children}\n      </Box>\n    </CheckboxGroupContext.Provider>\n  );\n}\n\nexport default memo(forwardRef(CheckboxGroup));\n"]},"metadata":{},"sourceType":"module"}