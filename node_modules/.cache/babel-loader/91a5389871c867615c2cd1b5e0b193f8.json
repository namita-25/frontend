{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { useToggleState } from '@react-stately/toggle';\nimport { Switch as RNSwitch } from 'react-native';\nimport isNil from 'lodash.isnil';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useToken } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { mergeRefs } from '../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport { combineContextAndProps } from '../../../utils';\nconst StyledNBSwitch = makeStyledComponent(RNSwitch); // TODO: Needs proper refactor\n\nconst Switch = (_ref2, ref) => {\n  let {\n    disabled,\n    isDisabled,\n    isInvalid,\n    isChecked,\n    defaultIsChecked,\n    accessibilityLabel,\n    accessibilityHint,\n    onToggle,\n    value,\n    onValueChange,\n    isHovered: isHoveredProp,\n    ...props\n  } = _ref2;\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const state = useToggleState({\n    defaultSelected: !isNil(defaultIsChecked) ? defaultIsChecked : false\n  });\n  const checked = !isNil(isChecked) ? isChecked : state.isSelected;\n\n  const _ref = React.useRef(null);\n\n  const {\n    isHovered\n  } = useHover({}, _ref);\n  const {\n    onTrackColor: _onTrackColor,\n    offTrackColor: _offTrackColor,\n    onThumbColor: _onThumbColor,\n    offThumbColor: _offThumbColor,\n    ...resolvedProps\n  } = usePropsResolution('Switch', props, {\n    isHovered: isHoveredProp || isHovered,\n    isDisabled: disabled || isDisabled || combinedProps.isDisabled,\n    isInvalid: isInvalid || combinedProps.isInvalid,\n    isChecked: checked\n  });\n  const onTrackColor = useToken('colors', _onTrackColor);\n  const offTrackColor = useToken('colors', _offTrackColor);\n  const onThumbColor = useToken('colors', _onThumbColor);\n  const offThumbColor = useToken('colors', _offThumbColor); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps({ ...props,\n    isDisabled,\n    isInvalid,\n    isChecked,\n    defaultIsChecked,\n    accessibilityLabel,\n    accessibilityHint\n  })) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(StyledNBSwitch, _extends({\n    accessibilityLabel: accessibilityLabel,\n    accessibilityHint: accessibilityHint,\n    trackColor: {\n      false: offTrackColor,\n      true: onTrackColor\n    },\n    thumbColor: checked ? onThumbColor : offThumbColor,\n    activeThumbColor: onThumbColor // react-native-web prop for active thumbColor\n    ,\n    ios_backgroundColor: offTrackColor\n  }, resolvedProps, {\n    disabled: disabled || isDisabled || combinedProps.isDisabled,\n    onValueChange: val => {\n      onValueChange && onValueChange(val);\n      onToggle ? onToggle(val) : state.toggle();\n    },\n    value: value || checked,\n    ref: mergeRefs([ref, _ref])\n  }));\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Switch));","map":{"version":3,"mappings":"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","names":["React","memo","forwardRef","useToggleState","Switch","RNSwitch","isNil","usePropsResolution","useToken","makeStyledComponent","mergeRefs","useHover","useHasResponsiveProps","useFormControlContext","combineContextAndProps","StyledNBSwitch","ref","disabled","isDisabled","isInvalid","isChecked","defaultIsChecked","accessibilityLabel","accessibilityHint","onToggle","value","onValueChange","isHovered","isHoveredProp","props","formControlContext","combinedProps","state","defaultSelected","checked","isSelected","_ref","useRef","onTrackColor","_onTrackColor","offTrackColor","_offTrackColor","onThumbColor","_onThumbColor","offThumbColor","_offThumbColor","resolvedProps","trackColor","false","true","thumbColor","activeThumbColor","ios_backgroundColor","val","toggle"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/components/primitives/Switch/index.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToggleState } from '@react-stately/toggle';\nimport { Switch as RNSwitch } from 'react-native';\nimport isNil from 'lodash.isnil';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useToken } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport type { ISwitchProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport { combineContextAndProps } from '../../../utils';\n\nconst StyledNBSwitch = makeStyledComponent(RNSwitch);\n\n// TODO: Needs proper refactor\nconst Switch = (\n  {\n    disabled,\n    isDisabled,\n    isInvalid,\n    isChecked,\n    defaultIsChecked,\n    accessibilityLabel,\n    accessibilityHint,\n    onToggle,\n    value,\n    onValueChange,\n    isHovered: isHoveredProp,\n    ...props\n  }: ISwitchProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const combinedProps = combineContextAndProps(formControlContext, props);\n\n  const state = useToggleState({\n    defaultSelected: !isNil(defaultIsChecked) ? defaultIsChecked : false,\n  });\n  const checked = !isNil(isChecked) ? isChecked : state.isSelected;\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const {\n    onTrackColor: _onTrackColor,\n    offTrackColor: _offTrackColor,\n    onThumbColor: _onThumbColor,\n    offThumbColor: _offThumbColor,\n    ...resolvedProps\n  } = usePropsResolution('Switch', props, {\n    isHovered: isHoveredProp || isHovered,\n    isDisabled: disabled || isDisabled || combinedProps.isDisabled,\n    isInvalid: isInvalid || combinedProps.isInvalid,\n    isChecked: checked,\n  });\n\n  const onTrackColor = useToken('colors', _onTrackColor);\n  const offTrackColor = useToken('colors', _offTrackColor);\n  const onThumbColor = useToken('colors', _onThumbColor);\n  const offThumbColor = useToken('colors', _offThumbColor);\n\n  //TODO: refactor for responsive prop\n  if (\n    useHasResponsiveProps({\n      ...props,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      defaultIsChecked,\n      accessibilityLabel,\n      accessibilityHint,\n    })\n  ) {\n    return null;\n  }\n  return (\n    <StyledNBSwitch\n      accessibilityLabel={accessibilityLabel}\n      accessibilityHint={accessibilityHint}\n      trackColor={{ false: offTrackColor, true: onTrackColor }}\n      thumbColor={checked ? onThumbColor : offThumbColor}\n      activeThumbColor={onThumbColor} // react-native-web prop for active thumbColor\n      ios_backgroundColor={offTrackColor}\n      {...resolvedProps}\n      disabled={disabled || isDisabled || combinedProps.isDisabled}\n      onValueChange={(val: boolean) => {\n        onValueChange && onValueChange(val);\n        onToggle ? onToggle(val) : state.toggle();\n      }}\n      value={value || checked}\n      ref={mergeRefs([ref, _ref])}\n    />\n  );\n};\n\nexport default memo(forwardRef(Switch));\nexport type { ISwitchProps };\n"]},"metadata":{},"sourceType":"module"}