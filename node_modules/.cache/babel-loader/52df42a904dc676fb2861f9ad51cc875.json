{"ast":null,"code":"import { useWindowDimensions } from 'react-native';\nimport { getClosestBreakpoint, hasValidBreakpointFormat, findLastValidBreakpoint } from '../theme/tools';\nimport { useTheme } from './../hooks/useTheme';\nexport function useBreakpointValue(values) {\n  var _useWindowDimensions;\n\n  let windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width;\n  const theme = useTheme();\n\n  if (hasValidBreakpointFormat(values, theme.breakpoints)) {\n    let currentBreakpoint = getClosestBreakpoint(theme.breakpoints, windowWidth);\n    return findLastValidBreakpoint(values, theme.breakpoints, currentBreakpoint);\n  } else {\n    return values;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,mBAAT,QAAoC,cAApC;AACA,SACEC,oBADF,EAEEC,wBAFF,EAGEC,uBAHF,QAIO,gBAJP;AAKA,SAASC,QAAT,QAAyB,qBAAzB;AAOA,OAAO,SAASC,kBAAT,CAA4BC,MAA5B,EAA6D;EAAA;;EAClE,IAAIC,WAAW,2BAAGP,mBAAmB,EAAtB,yDAAGQ,qBAAuBC,KAAzC;EACA,MAAMC,KAAK,GAAGN,QAAQ,EAAtB;;EAEA,IAAIF,wBAAwB,CAACI,MAAD,EAASI,KAAK,CAACC,WAAf,CAA5B,EAAyD;IACvD,IAAIC,iBAAiB,GAAGX,oBAAoB,CAC1CS,KAAK,CAACC,WADoC,EAE1CJ,WAF0C,CAA5C;IAIA,OAAOJ,uBAAuB,CAC5BG,MAD4B,EAE5BI,KAAK,CAACC,WAFsB,EAG5BC,iBAH4B,CAA9B;EALF,OAUO;IACL,OAAON,MAAP;EACD;AACF","names":["useWindowDimensions","getClosestBreakpoint","hasValidBreakpointFormat","findLastValidBreakpoint","useTheme","useBreakpointValue","values","windowWidth","_useWindowDimensions","width","theme","breakpoints","currentBreakpoint"],"sources":["/home/ttpl-rt-68/Documents/ULP/ulp-card/node_modules/native-base/lib/module/hooks/useBreakpointValue.ts"],"sourcesContent":["import { useWindowDimensions } from 'react-native';\nimport {\n  getClosestBreakpoint,\n  hasValidBreakpointFormat,\n  findLastValidBreakpoint,\n} from '../theme/tools';\nimport { useTheme } from './../hooks/useTheme';\nimport type { ITheme } from '../theme/index';\n\ntype UseBreakpointValueParam =\n  | { [key in keyof ITheme['breakpoints']]?: any }\n  | Array<any>;\n\nexport function useBreakpointValue(values: UseBreakpointValueParam) {\n  let windowWidth = useWindowDimensions()?.width;\n  const theme = useTheme();\n\n  if (hasValidBreakpointFormat(values, theme.breakpoints)) {\n    let currentBreakpoint = getClosestBreakpoint(\n      theme.breakpoints,\n      windowWidth\n    );\n    return findLastValidBreakpoint(\n      values,\n      theme.breakpoints,\n      currentBreakpoint\n    );\n  } else {\n    return values;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}